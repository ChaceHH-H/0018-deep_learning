/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 13.03.2024 23:24:34

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 30
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 60
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 56432;
#else
constexpr int kTensorArenaSize = 55408;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 1, 2, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data3[8] = { 25, -925, -146, 365, -232, 732, 381, -214, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<1, float> quant3_scale = { 1, { 6.9162320869509131e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[8*64] = { 
  -55, 51, -84, 38, 49, 73, 33, -27, -29, -101, 67, -37, -74, -1, 2, -29, -9, 42, 29, -85, -34, -75, 42, 26, 41, 19, -40, -83, 93, -52, -39, -16, 20, -84, 35, -34, 24, -45, 62, -27, -82, -51, 101, 15, -43, 7, 29, -95, 52, -21, -92, -30, -65, -18, -80, -9, 35, 0, -10, -18, -54, -16, -16, -7, 
  -34, -72, -22, -1, 49, -6, -30, 19, 65, 61, 15, -14, 65, 36, 14, -25, 79, -81, -81, 28, -48, -49, 59, 76, 75, 88, 70, -18, -62, 2, -26, -78, 39, 7, 17, -62, -16, -45, 33, 9, 90, 74, -37, 67, 46, 45, 58, -55, -40, 50, 13, -70, -50, 59, -32, -50, -2, 88, -87, 47, -20, -82, 45, 34, 
  -70, -34, 32, -33, 55, 19, -76, -27, -53, -127, -4, -42, 47, 66, 95, 59, 9, -108, 9, -72, 20, 66, -52, -107, 87, 40, 40, -62, 2, -74, 28, -72, -25, -32, -63, -59, 85, -20, -69, 25, -7, 74, -76, 72, 21, -76, 11, 86, -77, -24, 43, 48, 35, -32, -16, 58, -87, -2, -12, -67, -67, -79, -44, 35, 
  -47, 83, -112, -89, -76, -53, -78, -59, 63, -42, 1, -72, 37, 33, 21, -69, -50, 30, 52, -34, -53, -67, -93, 24, -89, 70, 102, -37, 24, -52, -65, 26, 32, 0, -73, 59, -75, 52, 37, 22, -38, -7, -74, -80, -1, -74, 64, 43, 19, -41, 29, 64, -19, -23, -33, -73, -83, 60, -39, 57, 15, -27, 35, -47, 
  -18, 72, 33, -27, -45, -65, 45, -2, -44, -53, 40, -20, 20, -76, -42, -59, 10, 17, -54, -30, 43, -27, 95, -45, -96, -63, 45, 41, 15, 61, 62, -7, 40, 36, 23, -109, -63, -29, -79, 49, 36, -54, 72, -102, -82, 18, 10, -49, -27, -30, -68, -32, 69, 14, -41, 55, -58, -11, -74, 81, -53, -6, 10, 15, 
  24, -5, 79, -108, -9, -94, -62, 72, -49, 36, 41, -102, -61, -57, -41, 48, 86, -35, 4, 14, -40, 4, -32, 3, 33, -3, -70, -61, 35, -7, 71, -61, 57, -22, 38, -28, 0, -63, 14, 89, 5, -50, -30, 37, -36, 49, -49, -49, 30, -58, 25, 30, -72, 1, 31, -62, -40, 63, -79, -8, 61, 16, -72, -1, 
  1, -42, -68, -8, 46, 29, 62, 69, -45, -13, 65, -64, -45, 97, 91, -88, -59, -50, -29, -75, -70, 56, -16, -6, -63, 30, -78, -52, -6, -20, 20, -25, -74, -41, -10, 48, -55, -31, -77, -13, -7, 61, 45, 78, -24, 45, -27, 33, 22, -25, 39, 39, 3, 32, -58, -71, -71, 9, -10, 28, 32, -13, 24, 22, 
  -62, -73, -29, 22, -45, -94, -9, 5, 2, 71, 6, 31, -111, 13, -4, -31, -110, -4, -36, 85, -86, 29, 12, -83, 25, 17, 59, 36, -26, -86, 41, -27, -71, 40, -76, -16, 33, 26, 58, -10, -96, 60, 39, 14, 21, 46, 71, -23, -74, -73, 38, 69, 50, 72, 81, 4, 22, -5, -9, -35, -17, 22, 76, -88, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 8,64 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0034219846129417419, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[64] = { 109, -258, 93, 10, 87, 279, -125, -560, -362, 305, -175, 298, 35, 72, 710, -51, 335, 97, -110, 33, -156, 280, 266, 27, -90, 251, -348, -86, 116, -294, 283, -524, 35, 236, -94, -113, -118, -465, -91, -131, 361, -540, 322, 270, -134, -592, -493, 204, -417, 207, 233, 292, -264, -377, 0, -58, -173, -274, -437, -514, -146, -408, -201, 45, };
const TfArray<1, int> tensor_dimension5 = { 1, { 64 } };
const TfArray<1, float> quant5_scale = { 1, { 5.9630136092891917e-05, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[64*102] = { 
  50, -53, 33, -37, 33, 17, -20, 56, -25, 41, -45, -16, -16, -4, -45, 80, 52, 55, -21, 30, 66, -73, -6, 1, -28, -98, 21, -47, -46, 12, -42, 58, -67, 61, -9, -40, 13, 8, -6, 56, -38, -32, 16, 56, -80, -31, -6, -15, 65, 68, -11, 3, -26, 62, 90, -25, -13, 4, 35, -13, -19, -48, -54, 61, 37, -27, 65, 52, -66, -70, 37, 59, -111, -31, -42, -48, -14, 19, -10, -13, 45, 18, -69, 21, 11, 78, 2, 17, -71, 16, 31, 37, -25, 65, -64, -5, -23, 35, 43, 68, -4, -68, 
  -9, 64, 61, -17, 49, 6, -45, 29, 56, -6, -67, -77, 31, -73, 19, -30, -53, 55, 40, -75, -39, -37, -76, -10, 50, -54, -16, -50, 22, 30, 17, 29, 72, -7, 41, -69, 80, -58, 35, 75, 39, -7, 17, -39, 18, 74, -3, -24, -23, -67, 64, -57, 39, -17, 60, 83, 26, 60, -54, -19, 61, -27, -22, -62, -41, -37, -49, -7, 46, 0, 25, 13, 28, -50, 58, -45, 43, 66, -7, -4, 36, -66, 30, 15, -61, 14, -30, 56, 69, 53, -67, -88, -36, -98, 67, -22, -63, 57, 3, -1, -76, -59, 
  -8, 43, -49, -8, 35, -15, -50, 32, 84, -36, -77, -36, -14, -26, 30, 46, 19, 16, 43, -39, 46, -53, 67, 12, 2, -5, -69, -53, -19, -63, -50, -21, -58, 31, 51, 27, 57, -28, 73, -32, 28, -63, 67, 54, -22, 17, 11, -54, 67, -57, -38, 8, -33, -5, 42, 82, 40, -49, -47, 59, 66, -48, 61, 5, -42, 7, -32, 36, -62, -56, 57, 30, -72, -51, 31, -79, 72, 56, 15, -24, -33, 42, -19, 52, 3, -49, 20, -83, -30, -44, 49, -51, 11, 36, 60, 69, 25, 43, -29, 18, 18, 4, 
  -27, -34, 40, -19, -70, 67, 4, 42, -25, 15, -41, 43, -54, -31, -82, -20, 45, 40, -80, -25, 80, -28, -54, -15, -20, -10, 32, 6, 65, 80, -36, -10, 34, 25, 34, -59, 4, 20, -16, -89, -8, 63, -63, -17, 50, -69, 17, 8, 20, -40, -43, -40, -20, -43, -30, 6, 20, -52, -15, 69, 69, 6, -8, -49, 24, -29, -10, 66, 28, 40, -69, -31, -64, -1, -15, -5, -50, 54, 35, 18, -18, 50, -83, -28, 62, 51, 49, 70, -31, 50, -43, -54, -3, 39, -14, -83, -36, -6, 11, -20, -63, 55, 
  -56, -42, 6, 31, 41, 67, -5, -55, 37, 10, 9, 38, -33, -25, -2, 34, -24, 60, 23, 36, 33, -32, 32, -69, 83, -77, -29, -75, 13, -2, -3, -63, -53, 11, 51, -81, 66, 0, -3, -27, -35, 71, -81, 34, -30, 12, -81, -24, -6, -23, 3, -3, -40, 1, -51, -7, -15, 24, 46, -67, -42, 4, 51, 86, -62, 45, 16, -27, 57, 79, 44, -20, -48, -51, -44, 34, -64, -19, 41, -1, 85, 49, 88, -16, -59, -12, 30, -55, -10, 8, 3, -9, 33, -16, -73, -41, 56, -28, 41, 54, -41, 0, 
  1, 29, 70, 45, 57, -52, -92, 73, 58, 32, 50, 63, 58, -71, -62, 55, 53, -56, -42, -1, 56, -12, -73, -64, -10, -24, 54, -70, -46, -34, 69, -17, 39, 77, -1, -80, -56, 10, 21, 57, -3, -31, 35, 14, -24, -18, -44, -46, 36, -70, 53, 43, 45, 64, -18, 52, -10, 3, 31, 46, -40, -55, 18, -20, -55, -53, -81, 44, 32, 41, -63, -26, 24, 0, -26, -27, 2, 63, -28, 81, 5, -30, 94, -71, 66, 0, 58, 58, -45, -15, -44, 50, 104, 35, -78, -45, -24, 7, -76, -21, -20, 2, 
  -53, 56, 13, 19, -73, 65, -42, 25, 39, 79, 48, -38, -93, -40, -7, -38, -66, -53, 62, 0, -17, 57, -49, 43, -33, -52, 44, -56, -7, -20, -49, -66, -24, -56, 46, 3, -13, -2, 46, -4, -24, 41, -82, -88, -38, -42, -40, -8, -14, -77, -21, 36, 23, -70, 18, 68, -47, -2, 23, 36, 61, 13, 64, 21, -18, 3, 44, -20, 14, -3, -67, 16, -60, -69, 57, -106, -24, -85, 49, 37, -24, 60, 9, 15, -29, -22, 60, 4, -73, 9, 57, -19, 32, 39, -42, -106, -24, 3, -45, -30, 59, 64, 
  21, -91, 50, 68, -55, -19, -76, 5, -52, -11, 6, -27, -63, 22, -88, 67, -2, -23, -7, -68, 6, 24, -74, 17, 6, -57, 21, -30, 44, -91, 41, 36, 34, -2, -1, 34, 12, -18, 36, -66, 30, 6, -80, -15, 32, 51, 64, 2, 40, -32, 14, 39, -68, -18, -51, -21, -75, 35, 31, -29, 33, -68, -33, 59, 11, -12, 11, 1, 44, -45, -75, -7, 32, 42, 6, -54, 15, -44, -48, -6, -6, 60, 36, -28, 56, -3, 3, -90, 35, -89, 18, 52, 22, -16, -23, 4, -39, -13, -2, 33, 19, 31, 
  -32, -16, 59, -25, 47, 25, -46, 58, 37, -46, 36, -65, -2, 37, 28, 41, 57, -6, 64, 16, -8, 9, -32, 4, 49, 25, -12, 38, 60, -6, 36, -39, 22, 2, 14, -37, 27, -3, -57, -72, 45, -76, -41, 58, 18, 60, -7, 22, 35, 54, -69, -69, -35, 15, -45, 38, 48, -81, 3, 66, -49, -29, 62, 65, -56, -22, 5, -23, -53, -30, 51, -61, -52, 64, 33, -50, -24, 26, -49, -45, -66, -21, 31, 65, -25, 9, -28, -17, -11, 47, -69, -38, 21, 56, 6, -64, -71, 27, -65, -78, -76, 21, 
  49, 3, -75, 58, 47, 17, 94, 48, -7, 41, -41, 50, -61, 3, -36, 73, 77, -25, -48, -22, -35, 12, -49, 77, -46, 70, 38, 29, -52, 33, -33, 14, -60, -28, -70, 57, -70, -39, 50, -25, -19, 30, 27, -79, -9, 29, -5, 56, -32, 72, -53, -26, -45, -10, -33, -12, -20, -60, 54, 4, -82, 42, -7, -32, -41, 97, -19, -41, 25, -28, 54, -16, 21, 51, 52, 22, 58, 56, 91, -60, -60, -29, -50, -2, 69, 63, 39, -51, -90, -33, -5, -30, -49, 54, -26, 41, -12, 13, 30, 56, -30, 78, 
  52, 60, 38, 37, 35, -5, -4, 7, 28, 17, -34, -6, -42, 0, -32, 9, -40, 68, 36, -7, -2, -29, -75, -67, -55, 56, 33, -41, 55, -37, 14, -50, -58, -18, 7, 43, -16, 4, 24, -4, 69, -34, -37, 18, -48, 34, -43, -26, -63, 22, -69, -25, 41, -15, 6, 38, -2, 32, -58, 22, -16, -39, 67, -72, -33, -76, -52, -3, -9, -33, 2, -54, -66, -21, 5, -64, 8, 31, -19, 20, -55, 36, -16, 0, -61, -56, -2, -64, -75, -72, -23, 47, -38, 31, 69, -23, -38, 52, 65, -64, -9, -20, 
  -10, 4, 12, -11, 65, -28, 59, 39, -53, 54, 53, -30, -53, 57, -57, -36, -75, -39, -41, 81, -4, 34, -71, -55, 50, 20, -31, 19, 29, -53, 23, -36, -68, -76, -14, -29, -9, -40, -59, 38, 49, -39, -44, 63, -38, -34, 70, -65, -65, 46, 66, 8, 49, 76, -48, -65, -61, -75, 37, 10, 55, -44, 70, -6, -28, -68, -49, 96, 51, -44, 10, 33, 48, -5, 55, -25, -47, 11, -17, -35, -42, -52, -19, 6, -1, -2, 69, 4, -22, 30, -21, -46, 14, 83, -37, 24, -47, 22, -58, 30, -64, 85, 
  44, -21, 36, -9, -37, -48, 64, 26, 49, -54, -75, 28, -12, -84, -69, 25, 36, -10, -14, -25, -22, -31, -9, 34, 70, -42, -33, 83, -58, -15, 1, -36, 6, -30, -13, 23, 36, 6, -5, -13, 21, 61, 41, 92, -27, -72, -62, -2, -52, -53, 78, 82, 77, -59, -81, 27, 47, -27, 77, -53, -47, -4, -24, -73, 35, 22, -17, -39, -15, 34, 12, -50, -52, 69, 39, -15, 53, -60, -53, 90, -51, 54, 9, 10, 13, -25, 26, 10, -37, 57, -15, -18, 44, -76, 39, 76, -42, -4, 65, -42, 59, 41, 
  -23, -28, -65, 40, -20, -20, -56, -32, 14, 32, 79, 14, 36, 29, 20, 35, -24, 51, 29, -63, -22, 88, 22, -19, 31, -35, 46, -69, -48, -28, -68, -59, -27, -63, 36, 44, 38, 78, 45, 5, -68, -61, 25, 29, 26, 56, -59, 9, -10, 45, -21, -16, -95, 19, 10, -57, -29, -28, 47, 43, -57, -67, -14, 53, -8, -10, -92, 11, 66, 6, 37, -81, -56, 33, 61, -6, -38, -58, 29, 25, 23, 56, 1, 0, 11, -2, -44, -23, -58, 23, 2, 3, 112, 83, 0, -92, -28, -39, -81, 48, 103, -11, 
  -33, -37, -60, -68, 25, 54, -16, 10, -87, -91, 45, 90, -41, 13, 24, 19, -42, 124, -38, -13, 33, -30, -64, -54, 29, -61, 34, -1, -53, 59, -26, -11, -12, -54, -39, 32, 71, 43, -55, 44, -47, -76, 33, 58, -21, -77, -46, 51, -17, -44, 6, 53, 41, 4, -66, -13, 3, 60, 38, 89, -39, 44, -71, 47, 46, -14, 21, -9, -10, -19, -10, 29, -22, -58, 69, -57, -11, -34, 86, -16, 17, -29, 90, 8, 26, 70, 35, -22, -5, 37, -9, -32, 73, 70, 16, 25, -36, -8, 9, -61, 81, 40, 
  -9, 13, -27, -7, 31, -2, 67, -20, 87, -8, -60, 36, 67, 35, -29, 67, 28, 6, 36, 76, 66, -39, -43, -9, -9, 33, 19, 29, 12, 85, -18, 24, -82, -1, -46, -29, -77, 35, 63, -85, 40, -1, -46, -2, 52, 13, 57, 38, 11, 74, -54, -37, 46, -19, -24, 14, -37, 5, 12, -11, 60, 45, -73, -45, 15, -8, -69, 65, -17, -61, -48, 66, 51, -49, -26, 4, 27, -9, 65, -45, -25, -3, 56, 25, -31, -57, -49, -9, -56, -66, 35, 22, -44, -14, 45, 17, 42, -30, 36, -3, 29, 13, 
  -11, -4, 12, -42, 54, -65, -33, 80, 37, -57, -67, 31, 77, -6, -45, 12, 53, 28, 62, -31, -20, 44, 41, -19, 34, -61, -56, 15, -26, -81, -55, 50, 12, 2, -52, 47, 36, -52, -34, 39, -9, -31, 33, -39, -8, 75, 2, 38, 58, -4, 6, -17, -35, 13, 94, -46, 42, 3, 76, 21, 38, 56, -52, 53, 58, -28, 20, -68, -16, -58, -39, 6, 15, 0, 69, 31, 56, -36, -14, -71, 32, 40, -95, -19, -64, 63, 8, 19, -84, -53, 9, 16, 4, -12, 32, -45, -19, -34, -58, -31, -33, 34, 
  9, 32, -30, -77, -50, -5, 51, 40, 9, 28, -85, -43, -39, 16, -37, -3, -85, 39, 38, -17, -14, 39, -4, 47, 67, 31, 5, 55, -32, -54, -44, -61, -5, -27, 4, -40, -54, -44, 3, -13, 14, 70, -57, -1, 94, 74, -2, -48, 23, 25, -8, -36, 21, -25, 30, 5, 81, 59, -106, 66, -46, 28, 66, -1, -11, -57, -15, 41, 66, -58, 23, -27, -45, 83, -51, -68, 26, 76, -48, 31, -51, -8, -73, 10, -38, 20, 53, 55, 14, -51, 55, 36, -81, -68, 84, -70, -13, -41, 33, -2, -19, 82, 
  -43, -24, -7, 0, -12, 3, -62, 14, -40, -58, 2, 78, 33, -59, -51, -20, 30, -9, 27, -70, 24, 27, 1, 2, -53, 24, -49, -88, -12, 46, -55, 56, 14, -44, 0, -67, 9, 13, 37, 22, -63, 68, -48, 35, -57, -19, -1, 11, 71, 64, -21, 34, 52, -35, -56, -34, 14, 39, 20, -6, 1, -34, 8, 49, 24, 50, 14, 73, -59, -13, -36, 45, 77, 45, 18, -58, 10, 45, 38, 22, 59, 28, 42, 66, -53, -64, -10, -55, 65, -22, 55, -15, -62, 28, -65, 1, -51, -39, -78, -33, -38, -5, 
  34, 33, 5, -52, 24, -7, 56, -44, -24, -16, -78, -51, -16, -8, 46, 0, 73, -49, -3, -25, -9, 3, 54, -71, -31, 73, 33, -38, 18, -83, 38, 78, -9, 57, -70, 50, 3, 63, -5, -24, 22, -57, -22, 38, -28, -66, 40, -80, -49, 64, 55, -21, -44, 49, 11, 1, 33, -64, 37, 24, -1, 29, -25, 8, 4, -19, 49, 68, 50, -39, 6, 63, 55, -30, -52, 23, -59, 11, 75, -83, -57, 57, -39, 59, 71, 12, -8, 36, -44, -41, -37, 7, -12, -53, 79, 31, 15, -6, -22, 48, 66, -19, 
  -33, -29, 36, 31, 28, 0, -73, -52, -20, -78, -7, 53, -68, 60, 41, 33, -48, 68, 29, 56, -11, -35, -10, -22, -28, -50, -62, -4, -28, -41, -56, 51, -75, 2, -63, 59, -63, -8, -48, 47, -34, 5, -30, -63, 50, -42, -33, -21, 63, -53, -55, -28, -22, -69, -62, -12, -78, 6, -28, 8, -3, 0, 24, 71, 59, -10, -20, 14, 30, 41, -69, 35, -16, -73, 24, -37, 65, 41, 41, -72, -77, -41, -26, -35, -13, -65, -2, 33, 15, -74, 11, -47, 67, -61, -71, -29, 25, -27, -12, 69, 6, 41, 
  50, 55, 39, 37, 7, 76, 40, -57, -100, 10, 58, -3, 8, -12, 43, -54, -27, 39, -86, -60, 25, 27, 49, -33, -24, -70, 34, -8, -8, -39, 37, 85, -48, -40, -20, 24, 73, 59, 79, -47, 29, 5, -35, 48, -1, -51, 14, -35, 0, 52, -33, 24, -56, 1, -24, -37, -10, 5, 30, -20, -4, 15, 10, 39, 10, -59, -60, 16, -35, -21, -12, 14, 27, -11, -27, -53, -14, 42, 109, -21, 53, 17, 80, -7, 96, 10, 25, -39, 26, -56, -57, 2, 89, -19, 15, -11, -43, 35, -74, -56, 94, 26, 
  -59, 16, -18, -17, -1, 20, -77, -9, 59, 36, 4, 20, -7, 28, -37, -28, 41, -91, -52, -38, 32, 15, 0, -4, -54, 8, -67, -87, -53, -16, 44, -48, 52, -37, 65, -33, -6, -7, 42, -5, 71, 1, 32, -61, 27, -13, -44, -23, -21, -19, -65, 20, -29, -3, -26, 79, 67, -40, 33, 31, 52, -46, 48, -5, -45, 60, -11, -38, -42, -50, -67, 69, 28, 24, -9, -65, 12, -6, 50, 25, -48, 64, 8, 63, -40, 9, 73, -55, -28, 7, 27, 36, 44, -66, 37, -92, -3, 1, -3, -9, 27, -12, 
  14, 34, 37, -32, -7, 43, 61, 69, 60, -28, -27, 52, -55, -53, -8, -37, 83, -2, 46, 79, -35, 6, -13, -2, -47, 43, -85, 63, -9, -65, 69, -80, 59, -28, -74, -59, 39, 17, -3, -74, 13, -8, 19, 43, 47, -42, 47, 71, 9, -45, 58, 48, 21, -13, -40, 0, -77, 57, 31, 30, 30, 15, 31, -28, -67, 67, -61, -46, -64, 5, 44, 37, 68, -72, -19, 21, 65, -78, -35, 3, -63, -25, -86, 39, 0, -45, -37, -5, -46, -66, 28, -57, 79, -8, 41, -37, 58, 13, 52, -9, -20, 39, 
  1, -59, 0, -38, 51, 24, 56, 41, 25, -58, 43, 39, 81, -65, -41, -60, 37, -26, -67, 33, 20, -9, 29, 46, 15, 8, -30, 29, 32, 50, 57, 77, -80, -23, 79, 20, -37, -19, -29, -61, -11, -54, 66, -47, 1, -13, 70, -1, -35, 10, -57, 57, -56, -70, -3, -48, -42, 44, 33, -13, -55, -26, 48, 23, 53, 43, 85, 7, 11, 51, 74, 32, 9, -52, -74, 61, -45, 6, 34, 46, -27, 50, -9, -44, -35, -5, 10, 5, -63, 1, 37, -51, -28, -37, 31, 49, -22, -44, 63, 68, -25, 2, 
  -7, -61, 48, -77, 16, 38, 84, 53, 1, -69, 39, -24, -8, 37, -74, -19, 52, -54, 9, 33, -62, -62, -28, 18, 16, -14, -4, 110, -6, 58, -43, 17, 22, -58, 23, 57, -53, -43, -86, 62, 31, 7, 1, -36, 58, 34, 39, -9, -72, 46, -10, 44, 27, -27, 42, -46, 45, -31, 64, -50, -81, 68, 39, -21, 63, -60, -7, 46, 24, -38, 14, -66, -18, 4, 51, 13, 38, 7, -17, 42, 18, -45, -26, 58, -60, -28, -17, 38, -40, -20, 82, 70, -33, -66, -3, 46, 13, -9, 14, 32, 2, -48, 
  -65, -35, -2, -65, 61, -36, -35, 36, -10, -29, -68, 25, -76, -37, -49, -60, -10, -9, 66, -27, 54, 29, 17, 35, 16, 26, 56, -8, 71, 26, -38, -76, 22, -46, -19, -44, -40, 16, -81, -56, 39, 32, 13, 33, -26, -5, 73, 50, -61, 26, -35, -21, 31, -65, -8, 22, -72, 24, -2, 18, 59, 58, -4, -41, -25, -74, 44, 49, 47, 30, 18, 6, 34, 24, -63, -42, 68, -32, -82, -21, -9, -50, 51, 65, -16, -32, -53, -1, 63, -8, 39, 43, 65, -14, 67, 25, 8, -50, 21, 73, -39, 64, 
  23, -70, 43, -4, -29, -81, 7, 35, 37, 11, -23, 50, -24, -14, 124, 63, 49, -1, -50, -86, -40, 26, 19, -39, -92, 3, 23, -69, -58, 36, -60, -14, -74, -63, 44, 69, 47, -11, 26, 11, -77, -65, 0, -3, 22, 0, 16, 16, -46, -12, -21, -65, -13, -44, -89, 62, 1, -10, -32, -17, 58, 17, 37, 72, -22, -70, -26, -1, 32, 12, -34, -44, 25, 42, -3, -96, -53, 2, 30, -27, -38, 17, 44, 15, -50, 31, 27, 60, -64, -55, 34, 40, -106, -47, 93, -55, 11, 16, 21, 82, -49, -2, 
  83, -56, 65, -25, -70, -14, 42, 39, 74, 39, -65, -90, -10, 28, -69, -20, -58, 37, 53, 60, 38, -38, 63, -54, 11, 27, -40, 49, 94, 89, -15, -40, -54, 56, 40, -67, -3, 53, -19, -34, 50, 0, 45, -35, -40, 14, -88, 37, -38, 16, -44, 58, -9, 79, 51, 47, 3, -56, -10, -43, 23, -32, 29, -95, 37, -67, 3, -7, -37, -67, -62, -52, 77, -3, -66, -69, -41, -4, -71, -51, 18, 54, -54, -73, -45, 47, 55, 7, -19, 49, 12, -34, 8, -38, -75, -17, -48, 42, 58, -1, -47, 6, 
  -73, -69, -64, 47, 4, 18, 38, -32, -14, -18, -16, 41, -62, -70, -14, 28, -65, 33, -1, -12, 52, -9, 56, 24, 41, -84, -38, 60, -52, -59, 32, -56, 10, -15, -14, 38, 39, -21, -44, 35, 44, -53, -9, -52, -13, -42, -76, -16, -34, 43, 62, -79, 54, -64, 6, -70, -21, 54, -14, 17, -28, 51, -50, 21, -75, 83, 16, 54, 5, -80, -67, -17, 12, 41, -5, 84, -19, -32, -23, -4, 56, -48, 38, 17, -36, 36, 58, -6, -44, -65, 67, 51, -14, 46, -3, 19, 17, 21, -46, 37, 60, -29, 
  4, 49, -35, 83, 68, -31, -28, 12, 8, 79, 78, 85, 89, 59, 74, -31, 33, 44, 2, -78, -19, 81, 4, -75, -52, 2, -2, -64, -77, 39, -52, -38, -54, 13, 49, 32, -12, -21, 96, 11, -39, -77, 89, -40, -40, 81, -22, 2, 25, -34, -68, 2, -1, -18, 68, 55, -65, -33, -44, 27, 7, -13, -59, -12, 65, -2, 119, -25, 38, 12, 22, 23, -90, -70, 85, -64, -14, -49, 77, -6, -44, 25, -18, 96, -30, -19, -2, 29, 2, -42, -19, 4, -41, -27, 21, 12, 65, 24, 27, 23, -26, -12, 
  -76, 25, 17, -56, -10, 17, 39, 26, 17, 40, -52, -10, -20, 36, -27, 48, 5, -38, -46, -24, -46, -87, 57, 52, 30, -3, -40, 103, -61, 22, 58, 43, 2, -2, -11, -34, 61, 41, 30, 15, 2, 42, -34, 28, 66, -1, -76, 70, 30, 10, 17, 46, -54, -53, 55, -4, 39, -64, -57, -69, 36, 3, -57, -24, 2, -5, -35, 6, 24, -37, 15, 34, 39, 82, 39, -19, -34, 16, -98, -31, 37, 16, -36, -44, 44, -22, 70, 68, 40, -61, -28, -26, -58, -68, 14, -7, 17, 36, -43, -43, -92, 49, 
  -17, 9, 10, 35, -28, 31, 43, 49, 97, 29, -66, 14, 49, -79, -57, -19, 83, 11, 81, 46, 82, 31, 63, -9, -33, -52, 5, -15, -25, -85, -36, 61, -42, 18, 34, -64, 76, -67, -46, -33, 16, -56, 89, -14, 4, 71, -31, -48, -22, 47, -46, -56, 66, 67, -16, 26, -47, 9, 95, 57, -1, -24, -43, -24, -36, 59, 7, 9, 46, 45, 80, 75, 20, 13, -21, 57, -25, 3, -5, -16, -51, 16, -14, 53, -33, -26, 57, 23, 69, 46, -44, -20, -63, -9, 30, 44, 43, 39, -38, -46, 17, -49, 
  7, 84, 17, -36, -32, -69, -39, 14, -81, -56, -22, 39, -16, -11, 56, -55, -46, -15, 50, -70, 41, -33, -34, 44, 11, 5, 50, -9, 57, -60, -41, 29, -12, 31, 26, 70, -24, -47, -28, 25, -53, -65, 66, -3, 65, 39, 50, 16, -70, 12, -51, -70, 5, 10, 54, -28, 70, -64, 35, 42, 12, 44, -47, 21, 77, 61, 46, 89, 71, -62, -20, -36, 48, 64, 18, 26, 50, -9, 1, 41, -33, 54, -71, -50, 37, -51, -67, -54, -58, -3, 81, -49, -17, 61, 88, -29, 51, 9, 58, -25, -41, 102, 
  74, -14, -53, -89, 22, -37, -13, 5, -30, -65, 14, 41, -40, 54, -63, 21, 119, -29, -52, -87, 56, 37, -68, 56, 22, -81, 38, -30, 54, 55, 44, 36, -26, -55, 7, -29, -7, -38, 21, -23, 43, -6, -32, 4, -5, 96, 44, -64, 45, -99, -17, -53, -9, 31, 71, 12, -39, 56, -36, -55, 28, -4, -41, 47, 43, 103, 44, -58, 41, -18, 52, 47, -73, -22, 19, 16, 14, -38, -77, -76, -65, 4, -93, 4, 14, 68, 7, 2, -9, 3, 61, -29, -63, 28, -36, 45, -5, 91, -16, 23, 3, 24, 
  43, 70, -16, 25, -44, -60, 4, -87, 14, -10, 11, -64, -1, 50, -16, -73, -3, -53, 41, -4, 30, -67, -46, 23, 36, -17, 25, -22, 41, 37, 43, 17, -72, 7, 78, 31, 10, 69, -62, 10, -55, 9, 36, -12, -26, -12, -7, 78, 22, -61, -44, -62, 42, 63, 9, -63, -53, -69, 6, 23, -51, -37, 76, -31, -20, 19, 31, 49, 30, 28, -33, 37, 64, -57, -38, 46, 27, 40, 10, 16, 30, -32, 49, 32, -37, -7, -17, -1, -33, 51, 40, 6, -15, 63, 25, -25, 41, -64, 36, 45, 37, -42, 
  8, 15, 44, 8, 27, -25, 14, 2, 27, -98, 67, 47, -10, -47, 13, 34, -41, -26, -42, 3, -21, 52, 41, -82, -8, 22, 80, -50, -40, -64, 73, 30, -75, 33, 8, -48, -34, 54, 2, 18, -65, 9, -39, 2, 46, 6, -50, 81, 32, 31, -29, 63, -1, -26, -88, -36, 60, 25, -24, -16, -62, 31, -17, 59, -42, 34, -1, 23, -52, 31, 55, -31, -33, -31, -13, 47, -59, 59, -6, 78, -52, -54, 45, 64, -32, 1, 19, 54, 10, -4, 54, 44, 45, -30, -40, 67, -66, 35, 52, -70, -62, -43, 
  -50, -40, 37, -28, 48, -2, -2, -78, -71, -18, -51, 53, -41, -2, 37, 9, 2, 91, -44, 72, -87, 41, 32, 61, 33, -7, 54, 0, 64, 35, 68, 2, 5, 9, -33, -38, -1, 3, 59, -32, 13, 47, 51, -4, -46, -38, -68, -16, -3, -13, 21, 56, 85, -36, -26, 53, 80, -46, -64, -5, -9, -40, 73, 9, 45, -61, 49, 40, -47, 26, -46, 22, 10, 61, 1, 100, -46, -55, -1, -72, -60, -55, -42, -14, 24, -30, 16, -28, -14, -3, 54, 29, -10, -42, 47, -32, -17, -10, 80, 46, -1, 69, 
  51, 42, -32, 87, -24, -7, -21, -91, 16, 52, 31, -10, -9, -8, -76, -52, 17, 21, -16, 94, 56, -16, 0, 70, 100, 5, 29, -30, 76, -33, -36, 24, -62, -48, -61, -51, 64, -7, -18, -63, 90, 47, -18, 4, -22, 27, 69, 96, 64, 63, -42, 52, 7, 41, -42, -1, 26, 31, -41, 45, 90, -71, -5, -37, 69, 44, -55, 40, 8, 24, 0, 60, 49, -47, 34, 51, -33, 51, 15, -64, -8, -28, -43, 7, -66, -67, -56, 16, 15, -37, 11, 57, -16, -70, 62, -25, 13, 48, -47, -39, -18, -19, 
  90, 28, 19, 62, 35, 40, 5, -33, -1, 29, -32, 0, 41, -49, 64, 33, -21, -84, -17, 43, -58, -84, -32, -10, -40, -39, -29, -68, -69, -22, -38, 55, 51, 51, -59, 45, -9, 33, -37, -39, -46, 13, -7, -45, -55, -46, -55, -8, 46, -71, -50, -69, -40, -66, 0, -27, -8, -33, 73, -60, 36, -60, 65, 42, -1, -79, -15, -38, 33, -39, 26, 51, -15, 39, -4, 39, 74, -42, -55, -73, -9, -18, 47, -53, 42, 40, -78, 25, 17, 16, -58, 50, -39, -39, -7, -54, -38, 26, 50, 15, 55, -19, 
  39, -37, -66, 3, 51, -29, 35, 80, 59, -63, -72, -69, -27, -58, -31, -27, 58, 14, -40, 36, -11, 65, 18, 16, 14, 42, 28, 51, -54, -52, 2, 55, 53, 53, 55, -75, -39, 29, 10, 51, 29, -16, 48, 0, -16, -8, 50, 30, -50, 1, 13, -17, 66, -62, -65, 12, -15, 52, 82, 20, -69, -19, -45, 61, -64, -6, 16, -18, -25, 63, -5, -78, 41, -76, 47, -11, 56, 15, -17, -19, -16, 77, -78, -9, 36, -52, 92, -31, -3, -48, -59, -19, 38, 52, 54, 75, 11, -31, -58, -24, 85, -31, 
  -6, 37, 31, -65, 1, -66, -30, -70, 36, 53, -13, 19, 27, 47, 39, -21, 15, -29, -73, -30, 10, -46, 30, -59, -80, -52, -80, 37, -57, 3, -74, -3, 12, 50, 13, 4, 27, 46, -60, 46, -24, -19, -75, -4, -32, 27, 22, -20, -4, 5, -25, -45, 55, -52, 60, -29, -20, 13, 37, 30, 20, 23, 4, 25, -12, 63, -47, -51, 1, 66, 10, -54, 41, 4, -42, 40, 54, -67, -22, 39, -20, -58, -51, -40, -30, 60, 21, 52, -55, -77, -14, 33, -25, -25, -17, 27, -49, -82, 39, 26, 32, -3, 
  79, -51, -25, -7, 2, 28, -51, -18, -69, 66, 78, 12, -41, -23, -35, 8, -15, -60, 26, 28, -36, 61, 7, -5, 74, -5, 9, -51, 34, -46, -31, -88, 0, -19, 34, -78, -10, -35, -48, -43, 16, 2, -63, 57, -9, -9, -74, 16, -46, 37, 12, 26, -36, -9, 30, 51, 44, 57, 8, 35, 80, -56, -22, -12, -38, -78, -15, 28, 29, -52, 17, 76, 18, 3, 44, -61, -73, -6, 10, -25, 46, 51, -49, 19, 1, -37, -42, 17, -45, 91, 26, -32, -2, 49, -38, -110, -42, -48, 3, 7, 7, 67, 
  59, -8, -19, -80, -38, -51, -1, -30, 62, -2, 81, -27, 37, 22, -56, 49, -42, 28, -45, 37, 68, 93, 22, -13, -53, 40, -43, -79, -24, -61, 9, 52, -1, 45, -55, 27, 17, -21, 7, 3, -37, 48, -23, 91, -32, 40, -59, -11, -21, 3, 20, -39, -5, 65, 50, -8, 51, -34, 70, -19, -22, 18, 41, 48, 54, 88, -10, 74, 44, 63, 3, -76, -9, -61, 68, -89, -32, -32, 18, 65, -23, -39, -50, -13, 0, -44, 53, 56, -51, -53, -26, 6, 126, 52, -64, 3, 70, -59, -85, 21, -14, -54, 
  45, -32, -64, -39, 44, -26, 35, 43, -43, 52, -54, 68, -35, -52, 7, 21, -33, 31, 29, 9, 44, -73, 63, 27, 4, -5, 71, 48, -44, -12, -47, 30, 39, -23, -57, 19, -55, -42, 38, -7, -23, -62, -40, -70, -27, 23, -31, -66, 3, 68, 33, -20, -49, -19, -65, -41, -61, -7, -69, 4, -77, -12, -14, -26, 58, -71, 26, -33, -62, -58, -38, 2, -31, 37, -61, 34, -23, -14, 34, 2, 6, 32, -52, 63, -1, -3, -22, -76, 49, 9, -38, 52, -16, 36, 6, -43, -33, 61, 16, 12, -28, -68, 
  -6, 56, -15, 33, 47, 56, 41, 46, 68, -53, -16, 5, 34, -55, 35, -66, 50, 12, 13, 25, 31, -63, -54, -70, -11, 60, -18, -32, 39, -55, 7, 14, 51, 30, -29, 25, -38, -6, -73, 4, 16, 32, -26, -56, 25, -72, -22, 7, -39, 46, 16, 6, -54, 22, 3, -82, -6, -3, 67, 56, 38, 20, -60, -5, -17, 86, -69, 16, -89, -23, 45, -60, -92, 28, -5, -66, 26, 37, -45, -15, 31, 14, 13, -15, -58, 2, 45, -37, 31, 7, -36, -23, 7, 5, 32, -46, 1, 25, -14, -3, -80, 31, 
  38, 11, 62, -31, 40, -20, 37, -102, -3, 10, -47, -96, 28, 48, 14, -87, -41, -1, 25, -63, -50, -39, 42, -57, -33, 59, 13, -22, 2, 13, 11, 40, -9, 44, 22, 88, -60, -18, -11, 10, 19, 10, -16, 52, 32, 15, -70, -7, -76, 17, -26, 44, 37, -21, -12, 3, -18, -66, 51, -72, -24, 29, -10, -75, 37, -25, -49, 26, 5, -53, -76, -64, -17, 83, 43, 53, 33, -39, 39, -37, -27, 32, -13, -79, -17, 12, 15, 82, 23, 13, 1, -23, -51, -43, 67, 54, 60, 30, 49, 7, 30, -4, 
  -36, 2, -10, 45, -29, 51, -29, -62, -62, -64, 62, 86, -34, -25, -10, -4, -5, -15, -27, -70, 30, -14, 41, -53, 22, 60, 45, -33, -86, -6, 9, -44, -91, 28, 35, 61, 34, -42, 63, -59, -33, 4, -34, 86, -11, -60, -37, 43, 28, 21, 18, 78, 2, 18, -18, 78, -58, 68, -58, 30, -21, 10, -59, -11, 49, -89, -55, -8, 32, -54, 33, 35, -72, 55, -36, 27, -55, 69, 5, -20, 33, 52, 103, -47, -35, -11, 31, 32, 89, -34, -6, 19, 7, 74, 63, 14, -48, 21, -15, 34, 24, 39, 
  28, -32, 93, 52, -63, 55, 35, -2, 45, 60, -45, 3, 7, -17, -65, 68, 49, -2, -56, 38, -47, -3, -54, 67, 12, -3, -98, -27, 61, -43, 9, 20, 0, 36, -36, -26, -12, -55, -48, -9, -33, 53, -25, 46, -16, 58, 5, -38, -75, 59, 38, 26, -69, 28, 95, -21, -60, 21, -92, -62, 43, 15, -40, -51, 3, -54, -66, 22, 18, 29, 51, -76, 6, -19, 51, -50, 20, 68, 49, 21, 12, 29, -39, -55, -26, 29, -27, 34, 53, 12, -86, 15, -24, -73, -68, 41, -23, 37, -29, 16, 0, -17, 
  59, 13, 2, -52, 0, 13, -19, 51, 75, -75, -60, -40, 72, 32, -27, 58, -32, -54, 67, 54, 44, -28, 20, -31, 26, -48, -45, 6, -27, -49, -74, -69, -30, 32, 74, 27, -33, -32, -66, 42, -3, -56, -14, -29, 49, -44, -17, -63, 30, -25, 21, 43, 36, -43, 38, 16, -1, 67, -58, -21, -87, 16, -64, 43, 26, -49, -72, 6, -36, -2, 29, -3, -22, 9, 39, 58, 63, 63, -13, 1, -65, -5, -13, 46, -84, 9, 55, 35, -51, 67, 42, -9, -43, 74, -50, -12, -35, -65, -45, 37, 32, -55, 
  -41, -67, -56, 61, 40, 31, 11, -14, 15, -45, 48, 65, 14, -60, -41, 56, 29, -13, -61, 27, 1, 33, 43, -65, 44, 37, 9, -66, 15, -48, -22, 62, -8, -77, 41, 98, 75, 5, -46, -59, -30, 13, 36, 68, -39, -54, 12, -49, 21, -20, -50, -19, -24, 65, 17, 57, -44, 16, -9, 9, 60, -34, 45, 85, 70, 20, -17, 55, -14, 20, 31, 2, -62, -24, -76, 14, 47, 95, 118, 7, -25, -56, 65, 79, 25, -41, -81, 51, -53, -49, 52, -19, 65, 89, 3, 101, 3, -18, -7, -13, -3, 32, 
  28, 32, 33, 53, -28, 24, 21, 28, -15, 10, -10, -33, 32, 65, 67, -72, -2, 87, -42, 2, 12, -1, 21, -52, 38, 47, 15, -9, 22, -35, -11, 28, -11, -36, -4, 72, 74, 52, -35, 50, -94, 44, 88, -11, -61, -80, -17, 31, -25, 30, 56, -80, 49, 48, 54, -24, 18, -34, -47, -8, 3, 45, 75, 3, 25, -103, 24, 19, 51, 33, 21, -77, 42, 13, -8, -58, -69, -48, 95, 18, 31, 28, 93, -29, -40, -37, -58, -44, 37, -50, -72, -17, -51, 13, 73, 56, 56, 72, -24, -51, 97, 6, 
  -17, -79, -8, -28, 48, 55, 7, 42, 16, 38, 91, -5, 12, -19, 67, -38, -81, -10, -60, -22, 12, 9, 40, -5, -4, 70, 61, 22, -19, -48, -53, -28, -39, 3, 19, 14, -14, -33, 27, 70, 31, -41, 44, 63, -29, -7, 49, -12, -40, -78, -71, 34, -8, -24, -93, 22, -39, 51, -32, 59, 27, 11, 6, -38, 25, 31, 77, -44, -14, 61, -15, 4, 19, 26, 25, 31, -9, -22, 42, 1, -71, -36, 86, 33, 68, -33, 44, -11, -27, -9, -21, -31, 0, 19, -28, -13, -63, -69, 15, -30, -7, 90, 
  11, -43, 16, -12, -4, -12, 27, 50, -22, -45, -48, -24, 8, 24, 38, 37, -66, -83, -11, 55, 12, 41, -52, -60, -28, 51, 59, 13, -70, 44, -51, 24, -69, 40, 25, -33, -24, 56, 70, -51, -33, 11, 77, -10, 28, -35, -8, -23, -68, 6, 42, 38, 49, 25, -64, 61, 72, -21, -21, 52, 53, 8, 21, -53, 58, -68, 2, -55, -76, -84, -59, -2, 48, 13, -34, -66, -60, -31, 44, 3, -76, -62, 40, -6, 56, -23, -61, -17, 42, 54, 66, 9, 21, 59, 12, -51, 57, -18, -68, 71, 8, 18, 
  -8, -4, -60, -62, -25, -73, -73, 64, -5, 15, 49, 70, 7, -67, 4, -72, -58, -62, -60, 19, -49, -13, -28, -17, 5, -24, -28, 39, -69, -46, 40, 29, -7, -53, -64, -41, 23, -31, -73, -26, -65, -26, 57, 51, 4, -60, -72, 39, 1, -51, -2, 73, -28, -32, 6, 42, 7, 0, -32, 75, 74, -12, -14, -5, -54, -54, 32, 43, -74, 63, -58, -23, 51, -7, -63, -68, -60, -64, 71, 59, -2, -6, -55, -41, -72, 29, -51, 4, 59, 55, -72, -16, 69, -67, -29, 68, 0, -2, 49, -22, -67, 41, 
  -32, -44, 56, 22, -49, -81, 49, 12, -62, 37, -64, -45, -69, 64, -19, 1, -35, 25, 71, -8, -37, 6, -4, -53, 59, -13, 22, -32, -22, 61, -5, 15, -44, 4, 50, -57, 56, 30, -51, 51, 3, -22, 19, 62, 69, 10, 72, 6, 2, -92, 49, 59, -15, -40, -74, 20, -17, -54, -57, 32, 25, 7, -50, 42, -40, 49, -63, 14, -60, 39, -73, -13, -43, -70, 51, -85, -31, -34, 47, -75, -13, 69, 15, 6, -12, 4, -28, 2, -58, 70, 9, -3, 24, -4, 36, -52, 29, 24, 75, -19, 14, -10, 
  -32, 6, 66, -6, -61, 75, -2, -55, -5, -12, -67, -38, 47, -20, 10, 31, -52, -46, -36, -37, -58, -1, -4, -68, -3, 29, -38, -34, 54, -27, 12, 41, 20, 47, 63, -60, 25, -44, 49, -81, 31, 43, 48, -19, -36, 61, -52, 94, -13, -78, 18, -18, -17, -55, 40, -80, -31, 20, 71, -22, -11, -2, 40, 29, 48, -18, -40, -78, -5, 67, -55, 7, -53, 61, -29, -40, -65, -24, 12, -16, 26, 47, -95, -53, 50, -79, 67, 59, 46, -32, 49, 35, -29, -10, 52, -63, -26, -74, 30, 77, -82, 73, 
  -88, -4, -24, 49, -72, 34, 95, -29, -32, 53, 13, 54, -48, -66, 27, -48, 52, -77, 16, 36, 72, 58, 37, -55, -102, -65, 40, -38, -11, -55, -27, 42, 20, -30, -42, 62, 24, -47, 37, -27, 83, 32, -88, -48, 51, -27, 56, 39, -64, -25, 22, -2, 62, 50, -37, 1, 35, 52, 0, -67, -56, 6, 60, -60, -21, 53, -47, 3, 66, 43, 23, -6, 37, 36, -30, 88, 6, 44, 51, 36, 43, -50, -51, 73, -75, -1, 56, -59, 49, -34, 34, 9, -43, 51, -50, -3, 51, -23, -4, 46, -45, -6, 
  21, -49, -31, -79, 50, 33, -83, -39, -24, 30, 21, 27, 34, -42, -58, 52, 28, 70, 18, 64, -68, 30, 22, 18, 10, -39, -43, 36, 4, -4, 29, -44, -58, -22, -45, 11, 1, 11, -2, 24, -21, -69, 49, 24, -2, 9, 29, 25, 68, 19, -38, -20, -1, -44, 41, 39, -84, 49, 37, 33, -1, -5, 44, 9, -9, -96, -37, 44, 33, -18, 33, 33, 4, 30, -63, 25, -10, -70, 1, 21, 9, -65, 74, -25, -3, 6, -1, 48, 28, 0, 9, -22, -55, -48, 30, -20, 13, -39, -66, 18, 62, -76, 
  -19, 63, -15, -4, 54, -71, 1, -1, -34, -20, 23, -88, 35, 11, 43, -68, 82, -52, 53, -38, 64, -74, 25, 64, -69, -13, 24, -2, 68, 5, 32, -47, -28, 0, -11, 40, -49, 28, -4, -2, 47, 51, 4, 0, -52, 43, -7, -73, -17, -6, 11, -41, -2, -72, -68, 24, -80, 55, -8, 51, 26, -83, -26, 5, -76, 1, 21, -25, 70, -3, -26, -21, -38, 21, -66, 39, 48, -50, 3, 43, -35, 47, 47, 52, -16, 52, 61, 53, -72, 21, -40, -78, -17, -49, -46, -67, 42, -50, -37, 16, -50, 59, 
  -55, -46, 26, 76, 63, 57, -22, -69, 63, -28, 58, 30, -70, -43, -29, 32, 27, -81, 50, 13, 3, -30, -31, -47, -64, -74, -47, 22, -5, -25, -14, 20, -28, -50, 1, -18, -51, 16, 66, 39, -12, -65, 54, -32, -18, 30, -80, 31, -18, -12, 35, 13, -7, -50, 127, 28, -72, 20, -40, -6, 37, 30, 81, 44, -25, 100, -2, 5, 33, 0, -22, 76, 16, 38, -53, 19, -18, 41, 13, 28, 25, 62, 22, -41, -1, -47, 13, -76, -86, -30, 24, -35, -75, 3, -28, -1, 29, 103, -23, -2, 43, 41, 
  -5, 41, 3, 57, 11, -37, 54, 44, -23, 55, -50, -49, 28, -13, 99, -45, -13, -99, 24, -5, -32, -2, -69, 44, -35, 33, 57, -94, -81, -93, -81, 78, -43, -54, 47, 38, -17, -50, 42, -54, -45, 34, -8, -51, 16, 36, 93, 39, 82, 56, 15, -24, -51, 25, 27, -33, -40, -87, -80, 36, 62, 30, 24, 7, 46, 36, 59, 26, 13, 30, -59, 50, -67, 3, -26, -14, -5, 15, 53, -27, 24, -38, -25, 25, 43, 60, -3, -30, -103, 0, 21, 0, 6, 22, 67, -20, -57, -1, 61, 30, -59, 66, 
  4, -71, -32, 12, 22, -18, 22, 22, -12, -23, -2, -59, -78, -33, -34, -3, -105, -44, -50, -31, 33, 19, 3, 23, 52, -11, -35, 48, 26, 35, 58, -20, 5, -47, 25, 18, 48, 30, -11, 39, 38, -26, 13, 2, -55, 48, -9, -5, 47, -13, 42, -44, -22, 28, -36, 20, 70, -48, -64, 29, 39, -56, -44, -17, 27, -31, 33, -73, 38, -70, 50, -44, 8, 43, -59, 25, -71, 17, 67, -54, 19, -44, -56, 16, -4, -1, -61, 66, 11, 47, 68, 14, 22, 40, 63, -8, 63, -37, -31, 21, -53, -52, 
  -5, -62, -72, -95, 0, 9, -11, -4, 63, 37, -6, 58, 58, 7, -75, -12, -37, 88, -41, -59, 44, 54, -3, 59, -12, 25, 10, 6, 48, 49, 63, 21, 23, 32, 3, -42, -3, -26, -8, -7, 75, 18, -7, 66, -49, 59, 0, -10, 7, -38, -22, -26, 9, 3, 35, -6, -57, 32, 47, -54, -24, -27, -51, 54, -68, 69, 30, 88, 16, -38, 29, -96, -55, -16, 80, 37, 47, -60, -71, 72, 44, 86, 25, 48, 29, -50, 68, -6, -60, 39, -6, -39, -4, 2, 43, 49, -59, -79, -34, 23, 21, -9, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 64,102 } };
const TfArray<1, float> quant6_scale = { 1, { 0.002534280763939023, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[102] = { -7756, -924, 23295, 20919, 14516, 9992, 18175, -5182, 19805, -8309, 7851, -1431, -1690, 7692, 6170, 13787, -7160, 9746, 8656, 24881, 11521, 10883, -1339, 11132, -11448, 11320, 9944, 15879, 25970, 6780, 14783, -5136, 15725, 33226, 21683, -6096, 18551, 4183, 3443, 2001, 17944, 4064, -3951, 12143, -425, -17188, 12796, 19662, 4568, 35610, 11238, 1665, 15293, -25755, 14914, -3742, 9888, 15621, 6046, 11356, 3484, 10827, 26772, 19112, 12866, 6321, 294, 7215, 14621, -8834, 20191, -1883, 13658, -13559, -9951, 25104, 20614, 22646, 24286, 22026, 7092, -13650, -3651, -1002, 6517, 28140, 15567, 700, 42091, -6726, -9955, 12734, -1537, 16857, 19024, 12489, -14276, 12442, 3785, 4027, 15830, 15239, };
const TfArray<1, int> tensor_dimension7 = { 1, { 102 } };
const TfArray<102, float> quant7_scale = { 102, { 0.00025007649674080312, 0.0001930535800056532, 0.00022477707534562796, 0.0002033647324424237, 0.00029421973158605397, 0.0002176290872739628, 0.00025489754625596106, 0.00017793415463529527, 0.00017733676941134036, 0.00019247464661020786, 0.00024607617524452507, 0.00029585172887891531, 0.00022912608983460814, 0.00025630620075389743, 0.00020887967548333108, 0.00023121453705243766, 0.00019634970522020012, 0.00028763647424057126, 0.0002271348494105041, 0.00017864431720227003, 0.00019492584397085011, 0.00024976592976599932, 0.00024156650761142373, 0.00033552778768353164, 0.00020701128232758492, 0.00018670667486730963, 0.00027474042144604027, 0.00026543257990851998, 0.0002074867079500109, 0.00019565921684261411, 0.00023150736524257809, 0.00028994205058552325, 0.00029681227169930935, 0.00025384305627085268, 0.00030008589965291321, 0.0002061590930679813, 0.00025056590675376356, 0.00018793165509123355, 0.00020808640692848712, 0.00021669361740350723, 0.00023252669780049473, 0.00019212139886803925, 0.00026202484150417149, 0.00024460037820972502, 0.00016663390852045268, 0.00019967257685493678, 0.00020088609016966075, 0.00026966538280248642, 0.00025771887158043683, 0.00032330513931810856, 0.00024212704738602042, 0.00031085635419003665, 0.00022964458912611008, 0.00017355169984512031, 0.00034339426201768219, 0.00025228515733033419, 0.00036833222839049995, 0.00020646878692787141, 0.00032230629585683346, 0.0002323601656826213, 0.00021755303896497935, 0.00029581814305856824, 0.00019770559447351843, 0.00020221047452650964, 0.0002656176220625639, 0.00022429796808864921, 0.00022010720567777753, 0.00025754162925295532, 0.00024966069031506777, 0.00016901467461138964, 0.00026546881417743862, 0.00021635736629832536, 0.00031271274201571941, 0.00017955055227503181, 0.0002401776728220284, 0.00019738341507036239, 0.00022987004194874316, 0.00018961478781420738, 0.0002750003186520189, 0.00027085468173027039, 0.00027925774338655174, 0.00017662058235146105, 0.00027265676180832088, 0.0002697126183193177, 0.0002919012913480401, 0.0002102602447848767, 0.00022118602646514773, 0.00024023147125262767, 0.00021270230354275554, 0.00021994335111230612, 0.0002502875286154449, 0.0002566313196439296, 0.00027759515796788037, 0.00026184885064139962, 0.00028382093296386302, 0.00036164894117973745, 0.00024088296049740165, 0.00025789628853090107, 0.00029407464899122715, 0.00027223277720622718, 0.00021127332001924515, 0.00025750690838322043, } };
const TfArray<102, int> quant7_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[102*1*1*102] = { 
  /* [0][0][][] */ 3,-10,1,27,22,-3,6,52,53,23,10,29,127,77,5,58,41,-22,-6,33,4,57,26,-26,45,12,13,-7,62,-28,-16,-14,7,-59,-63,-17,5,-41,-39,15,-14,-25,22,-15,58,-8,18,-25,4,-27,-68,-6,29,18,-19,19,-34,74,22,-4,26,24,-3,14,33,-35,-36,-17,12,-38,-10,-24,-1,-44,49,-50,-39,10,-60,-8,-57,7,18,-16,23,3,15,-36,22,85,20,31,-56,-30,4,43,-19,-1,-11,48,21,-47, 
  /* [1][0][][] */ 56,-92,35,-31,36,4,-69,16,-81,-24,28,-39,-39,117,-86,50,21,3,0,-25,42,-1,56,-11,60,-8,25,79,-28,54,15,-23,-72,11,-39,-49,40,-42,83,-69,-9,-50,44,67,-54,-41,7,41,68,-67,71,-12,58,-96,-26,-127,83,43,16,84,-40,-26,46,-57,-61,24,1,-72,-28,40,-1,96,46,20,87,-56,-4,20,-39,-64,-3,4,40,-30,23,15,109,-40,88,38,16,21,-44,67,15,-19,0,-41,-58,-47,45,-120, 
  /* [2][0][][] */ -9,-26,0,3,-75,0,-40,-99,-31,9,38,15,-86,14,16,-41,-76,-49,-32,11,-24,60,5,-111,-27,-6,108,-31,10,-92,71,-51,-61,-41,65,34,6,3,-23,6,111,-28,69,35,-71,-7,17,47,-4,-43,49,38,-18,-24,-38,1,-70,-15,-37,32,-57,-31,-10,-43,-32,-37,-8,-13,28,-127,-8,62,18,-25,-27,-12,13,38,84,-23,52,-20,-3,12,-52,61,66,13,-41,-2,3,75,-28,18,32,3,-38,17,-18,-105,-5,33, 
  /* [3][0][][] */ -40,41,-23,6,9,-31,-108,58,-60,0,-35,102,46,-50,-7,-41,-28,0,-84,-34,2,38,-83,-28,-15,-38,-90,-45,16,-11,80,44,-47,-65,-9,-55,43,5,-34,-2,48,32,-48,17,36,-8,-10,-1,58,21,-7,-31,20,-44,2,47,-11,100,55,36,46,-3,-31,-79,-41,64,-11,-31,11,20,-29,-23,-84,-37,127,-82,44,16,65,-52,48,69,-8,-30,9,80,20,-2,-14,-4,-94,-78,-104,36,47,79,43,-26,-29,19,-109,-67, 
  /* [4][0][][] */ -54,6,-20,29,6,-27,-8,-10,-49,2,68,-30,35,28,14,-63,-1,68,20,-2,-12,4,70,24,18,-19,-8,42,22,-15,-29,32,-14,-67,9,-1,10,48,21,-41,10,53,-54,-83,-45,-55,-51,39,11,8,-10,-27,-13,5,73,-5,-16,18,-45,-32,-14,12,62,6,-34,-14,69,10,18,9,-25,-55,-28,-27,10,-5,-14,35,-38,7,-41,-4,4,14,7,-34,-22,-32,-43,14,9,-45,-68,127,-5,-5,16,26,-54,-67,75,-71, 
  /* [5][0][][] */ -10,49,-29,-87,7,1,-54,-32,-47,-11,4,4,-7,-21,90,1,-35,38,-59,12,120,45,-36,-55,-61,31,-71,127,6,-18,80,-9,5,19,-18,-48,16,21,87,-28,-1,-33,-75,4,-57,112,50,23,14,-90,20,-13,46,84,-36,-32,0,30,-69,-1,-63,-32,0,-38,-77,-79,-38,-15,-86,47,54,16,-12,-21,1,31,-71,9,-122,-41,-36,11,49,25,30,-25,35,47,-32,78,90,67,-27,8,60,-30,32,37,30,92,-11,1, 
  /* [6][0][][] */ -5,-54,-46,19,-7,10,-8,-38,-46,-5,35,40,1,-12,-17,-34,-66,-48,-20,13,84,96,-65,-1,-42,-45,30,-17,-13,-36,-52,0,-40,1,-53,22,7,72,-21,68,-105,50,-46,-27,6,-10,21,-28,38,27,44,15,53,99,-30,45,0,29,-23,15,-73,40,-38,23,-45,12,32,-17,27,42,-15,-63,14,2,70,-54,49,-56,67,62,-44,-42,-8,27,-69,-64,-3,1,20,58,50,79,-34,12,2,-54,22,-1,-62,-80,-42,-127, 
  /* [7][0][][] */ 3,127,41,26,84,-12,36,20,13,82,-17,-101,-64,-76,63,59,-40,-61,34,-71,-74,19,21,45,-20,-82,-12,6,54,28,-83,-28,-79,-62,-28,42,42,-16,108,5,-64,26,-5,88,-89,-93,-59,37,29,-86,-49,-54,-35,-11,42,-47,7,46,-9,-5,0,16,25,41,-28,36,-40,-19,-38,-38,-29,58,39,36,19,58,81,72,44,-32,100,-7,107,61,-8,39,21,32,-102,-65,-13,40,32,68,-12,67,19,19,-33,-82,-21,1, 
  /* [8][0][][] */ 82,69,7,-32,36,-27,-8,-44,-29,-4,48,29,77,-12,120,-79,16,-15,-56,-1,-50,-19,-6,69,-52,66,-71,-87,81,119,-34,26,2,83,-64,2,-13,14,-127,29,-99,-88,18,-13,-51,3,-55,-12,-41,24,-13,-46,-16,77,4,30,-29,39,2,-27,-55,5,1,-65,88,-47,86,36,3,-9,-15,2,-40,-20,9,-26,-43,7,-74,12,-52,10,-64,-22,61,-25,-12,39,9,24,37,20,0,-23,-20,-45,63,-45,8,-31,-78,-57, 
  /* [9][0][][] */ 77,-126,-22,34,32,29,-13,-15,106,73,-39,44,-20,57,106,-67,-64,31,104,-31,79,25,0,-58,69,-30,45,-93,-44,-10,-2,-5,2,0,-25,12,-5,50,37,-6,48,38,2,7,-65,-37,57,-19,53,-90,56,30,13,14,-19,1,-127,28,-57,48,14,40,-5,-7,12,27,-43,64,-65,113,34,48,0,49,-56,-63,-45,-13,5,59,32,-6,50,-104,-41,-73,-19,-27,-40,-36,15,6,3,14,-34,29,40,44,5,-59,118,24, 
  /* [10][0][][] */ -44,23,-62,63,1,-23,-10,6,15,26,7,-66,49,32,40,-23,-7,-32,-56,-16,-8,-4,-34,-37,56,48,28,23,-59,-9,-10,-8,-39,-32,17,27,5,31,-8,-3,-5,-83,-63,-15,-5,-16,-15,-10,36,6,27,33,-51,7,59,-12,5,127,16,-9,-31,7,1,55,16,-14,28,-21,-14,27,-29,-4,-19,-31,5,-41,6,21,68,0,-8,-5,21,21,-6,42,-50,98,-110,-16,-1,-2,-13,-77,-27,-59,-59,-63,3,26,44,-40, 
  /* [11][0][][] */ 33,-3,-3,51,25,3,-57,25,25,16,-15,-13,50,127,34,-32,37,-43,34,-19,-9,-64,14,-6,-38,38,31,-60,8,51,-40,21,-71,64,45,6,-25,7,-61,7,33,-34,-7,32,26,-13,15,15,18,14,-104,-8,-56,-3,-50,-5,-40,-17,11,-6,-18,-11,0,-8,72,37,-71,46,16,-72,10,12,37,8,-4,88,10,-4,12,-24,-2,0,50,48,-3,77,13,-31,-29,11,-26,0,-50,7,41,-28,-2,14,-18,25,-12,12, 
  /* [12][0][][] */ -75,56,36,37,36,-18,81,-10,-6,-5,-20,-15,-25,-50,37,3,26,1,-17,-22,26,51,-3,106,68,61,9,14,-27,37,2,-10,-29,12,-66,16,-32,22,-10,-27,-65,8,-72,14,3,-19,-57,57,-35,-43,-94,-85,19,42,-25,-49,37,-13,-23,-8,11,-10,64,-26,-9,53,56,-10,23,8,3,8,48,65,4,31,39,-35,38,-14,-16,16,17,-19,10,7,-41,5,-14,54,-19,-49,48,10,-36,53,-90,19,-9,77,39,-127, 
  /* [13][0][][] */ 127,-23,46,37,-15,61,-23,-8,6,-43,28,-5,-40,-53,6,35,-13,-4,-63,-28,39,-6,6,-2,-47,-13,41,72,-32,-22,-27,-19,61,-1,-17,-85,-37,-33,-57,-48,-12,4,-87,-20,-5,20,-29,-16,62,-31,28,48,6,34,73,74,9,27,-37,-64,-78,-23,-17,59,-96,2,-102,3,-33,-56,40,33,-20,-22,19,-71,27,31,-97,3,-4,-4,28,37,33,-19,38,48,41,35,-40,-52,-87,-24,69,10,-64,34,51,-10,8,-19, 
  /* [14][0][][] */ -4,-63,-79,76,16,-37,-16,-4,48,-58,49,44,-67,64,-21,31,-100,-88,-127,-7,-18,76,-58,-36,-108,-12,-60,17,-89,69,55,-79,71,23,-43,62,-26,-33,70,58,-13,-6,2,-52,-94,44,-29,-10,27,14,105,0,-28,53,15,8,0,12,-80,35,48,101,-1,45,-20,-5,14,-2,-9,33,-23,-11,-21,-26,20,-117,92,62,38,60,-61,-45,9,-25,22,-20,1,26,23,-3,-3,-49,43,-36,-25,-8,-33,-49,-7,-38,62,64, 
  /* [15][0][][] */ -19,29,-22,12,-60,-29,-23,-70,-2,34,-7,19,114,-39,91,27,14,-58,5,-38,-36,-27,11,34,0,3,-15,3,-24,-7,-33,7,-1,43,-5,-13,-38,-26,-18,-28,11,-26,-127,-17,31,11,5,-14,-8,-43,-101,-18,44,-57,29,44,-37,-44,-45,-41,88,-42,3,-54,-28,57,30,33,-26,25,51,2,-1,-17,26,1,38,44,22,34,54,3,-27,83,-7,-58,-67,4,-41,-90,-18,-25,33,-43,-10,-40,-8,-8,36,25,27,-6, 
  /* [16][0][][] */ 21,50,68,48,40,1,61,-34,-49,24,-55,-4,31,8,0,-3,5,-21,32,84,41,0,20,83,4,46,2,-111,36,23,27,-32,-99,-51,-1,-57,31,-38,-89,84,66,-63,-29,-20,-52,-71,-70,-15,76,86,39,12,-52,81,31,72,-10,-22,-32,27,27,-66,-49,-127,-76,-14,-21,54,-28,-22,44,85,-36,34,11,24,-21,11,69,8,-2,18,51,-26,59,50,31,35,91,34,12,-57,-21,-22,-33,45,-2,-58,-49,7,-41,44, 
  /* [17][0][][] */ 45,0,-13,-35,-4,-21,47,0,16,-100,-2,-6,-19,-47,-16,-34,-8,-62,-16,16,-24,31,39,-12,-5,-16,1,42,25,17,27,69,6,-18,28,-14,20,9,-3,-3,-25,-1,-55,-5,65,-66,1,-1,36,-3,4,4,40,-35,14,-46,57,-39,16,-18,-4,-33,-19,56,-37,2,6,19,22,-46,-23,-20,0,-21,-26,6,-3,68,17,7,-41,-127,-34,7,-70,29,-1,24,26,41,14,-25,-39,1,11,-45,40,-79,39,-22,-18,-11, 
  /* [18][0][][] */ 38,3,-17,2,77,21,18,-2,40,-46,-4,-24,-15,42,-53,44,-59,-7,-50,25,-35,67,-12,35,41,17,12,68,-127,-28,-39,-49,-35,-34,34,48,22,6,-7,-44,-70,-39,45,46,41,42,48,-42,-37,-107,-13,-45,3,-45,-90,32,31,-22,6,-23,-123,35,6,-62,32,-5,-14,25,-6,13,20,8,1,45,-24,-16,-49,47,2,22,53,103,3,64,-98,-20,-63,-34,54,60,-14,-39,16,35,-1,9,65,106,-56,-4,-4,-42, 
  /* [19][0][][] */ 27,22,-60,-17,30,-47,-32,-94,-59,40,30,-33,-103,3,-37,-7,72,-4,-8,-25,48,-57,-1,-11,20,-22,-25,6,60,62,-49,62,85,57,63,-18,45,9,-7,-17,-80,-2,-87,53,-127,65,-23,57,42,37,-34,-15,6,-107,-38,47,-63,-118,-32,55,-34,-7,41,23,43,-32,-94,49,-23,-108,-50,-73,13,19,-29,-7,120,-93,28,-39,34,41,-58,-18,36,-32,-29,117,12,44,-48,15,25,-96,6,25,-61,-5,8,-9,-24,-46, 
  /* [20][0][][] */ -34,-48,20,87,100,-1,-72,-2,8,-16,-35,42,14,-30,-39,-119,57,-6,69,-68,-113,110,77,-50,40,68,-3,-46,78,5,-24,0,-67,3,-36,-79,7,15,-80,-62,-59,-37,-28,-11,36,97,25,-20,33,101,-53,-63,105,48,-92,22,-76,-87,38,18,64,36,11,-61,-46,25,-127,28,-26,-38,68,63,-33,74,87,82,60,-29,-53,-47,-58,9,1,-12,-18,7,-121,-16,-9,15,3,-28,-25,39,-16,21,-53,-17,31,64,94,4, 
  /* [21][0][][] */ 20,-13,-42,65,-46,48,-80,26,-15,14,13,-1,-39,121,-50,27,-37,-36,-13,-38,8,0,44,-11,5,-6,39,6,-34,-42,-23,10,26,-127,19,-20,9,2,8,90,21,32,85,37,-3,2,70,19,29,-26,-14,-14,-39,46,3,-17,-79,-44,33,-47,-9,-11,10,-6,10,-30,-80,0,26,49,-15,-21,-81,-1,-25,-47,-36,8,-76,-14,-28,-7,29,-37,-24,-8,14,-62,25,-10,-3,2,-56,120,37,-19,0,25,81,10,-44,27, 
  /* [22][0][][] */ -8,-22,31,20,-31,-12,-19,-30,-76,27,-64,72,-2,54,-88,16,40,14,-66,-29,-64,-8,19,-1,-120,47,-38,-21,43,-31,-41,-30,1,14,-46,42,-51,-15,-31,-47,-46,107,-13,-28,33,-24,-8,79,9,16,44,-26,7,-10,-21,-18,26,-54,2,-18,-89,-6,41,-48,27,82,7,1,7,14,13,-1,-58,13,88,39,13,62,-30,-39,26,26,21,127,-42,-10,2,47,35,1,11,48,-9,-11,56,6,-5,-20,48,67,11,8, 
  /* [23][0][][] */ 17,-11,27,29,17,-34,-21,21,-8,14,13,42,-6,-19,36,-46,19,-25,15,-35,-15,-1,-25,58,-48,10,-42,36,12,-13,24,8,16,31,4,-30,-23,-12,-51,3,-4,-14,31,-23,-34,45,19,-13,14,-18,42,21,-10,14,-30,-12,-17,48,17,9,-23,9,-2,-127,-2,47,8,1,-15,28,-39,-6,-9,-12,-34,-25,2,-29,18,10,-31,-9,-48,47,22,-25,-17,-37,-48,-7,-19,23,5,0,13,14,-1,24,-14,-29,13,10, 
  /* [24][0][][] */ -35,12,30,15,5,-69,-6,31,40,39,-54,-6,46,48,-13,-6,22,73,15,-50,15,-42,74,-120,-19,-3,7,28,-8,-10,-29,-10,11,85,36,25,0,-28,31,-2,19,6,-28,48,47,2,76,18,23,-5,8,-2,-7,-37,-46,-60,-41,-105,-67,-42,-25,-27,38,112,127,49,-2,14,-47,6,16,39,61,4,-76,-25,-13,-26,-80,-33,31,37,27,9,-24,89,-72,36,9,9,6,28,28,24,-47,11,-87,18,23,-59,43,-19, 
  /* [25][0][][] */ 67,-16,1,-5,-7,6,-36,-4,-45,90,-24,53,-88,-24,74,-16,59,-15,13,-42,-127,94,-60,-65,19,46,22,-52,-33,-31,-28,46,-17,41,-88,-39,-31,1,51,-9,-99,41,35,-33,61,-18,-23,113,67,-5,38,-56,1,20,83,3,29,5,11,5,-104,-48,119,44,89,-29,62,45,-22,44,63,46,90,-15,8,112,-54,-80,-51,56,53,-85,18,-108,67,32,-67,-19,-112,-60,29,-44,-23,-35,-75,16,9,1,-22,-43,-98,16, 
  /* [26][0][][] */ -48,17,0,-28,-63,45,7,39,-127,-18,-15,39,-22,-13,38,31,-19,27,-40,-22,53,72,19,-115,-20,1,47,34,-4,-47,-10,29,10,18,-70,-12,57,54,-7,-39,-3,49,58,0,-35,3,36,-17,-12,-27,-50,-40,0,3,6,-39,22,-14,-31,5,-48,-72,-30,-48,36,23,-20,-30,33,-48,55,-19,51,-12,-3,-30,97,-57,-39,35,-19,-29,-10,17,18,72,3,14,-8,16,-3,-23,16,17,-33,14,5,13,0,29,67,22, 
  /* [27][0][][] */ -42,-21,-56,-8,-29,-3,16,-16,-75,-81,-12,-61,-30,-70,68,-127,17,3,-29,-30,47,-12,26,-11,-23,64,-5,-39,-11,-22,12,71,-45,15,11,-25,-15,28,-37,24,-11,12,21,-23,-11,36,85,-19,-5,-69,-11,30,13,12,-22,9,62,-57,-6,2,-3,30,-13,8,30,54,10,15,0,-19,70,-6,-49,76,26,24,25,36,-86,16,15,-54,35,9,-10,12,-11,9,29,-36,-46,-71,10,25,19,-35,-4,6,30,-27,29,-37, 
  /* [28][0][][] */ -3,27,-13,-35,51,-43,26,-11,-86,40,-8,8,2,24,18,14,-56,7,20,10,-86,-49,27,-127,55,2,-66,0,-6,9,31,-19,-48,28,-35,29,-21,35,25,52,-22,-57,-97,10,55,51,3,49,113,-10,-6,21,-49,-1,14,20,-22,-14,-18,-52,25,22,69,-95,9,-77,32,85,-29,14,-56,-39,-62,12,33,-56,-49,-9,-66,102,-75,1,44,-6,-35,74,-17,-42,-41,-34,-24,-40,3,3,69,-52,-17,35,-102,-40,-18,37, 
  /* [29][0][][] */ 67,-12,28,-49,-41,102,-4,58,26,-11,22,-20,70,-30,12,27,-7,-7,25,-55,-24,-31,-50,3,-83,-24,12,-8,10,127,-56,30,-74,-21,-1,-22,15,4,59,-46,39,-26,108,-102,-54,92,5,-36,-20,12,97,16,-101,25,-89,-11,-36,-42,21,-11,40,-15,-40,-41,1,26,89,-21,38,-6,-58,48,-17,23,11,19,-14,12,51,29,22,-39,13,7,-19,-23,-4,-22,52,10,-44,-10,38,54,-4,-28,-14,-6,-67,26,-23,-16, 
  /* [30][0][][] */ -91,41,-89,-37,-1,-50,34,28,8,-36,-19,-20,-45,4,36,14,-51,24,-17,-14,-4,-53,-82,-64,-21,-84,12,62,78,-56,-12,26,42,-43,-4,37,-20,5,-34,76,63,29,-127,-23,65,7,-14,2,-83,80,-50,13,22,4,-32,-1,-7,-9,15,34,-57,-22,-43,-24,23,-19,16,-60,59,83,122,3,48,-40,-79,10,-15,27,-81,-11,19,22,-18,16,20,-26,93,3,3,34,49,-10,-93,38,-11,2,-2,56,-85,-79,31,22, 
  /* [31][0][][] */ 15,20,58,21,45,53,-62,21,24,-27,37,56,57,-18,-20,32,5,-35,-33,-21,38,-29,62,31,-32,16,-12,-39,28,-18,18,-2,-62,8,-16,-42,-25,27,39,-49,-2,127,-19,-73,13,1,30,-24,-8,-46,28,19,-34,-26,25,-15,-15,-34,16,22,85,8,-6,-63,-21,70,39,-19,-5,20,10,-47,-3,-37,2,9,-23,-83,-26,-23,11,12,17,31,-1,33,-9,-14,51,-3,32,-27,10,8,5,-13,21,-24,-18,33,1,-29, 
  /* [32][0][][] */ -32,-21,0,0,-34,-29,5,46,37,14,-17,-3,-25,14,28,-9,-27,127,17,-30,45,20,16,4,-14,33,-82,-6,-26,61,7,18,-35,-36,8,-38,-36,32,-25,31,-22,-52,-3,21,-109,-53,4,-23,47,-24,-3,5,8,-32,-23,1,26,17,-5,-12,-48,-1,-39,-24,-35,-66,-37,-28,-5,-22,23,-23,-85,-1,21,-15,-6,-54,30,13,-62,-21,29,15,3,-12,26,-18,-17,-45,55,-14,16,-47,14,-46,-22,-18,58,-18,96,27, 
  /* [33][0][][] */ 8,-91,-16,11,-60,-28,41,-28,-86,-37,-15,35,-10,-3,-14,7,-50,-2,1,-27,-28,20,-55,-57,-63,35,1,-4,44,-56,-19,-68,-28,-37,0,73,-12,60,23,-5,11,-68,-25,-22,-12,13,3,81,-31,5,1,14,-53,67,-63,7,-36,23,-33,18,29,40,65,-72,45,37,24,55,-28,30,24,24,7,55,-4,-127,16,-102,16,-31,-17,-121,-4,-5,-30,-9,-4,-29,-15,29,19,-26,-25,44,-6,-24,43,-15,-17,32,57,-68, 
  /* [34][0][][] */ -20,-9,-55,-33,83,-23,-1,-2,3,13,20,-110,27,-61,-44,21,21,13,-6,-34,7,13,0,-15,-7,31,-37,48,-100,56,20,-51,-38,-75,-119,25,-30,-23,15,40,8,21,2,28,-1,-60,-127,-31,32,-2,-6,7,29,-12,-48,-58,103,-14,2,-2,35,49,-22,7,6,-37,-19,-35,-35,42,32,-34,26,18,-13,9,-52,1,42,17,44,-42,-22,71,8,59,-8,-18,-74,-12,-13,14,-13,53,42,-32,-25,-73,-50,-17,72,23, 
  /* [35][0][][] */ 43,-30,0,-24,36,31,-19,-40,100,-23,44,56,-12,-1,56,-20,57,-7,-47,-1,-20,-14,-22,69,-24,-63,-15,46,-48,-29,-44,83,-30,40,43,29,127,-49,18,-65,12,19,39,1,-10,-23,9,78,56,-8,41,32,-4,9,6,-81,4,61,-16,-3,-55,44,92,21,35,-38,-16,7,2,13,1,12,-52,58,37,-22,-76,7,-50,1,-75,57,-13,-23,-45,26,22,21,24,-4,17,1,-30,47,15,-13,26,13,16,12,-46,-108, 
  /* [36][0][][] */ 11,-67,28,1,-22,64,22,8,20,-37,-78,3,-22,20,-3,-97,62,127,-44,-50,-6,71,24,-63,-47,8,-51,35,10,-68,-14,-34,-77,32,11,-5,13,-54,-38,-86,-63,37,-38,-26,2,-32,-10,-29,8,-47,56,88,-33,-76,-43,-65,-30,23,22,19,43,15,9,-54,62,-81,21,34,-13,15,-36,-41,45,-4,42,2,50,30,-17,48,-76,1,17,43,-7,-25,-49,4,85,10,-52,3,26,-7,-51,-42,-45,58,1,-32,-20,19, 
  /* [37][0][][] */ -6,-2,-23,100,83,16,-41,52,4,-127,43,8,26,75,-12,-25,9,18,42,-5,32,48,-65,-60,123,-70,-53,7,31,-52,19,-35,-38,40,63,-16,10,-86,13,-17,-45,46,-17,75,21,-50,34,6,-53,-10,58,4,-31,44,-18,57,13,-29,-45,-47,30,21,49,-70,-61,24,35,-36,8,-55,-92,66,-113,-35,-2,10,-56,-27,15,-7,66,-8,65,0,44,-57,-75,108,30,110,-37,35,-26,6,-14,-118,-39,-23,25,-82,99,-12, 
  /* [38][0][][] */ -28,43,-57,-27,-84,76,-30,10,-12,-2,-9,46,-8,65,76,127,-8,-32,-29,-28,29,-65,-56,-39,-17,8,19,-37,65,-89,-94,-23,47,15,43,99,20,-6,-69,6,-6,-44,15,-4,2,17,-44,54,26,-22,-19,47,56,-37,16,29,-87,60,-10,-5,-21,14,30,-57,-11,-24,-75,35,-4,13,-36,-34,-94,-25,11,70,17,53,80,11,32,-1,60,-84,-85,-6,-18,-57,84,34,-29,-43,29,5,29,4,-98,74,17,-65,-1,72, 
  /* [39][0][][] */ 46,51,13,6,62,-31,23,-52,66,33,-31,-38,-15,-39,3,11,21,-24,-5,-44,-81,83,-97,-42,14,-8,-65,39,-59,50,-78,14,-101,-15,-90,30,55,-25,-20,-32,68,-6,20,63,-47,-36,-44,-10,-64,-119,40,34,107,5,63,5,31,35,38,13,-64,25,-16,25,70,27,7,12,16,47,-39,-66,11,79,52,34,55,-76,7,-54,26,-48,-102,16,75,11,28,-3,127,-120,-46,-8,-7,-9,23,-64,32,83,18,-2,60,21, 
  /* [40][0][][] */ 35,21,-93,-80,44,16,-53,-55,-71,25,59,-74,-16,-4,24,-38,12,28,63,-22,14,28,53,36,-19,15,-16,37,-79,24,4,-76,68,-44,14,0,-3,7,-16,4,3,7,-60,30,-2,-89,-7,-13,17,-107,69,-37,10,-18,-63,44,-31,5,-19,-38,-15,21,11,2,-63,49,-49,3,29,-3,-31,50,26,14,-30,-50,17,-34,-34,24,-18,19,89,0,-13,-89,-17,-11,127,-22,-56,-10,-76,49,30,26,-25,-71,25,87,33,19, 
  /* [41][0][][] */ -17,38,-41,95,-77,-48,50,37,61,0,20,-55,-95,-14,-25,-16,57,-47,-4,-57,45,40,102,25,-34,25,-96,31,-51,41,22,-40,-7,102,-95,7,39,61,74,45,-73,-73,-56,-62,62,-74,51,-2,-38,-107,2,41,0,-108,-86,-6,109,0,123,50,-24,37,55,-72,86,26,-105,96,73,23,12,43,-10,75,23,48,-79,-24,-22,17,-99,-63,30,-84,-42,-127,-14,123,-20,79,37,-7,25,119,-92,13,45,-76,5,-5,34,-27, 
  /* [42][0][][] */ 13,-1,-38,-11,-17,-3,-28,-66,2,-68,-13,-19,127,22,23,-16,0,25,-25,1,12,8,10,-7,11,-41,-60,-17,-19,-32,37,-1,30,64,18,-36,17,-9,-44,25,31,-10,36,41,44,69,12,-28,36,-89,12,-14,73,36,21,-39,74,31,-19,-53,-16,9,28,3,41,20,19,-34,-35,51,-25,4,15,-18,1,-15,84,35,-49,-22,24,-13,15,-26,-48,-75,-13,4,-21,8,0,-39,0,-19,-14,10,43,-33,2,-32,3,5, 
  /* [43][0][][] */ -24,5,-2,-100,-12,-24,8,58,48,51,-49,26,105,31,0,-67,83,15,55,-45,10,-74,-29,-1,14,38,71,16,54,-57,30,-95,-48,-34,-52,-5,-43,-32,37,22,37,81,37,-19,-73,50,127,-4,-59,44,56,-32,-20,-21,79,106,-7,-100,36,8,-101,16,5,11,-23,1,-26,3,-15,-17,13,-61,-47,23,36,-29,-32,51,4,-8,-73,-58,-57,-9,38,-7,9,89,-55,-10,-37,-51,-82,46,-27,-8,54,-111,15,-31,-41,62, 
  /* [44][0][][] */ 18,-65,-21,54,-29,87,9,-14,-43,20,2,-78,-86,5,-67,50,93,124,77,-63,94,82,-9,-17,56,35,-42,-12,-19,-38,31,-9,36,-6,-4,55,-36,113,-79,-109,-38,65,-21,-21,40,19,4,50,-127,20,28,40,38,-17,-57,-35,55,-45,72,41,-61,13,46,73,68,29,-30,-49,-74,18,66,-29,-30,30,4,-38,71,35,-77,-14,-36,50,-4,-57,67,-28,-11,33,95,32,-45,-56,-10,-59,-54,78,-49,3,-17,-59,52,-103, 
  /* [45][0][][] */ -25,9,18,82,3,10,-41,2,-104,79,3,-20,67,-73,-30,68,-27,-25,126,8,127,36,27,21,49,19,-21,-92,43,40,35,81,-5,-1,-25,-41,-47,21,2,0,45,-44,-77,52,35,-66,-39,-56,-1,-9,10,-14,16,45,70,-35,34,-27,90,53,12,-50,5,85,-59,46,81,62,26,8,-37,20,-1,-43,16,-40,-12,-73,-8,13,32,-20,108,-6,28,-13,11,-3,-29,11,-61,-49,85,92,-77,-18,-23,0,-39,-22,73,-51, 
  /* [46][0][][] */ 7,-56,19,-95,-42,-29,-17,-47,107,43,-4,35,7,52,12,-25,-28,41,28,-25,-17,-22,41,-4,31,-6,-11,-36,-38,-55,60,53,-62,-71,48,46,34,-96,-41,71,101,-19,18,-47,0,52,21,22,-4,-108,10,-23,78,-3,-22,87,-41,-37,-55,49,-13,104,-19,-14,-58,28,-81,-47,-53,-6,-23,-11,-5,-45,13,-20,-1,4,41,4,51,-80,-58,36,48,-102,127,-95,15,36,-15,-3,-11,-8,93,1,16,20,28,-117,-7,-18, 
  /* [47][0][][] */ -34,-15,1,-71,24,-31,-52,19,-9,85,46,-11,-23,55,-3,20,19,-38,-58,-33,127,-8,-55,11,-11,-59,24,8,8,-23,-25,16,-22,-27,50,-26,-20,-73,39,-56,20,0,-42,16,4,4,-50,5,-1,-15,6,-41,-29,22,-24,-114,-3,-4,20,7,-81,9,51,-26,11,-5,75,53,0,9,59,1,-52,-19,52,-8,-2,-125,1,-4,-44,35,2,-10,-30,-63,-8,-26,-67,-38,53,-31,-29,24,-25,72,-4,23,36,-2,111,-13, 
  /* [48][0][][] */ -5,-21,91,11,-19,-54,60,40,3,-25,37,41,13,11,-61,20,-60,-80,-64,-84,-32,-14,-47,4,45,46,-27,-32,59,-24,124,29,47,44,-13,-52,-35,-80,-28,-33,-18,-15,-3,28,-48,118,63,42,-54,67,-9,-8,4,-46,-31,14,-44,4,-31,20,5,8,-34,26,7,21,-28,-23,-41,-1,-20,2,-18,58,2,-52,15,65,-72,-5,-50,15,-4,24,48,11,34,-14,54,127,-61,2,17,-6,65,35,-56,-32,-45,-22,-28,-55, 
  /* [49][0][][] */ -39,-50,12,-9,-39,-16,-50,-1,3,-28,-1,-54,-60,26,-28,17,-12,-13,-53,-64,52,-41,49,-25,-23,-7,8,47,-20,12,-59,-30,36,30,-82,-8,32,39,3,-127,8,-23,9,10,39,20,-26,11,-6,-49,42,-2,8,8,-7,-6,-16,12,-22,-4,-43,34,17,-78,-41,22,-34,-31,31,4,-38,-39,-29,-1,-1,58,21,-8,12,21,-14,47,-24,-10,-4,-15,37,-23,-2,40,-37,-50,-72,-51,20,-36,-19,-46,14,-38,-23,-14, 
  /* [50][0][][] */ -16,-4,42,64,-10,-82,-3,3,-19,59,-39,36,4,32,-30,-33,126,-66,-72,2,91,-89,11,22,106,-52,-42,-14,49,-11,22,13,-9,-50,-31,-4,-10,-20,-30,-40,6,30,8,19,-95,52,36,-66,22,-37,127,-66,-4,33,-55,-1,0,3,-4,28,-11,40,-64,-21,27,-38,48,62,-84,-49,1,27,0,-24,7,-30,27,111,-15,12,-15,-37,-3,-34,13,-10,-4,-52,-21,29,-22,-11,-11,-43,12,4,-22,-40,30,40,-19,-74, 
  /* [51][0][][] */ 13,25,-44,16,9,-36,0,32,37,12,-3,-81,-30,-22,-4,-2,31,20,18,5,29,0,43,-8,14,48,16,48,17,-20,18,7,-31,0,-3,-37,13,-33,14,-33,-31,-7,19,1,-2,-23,-5,-8,-23,-3,-32,-48,-39,63,36,45,63,11,1,15,-32,1,10,45,20,36,-37,-6,46,14,25,12,17,16,25,26,-18,26,-2,-20,-50,8,-33,-18,-59,-4,-41,-35,1,9,-24,25,15,-7,-15,21,-25,-37,-127,-37,35,20, 
  /* [52][0][][] */ -33,-25,28,33,-42,-39,29,-51,-68,-58,-33,41,-23,-32,127,19,-20,-35,-1,-32,-23,-61,-7,-92,-10,-26,26,55,6,-4,51,12,5,-31,-38,8,38,-51,-26,33,-28,-22,19,-60,7,-23,-15,1,-9,-90,41,-19,17,12,-32,-3,-10,15,-41,-65,97,28,8,2,-81,-39,-73,29,-75,-90,114,26,-48,23,-23,-34,22,23,70,25,-24,107,26,90,6,59,-7,-53,52,10,52,9,-26,22,41,-38,0,21,-27,75,-62,-12, 
  /* [53][0][][] */ 55,-8,10,111,50,-5,66,53,55,22,61,29,42,4,-102,-2,26,116,19,20,14,44,30,-13,72,-26,-13,-3,31,39,-63,76,104,1,-77,-33,11,-34,-68,-50,-67,-8,-48,30,-3,53,64,-12,-26,53,-62,85,-40,37,-127,-15,83,18,2,-58,-41,9,22,16,4,37,61,54,69,34,-3,19,33,26,-16,14,-19,-41,12,-12,-53,51,-21,-7,-8,-25,-41,-5,-42,-83,-5,18,-15,68,-13,100,40,1,14,47,41,-79, 
  /* [54][0][][] */ -73,-127,-33,8,-25,54,26,-40,-36,-16,19,17,-32,1,8,31,7,13,16,49,46,-25,-26,-7,14,-56,19,-20,-27,-15,87,27,-66,-5,-13,-10,33,-50,8,-11,36,-19,-16,32,-7,-23,-17,18,-10,-48,29,-6,7,-12,-8,39,9,26,-2,-10,-6,17,5,21,-51,32,-13,28,-36,2,8,-16,-102,-19,17,-41,-33,10,41,-52,-2,-39,-18,29,-14,-41,47,49,3,37,-59,-14,-15,12,66,-10,52,25,19,-26,-54,9, 
  /* [55][0][][] */ 1,-12,59,6,78,-46,-45,-19,24,-29,-35,-42,-4,-40,-55,7,-31,-18,-7,-30,-53,79,-76,30,112,7,-3,46,-7,6,8,-11,2,16,49,-72,-3,16,85,8,-13,33,-26,16,45,1,-30,-51,-23,-46,-16,-46,6,-49,41,-53,33,-7,19,-12,-38,-6,32,1,-24,58,-71,-9,-45,60,25,-83,69,-32,50,19,-4,68,-14,30,-36,56,28,39,-27,7,-17,-7,55,-33,-7,-56,-34,-48,-61,-41,43,-16,127,-31,30,-36, 
  /* [56][0][][] */ 16,-17,-47,-33,74,-6,15,-6,3,-51,31,32,34,-25,68,-10,-14,-32,-49,-18,-23,57,-36,-6,-63,-7,15,-11,-30,-25,0,36,15,-33,52,-2,13,-24,3,43,-19,-23,24,47,-1,-51,-27,6,26,-87,-6,38,41,-3,15,-37,-6,-28,5,36,12,6,-28,11,11,-46,127,-36,-36,-43,17,13,-17,45,-31,-26,-16,-4,15,12,-36,5,-29,8,-28,17,78,31,-45,68,12,-18,-3,-4,13,-56,-45,50,-54,-29,24,-42, 
  /* [57][0][][] */ -43,13,34,38,14,-19,127,51,-85,-99,-14,49,-11,-8,35,-106,-33,-58,72,40,-55,-12,-61,59,-38,-8,-84,56,-46,7,-44,6,36,-7,-27,56,-32,-103,-2,44,96,-29,-72,13,-32,17,-50,20,74,-22,61,7,34,-24,-79,57,-7,-76,-24,-1,-13,10,0,-52,-23,1,-57,84,12,22,32,40,8,49,11,-51,52,-11,1,-43,-61,60,-29,15,-49,-56,-37,-46,-5,17,-19,-27,-10,51,7,-26,10,62,62,-36,-18,-98, 
  /* [58][0][][] */ -8,-17,-12,-35,-36,-10,36,-10,-56,-44,4,-40,-1,-12,-20,28,-9,-10,13,-13,-36,36,3,30,22,-6,-2,-29,2,-29,63,42,-30,-20,21,-5,-21,-69,12,41,-12,35,-4,-19,-11,-18,3,13,-36,-28,7,5,19,-7,-14,33,17,37,-42,4,-16,25,10,-26,48,11,15,8,-15,30,11,12,11,-37,-28,44,-5,-51,45,37,-127,67,68,11,37,25,8,-22,-12,21,-3,-13,-26,36,1,41,-3,-24,-37,-32,-16,-13, 
  /* [59][0][][] */ 74,33,54,-89,13,-58,-34,-16,3,-54,-23,83,0,43,14,-61,-4,20,14,54,47,-127,-30,-42,40,37,-39,-31,-36,24,-22,-3,58,-25,-18,-28,-67,-18,-53,-31,10,59,44,-95,63,41,-5,-44,-44,-108,51,-52,-11,52,-18,-5,17,-11,38,-51,-88,21,-18,4,68,2,23,-1,-34,31,59,-50,19,5,-41,-77,10,35,42,22,10,35,73,82,-14,-20,-17,5,-52,44,-33,23,16,57,11,-1,-56,-53,-78,72,-6,31, 
  /* [60][0][][] */ 15,-50,29,34,57,3,7,-14,59,-12,28,25,-35,-30,-23,-44,21,0,9,81,2,-32,-27,7,-103,71,-24,19,-9,61,20,-14,-24,42,-20,28,-105,-51,-19,-14,-71,37,-18,-16,-34,52,41,17,-37,-7,-77,34,51,63,81,1,121,23,-79,-5,-63,-33,1,-34,-44,-27,15,2,30,-10,33,102,-29,-48,55,-58,-4,-7,-65,-53,127,-2,-14,25,17,13,-52,-78,-51,9,47,-43,58,-1,-3,17,1,-46,-45,3,1,44, 
  /* [61][0][][] */ 1,-5,-16,-18,56,-44,-47,-13,8,50,-14,-9,35,23,-31,4,-3,-32,-62,-49,53,-26,84,-8,37,28,53,-63,-12,-21,3,-18,31,45,38,-5,-43,-3,31,37,-13,-39,-51,-127,-85,-63,-18,-38,64,-15,28,62,-19,19,8,39,-32,48,-11,-27,-29,24,-19,-60,47,1,-74,-53,-9,44,9,70,-13,37,41,21,23,34,-21,-27,-36,-23,-3,0,53,-41,29,-23,-41,-71,4,-1,-19,-12,-34,-16,42,-19,-8,-9,64,-47, 
  /* [62][0][][] */ -12,-5,-33,18,-3,-3,77,-11,0,-19,-25,12,-14,-30,31,-40,73,-85,-69,-73,-41,14,-8,23,-57,57,-67,29,-127,-32,-33,36,-16,22,-23,-82,-17,-53,-43,64,17,-43,-37,90,-7,-2,15,57,123,-21,-57,-35,-66,-30,31,15,-94,-11,94,49,-64,-17,79,-71,-116,-57,-59,-4,38,-29,54,18,25,22,-78,-59,-36,46,32,5,-14,-7,25,-34,-50,-26,-101,-91,12,-13,27,-33,76,9,49,-12,-44,42,102,17,61,-30, 
  /* [63][0][][] */ -9,-25,-106,-78,-39,-30,5,-30,-31,41,66,-36,-40,48,79,-39,-18,-98,20,16,-103,-36,40,21,-39,48,-68,61,127,29,-36,20,43,27,-16,74,102,20,-12,69,-34,-32,-33,-115,20,29,-88,76,-46,-93,31,-26,-56,-66,-24,-33,-52,-31,47,41,26,23,10,-15,59,-94,-30,3,-25,-1,82,-11,-2,85,-5,51,3,-6,-41,53,59,-117,100,71,-53,29,49,92,0,-47,6,-25,-28,68,-1,-24,-84,-55,-13,17,-60,-17, 
  /* [64][0][][] */ -67,-19,41,45,19,-13,-44,-19,-28,-20,19,-9,8,-40,-123,25,-41,17,41,17,-62,-37,3,-34,9,15,30,12,3,-13,-12,4,-11,56,33,19,25,79,-23,-23,-15,4,-17,-39,-10,39,-23,30,-8,-38,26,21,8,-68,-127,-51,40,22,-34,-19,-26,-4,24,51,-21,20,-37,-37,-29,25,9,0,48,-14,-38,-49,8,-51,22,-26,-45,45,-45,0,8,-5,6,-85,-2,54,30,18,16,33,-27,-24,16,15,14,35,-37,61, 
  /* [65][0][][] */ -46,93,40,-1,-29,46,31,-74,2,31,-12,-73,1,-19,-21,-8,-75,62,72,33,-15,0,-18,57,-55,-21,-7,3,-84,-34,-40,-34,8,57,59,9,46,25,-41,18,-42,-37,56,68,11,-34,-6,6,-48,-22,-62,45,-25,-10,-35,-66,25,-6,127,80,-72,-29,0,5,-13,48,24,55,-16,-8,-32,-4,-29,28,52,3,-14,43,-30,30,-45,42,-62,7,-43,36,21,43,58,24,-70,79,-71,12,-37,37,-31,8,40,-69,-40,23, 
  /* [66][0][][] */ 20,-106,45,64,-68,0,30,-14,68,9,-60,40,82,-78,45,-53,-17,7,-15,-56,19,31,-41,22,127,34,38,-22,5,-33,12,-28,50,-22,-9,115,-67,-97,-37,-34,27,57,36,34,50,12,-63,32,-78,-26,17,-13,-60,29,29,-42,26,16,-29,18,24,117,68,19,38,63,3,124,11,-47,-28,-18,7,-26,-8,-62,18,-41,-38,-21,9,-54,-71,-30,36,63,4,65,-67,8,-57,-13,13,-39,-43,14,-3,40,8,68,-7,-30, 
  /* [67][0][][] */ 57,89,-43,79,-16,-79,38,25,-25,53,4,37,-27,50,79,9,28,-5,40,7,5,58,38,-43,0,37,42,8,26,-104,127,-36,4,-24,-27,34,22,38,-55,-18,11,-42,-42,-30,54,21,-15,92,13,16,-29,-6,20,29,-2,-49,31,-11,18,-17,-13,-41,25,-44,32,-7,59,24,-54,10,-10,-7,-66,52,11,-28,26,35,-34,12,34,-2,0,-4,5,-89,6,-19,3,-56,-18,-64,-74,-16,36,2,-35,-23,-51,49,-73,-94, 
  /* [68][0][][] */ 9,22,-17,1,-35,-53,-56,-14,-59,19,46,-7,-74,-5,-19,-60,27,-12,14,-34,11,-35,-76,-24,15,-36,18,62,-127,-27,14,-28,-31,-48,30,26,49,-28,-19,-2,-7,16,-39,-19,49,-75,38,23,4,48,46,-24,21,-41,16,-9,66,32,-58,-32,-38,-30,-3,-40,-36,-6,29,6,-29,-15,-4,13,31,-7,27,18,49,58,10,26,29,-8,23,16,-34,19,33,11,-38,-38,16,-9,22,22,29,40,-17,23,-51,76,-2,36, 
  /* [69][0][][] */ -8,105,32,-73,10,-8,-9,56,-2,32,29,37,-36,38,5,0,61,90,38,-29,112,-3,68,83,60,25,104,-71,3,3,-11,61,-29,-6,-69,-48,4,-5,-83,-89,-103,88,-80,-10,-15,-41,14,34,88,108,25,59,13,-73,-127,-27,-102,-15,29,54,13,-16,48,8,62,-41,11,42,-28,35,-33,-2,10,6,-32,91,-44,26,-5,8,4,29,23,-25,-53,56,-24,-23,-7,39,82,-49,63,-36,-10,-80,72,-40,44,-85,53,-62, 
  /* [70][0][][] */ -53,-11,66,8,-58,127,-7,-49,-38,-25,-8,-40,-46,-61,27,-5,-12,-15,-56,36,3,-66,-21,24,-15,25,-79,20,-5,16,-7,-4,-54,-1,93,-12,1,13,-30,-16,-19,-16,50,-96,14,-31,10,19,16,-67,-29,-3,56,66,-30,-14,59,-72,0,-41,-79,-12,16,-26,-32,13,-60,29,7,-14,1,-19,19,59,33,38,81,9,-3,24,-8,-11,-22,44,23,-30,-25,11,-80,-21,-37,-13,-34,38,5,19,32,-33,8,-50,41,-38, 
  /* [71][0][][] */ -37,-25,8,86,11,8,-5,23,-34,52,12,29,-84,79,9,-1,-9,100,-45,-38,57,5,-87,58,-16,14,36,-43,71,-113,-47,-12,-50,46,-9,-35,9,48,1,14,56,-127,42,-4,40,15,41,-12,9,-20,14,3,35,-48,27,56,25,27,29,-51,-53,77,46,-32,-9,30,-20,18,39,0,-11,-33,56,-40,87,69,11,-26,-77,39,14,-1,37,37,-3,-32,-11,-34,-53,23,15,-29,38,-55,69,86,0,-100,14,-37,-47,-18, 
  /* [72][0][][] */ 15,92,-14,39,-5,32,-43,24,-44,-84,-19,8,-14,-51,-22,-43,12,8,-19,0,25,-35,-3,18,-19,-2,14,-14,38,-19,-69,47,2,43,-10,-29,2,2,8,-60,83,-47,-68,-14,19,-42,-102,118,-46,6,-36,-127,38,15,-60,-102,-11,41,-43,-39,-9,-42,116,10,62,60,-11,-28,-58,2,75,2,-13,10,-2,-8,-68,23,-9,-46,-13,62,28,-18,-25,-21,-31,4,-17,10,-8,-2,60,-49,0,-10,-12,22,8,7,78,11, 
  /* [73][0][][] */ 12,-91,-8,11,27,7,34,-19,90,-102,-45,-17,9,-4,-9,31,11,-50,85,-11,9,30,39,-100,43,-17,4,54,-36,-65,-85,94,-13,-13,44,23,-27,4,77,-20,-83,39,110,-15,-25,51,38,87,-24,12,-40,40,-36,27,65,-8,75,76,47,-20,-62,-9,127,-34,-81,96,10,41,46,-58,-49,-6,19,34,33,12,43,-46,49,69,-29,-33,-8,23,18,-73,-49,8,-59,24,-72,-27,4,-89,-28,41,-50,61,70,95,28,12, 
  /* [74][0][][] */ -98,17,42,76,-16,-18,35,45,25,103,-24,-16,-64,-14,-58,-15,-5,16,-54,-83,3,-90,2,-14,-30,67,-54,-57,4,82,-53,14,-16,57,-29,-43,-49,-71,-25,23,34,31,7,-10,-6,118,31,-78,83,-27,-1,45,-17,55,-47,-1,30,58,-37,-32,11,-44,-121,73,-16,127,-3,-4,111,39,-26,2,-9,28,6,47,45,-59,-2,-7,24,-18,34,17,33,27,-14,10,-65,-8,2,25,-2,18,-34,61,3,-10,4,19,-70,59, 
  /* [75][0][][] */ -37,29,-83,5,3,53,-9,-64,11,77,-39,21,-26,50,98,-127,18,0,-10,24,16,11,9,23,5,10,66,-6,56,101,12,25,-49,-108,-48,13,-81,55,-84,20,63,11,-41,17,1,-61,31,5,-72,-78,29,-27,-64,-48,35,-116,-12,-17,8,18,-77,9,8,-91,27,40,-73,-23,-10,-37,-2,65,25,11,14,-9,-22,-21,-46,-38,-54,72,5,30,11,-58,-47,33,-95,-24,-2,80,-1,16,-12,6,39,61,-33,-68,10,-80, 
  /* [76][0][][] */ -18,-11,24,13,-9,-42,-19,-23,41,-51,63,-49,-60,30,11,-22,-53,49,-15,127,31,44,55,60,81,26,-58,39,88,-79,-17,50,21,38,-51,-36,10,-15,-75,26,80,31,-4,-16,-83,21,-1,-49,28,-33,-8,18,12,-63,2,7,41,54,-39,42,-116,27,-41,-47,-40,-68,-109,40,23,-6,-38,106,101,-22,-27,-27,-10,-119,7,-7,-66,-9,-2,-70,-29,-51,35,-81,-22,-2,-31,12,-20,-9,-40,-72,30,-8,-34,-49,14,-33, 
  /* [77][0][][] */ -34,-53,40,-91,15,55,18,-30,-49,39,39,-10,-100,-34,53,-49,-6,-127,-117,83,-11,8,-66,-81,99,-18,76,-55,30,14,59,-50,2,-111,-16,35,-64,44,-15,4,103,38,66,25,39,0,-24,98,46,34,-61,-27,65,-11,-11,92,49,-43,77,6,89,-7,8,31,-17,-42,7,-78,52,-114,29,13,-77,-8,33,-28,12,-49,-70,-1,-31,-120,12,11,-64,-52,26,3,-3,-35,-53,-2,-42,42,76,-33,-27,59,-2,106,-53,23, 
  /* [78][0][][] */ -36,32,-16,-23,85,-30,-16,-59,-26,-42,7,21,-54,-44,0,-26,-44,-21,-2,-127,39,-56,31,-21,-75,31,70,47,27,-40,15,-60,14,32,8,-36,-14,8,-89,-87,-33,-10,-8,-1,7,106,-17,32,32,-14,10,-25,54,-77,-41,-17,-47,-15,42,21,12,-8,33,85,-43,20,-36,47,-20,-6,-17,49,3,-22,42,-68,30,33,-6,9,-15,-48,10,-38,-32,-40,-32,-13,28,-42,-16,76,-38,57,-16,24,-11,-40,-21,-35,0,-19, 
  /* [79][0][][] */ -76,45,12,-18,12,-44,1,-42,-65,3,67,4,22,-24,6,78,29,50,33,-64,37,37,-51,-21,-42,-34,-6,10,-1,-9,-12,-51,-47,53,-13,1,-30,-80,-67,-38,28,59,-9,8,-73,6,29,21,-105,8,53,15,-6,-30,10,-55,22,-8,-1,29,41,-16,-21,2,-15,26,-4,-66,-51,-1,-35,-19,15,-26,69,47,60,40,5,-32,-99,52,-17,14,-12,9,-57,-33,-14,-66,1,-27,55,59,15,-127,-50,-21,6,25,-106,1, 
  /* [80][0][][] */ -1,-31,28,-49,-38,0,-38,-62,29,33,-18,36,-17,26,-59,-21,2,30,-4,-36,127,-3,-73,-18,6,0,-23,-8,19,2,39,5,1,73,-4,14,-51,-42,-2,-48,-18,-30,59,-54,71,40,19,-9,5,0,-28,38,-3,4,-84,19,-39,43,-67,-52,-31,16,8,-7,10,83,73,13,18,33,-53,-19,13,4,-39,28,6,0,-1,-74,-7,-20,-9,2,9,-30,-56,28,79,15,69,37,-18,-27,-7,-11,-29,0,7,-40,12,-17, 
  /* [81][0][][] */ -18,31,55,33,-23,-93,-17,2,-90,60,-8,-41,0,47,-52,5,-36,-7,-56,24,-11,27,60,29,-1,127,-52,-26,-37,4,48,-64,7,67,-31,-10,-23,14,31,-94,39,59,-102,-18,13,-23,-3,-6,-38,12,6,-50,18,2,40,77,-32,39,-16,25,30,8,15,76,-51,4,-71,2,17,-6,-22,100,65,6,7,-20,55,-19,82,51,-16,5,53,47,61,61,-35,-16,4,-42,8,20,18,14,-12,57,62,47,44,-41,46,-15, 
  /* [82][0][][] */ -33,39,32,-22,-11,20,-24,33,-37,41,27,45,59,54,25,-33,53,9,4,21,32,18,19,11,-16,-72,44,12,-15,-4,-21,-23,20,-14,39,-44,-1,24,48,-127,92,-39,36,1,-17,-49,2,11,25,-46,9,1,-52,-56,-29,40,-1,-37,-15,26,-6,-14,31,-11,-1,15,-61,-12,21,45,-26,33,126,8,23,-23,-54,-6,14,-7,-29,-88,-51,17,13,-43,-2,25,44,33,19,-6,-26,50,8,-25,26,0,46,0,-4,17, 
  /* [83][0][][] */ -8,12,-75,21,-17,-1,3,-46,4,-53,-57,-36,6,42,23,33,-72,-37,-41,-14,-22,17,127,-14,29,-46,14,-58,-29,62,-26,29,23,21,-5,34,-33,1,3,-24,15,-8,11,12,16,-2,-18,27,-23,46,80,47,-10,87,18,-18,-55,-94,7,42,-62,-15,-19,25,17,-45,-19,-23,-7,9,-2,4,11,37,-23,-11,-9,6,-35,-2,34,20,11,-40,-15,36,78,-27,-68,-1,32,15,57,52,19,-13,30,69,14,-28,-15,21, 
  /* [84][0][][] */ -44,-1,65,8,19,-22,-57,37,-55,13,26,-9,-19,44,21,105,-17,43,65,-127,1,-35,49,28,-1,-52,-16,2,-36,26,-17,-51,-42,20,38,-40,0,-7,-30,-31,28,26,20,-44,-33,-11,-73,42,35,22,1,11,16,4,-55,13,21,64,-18,-23,38,2,52,-9,0,70,9,40,-32,24,4,-48,37,4,-24,-45,-32,26,-14,-8,28,-35,-3,57,49,-125,19,16,-18,-6,-30,-6,11,-38,43,63,22,-54,-45,8,-51,-77, 
  /* [85][0][][] */ -49,22,-25,17,38,-19,47,11,-75,20,3,-55,-45,-3,-71,-70,6,-54,-28,-9,66,-1,-19,60,127,47,-38,76,-60,4,46,8,-32,-114,31,-7,32,-77,-46,-53,30,-7,14,-9,-79,85,-65,2,-66,-126,19,12,-39,-63,-9,3,34,10,-78,41,-84,11,16,-79,35,-16,-63,32,5,2,31,-19,17,-31,49,-65,43,39,-28,87,-9,15,-31,-8,-37,26,0,1,-66,-1,43,-46,12,29,-14,-12,-24,-34,92,-84,-3,26, 
  /* [86][0][][] */ -17,3,20,-64,5,-14,-37,34,28,-117,-54,-81,-39,-30,62,30,15,-60,18,40,35,127,54,-47,45,84,9,9,-63,0,-38,10,-30,1,-79,-6,3,-29,-5,-66,102,-29,91,-34,-78,3,-38,37,-26,41,-86,31,-49,3,-54,-20,43,6,35,-49,33,43,72,34,26,-16,2,-26,-60,36,45,-66,44,2,-80,2,43,-32,-14,41,-113,36,80,-98,-54,-83,19,35,76,-126,-4,40,86,-26,11,-31,15,-31,23,23,46,-77, 
  /* [87][0][][] */ 28,18,34,-6,43,44,21,-52,19,-39,-11,-38,-27,-26,16,39,42,-57,-17,26,23,-6,-25,-127,14,58,-2,63,1,11,6,63,7,62,0,-8,17,94,50,-23,-1,34,3,22,-1,47,21,-41,-5,43,41,16,-6,-23,-32,27,-43,72,-58,-2,-7,-5,-20,-30,-27,7,0,27,37,59,-22,25,-13,13,-48,-88,-79,-21,24,29,-85,-18,10,-14,-13,4,-7,19,41,11,-31,42,-16,-15,-32,-94,6,-6,3,21,-5,1, 
  /* [88][0][][] */ -51,1,47,52,-32,-23,33,-15,-54,-53,-5,30,-15,-34,-19,-34,78,-100,33,1,12,-44,13,23,-2,82,-85,80,-22,-34,-58,-75,-94,-40,84,-39,-44,2,-44,85,-118,-3,-2,-33,-46,-55,-37,20,-1,-101,88,-72,-12,-33,-16,-24,-25,-36,26,20,-34,-8,-22,-15,42,-16,-41,27,-58,17,-18,44,14,7,23,19,-1,-30,-56,-7,34,9,-127,-20,15,-9,-37,-69,6,-22,-25,-4,-21,-30,43,27,-60,-21,-107,21,-58,72, 
  /* [89][0][][] */ 81,22,-62,31,-15,-46,65,-9,-23,16,-9,40,-34,51,41,-11,-9,-82,46,23,5,-51,15,2,8,-66,3,48,-47,-37,-83,61,-33,65,-7,46,-5,95,-6,-3,-13,17,-90,-79,23,55,15,-15,-31,-60,20,-76,16,-5,79,-40,74,21,44,-42,40,76,-2,-9,-47,-12,21,-77,-48,-4,127,-14,5,12,-4,-2,-30,-73,-30,27,-100,4,53,87,-10,42,-10,-28,-7,8,-22,-1,62,64,41,-27,-9,31,12,7,100,84, 
  /* [90][0][][] */ -38,20,-59,52,-51,20,-7,-16,-76,36,5,-37,11,-36,127,-15,27,-18,-15,-11,56,-6,50,-6,-20,14,-15,25,-31,11,25,-38,39,-107,22,33,28,48,36,-8,48,53,-64,55,-5,54,-49,-71,116,59,-25,-13,44,4,30,29,42,-10,-5,-30,-27,104,-37,-57,27,50,3,5,-35,15,11,5,55,5,-21,37,-21,-21,81,-61,-71,-27,-14,6,52,23,14,-28,39,-23,-19,53,40,81,92,-1,34,32,57,-24,38,-51, 
  /* [91][0][][] */ -13,-11,-14,35,-46,22,-23,-16,23,-23,-64,-16,-63,-5,1,-11,-5,-19,36,-45,-127,-18,-16,40,-3,27,-47,-20,14,-27,-33,-36,-22,48,34,2,8,26,-20,37,-6,-1,-58,-13,18,72,11,24,40,-6,17,17,-54,99,-74,-48,44,-10,13,-68,28,6,15,12,21,-3,-19,-10,-40,-26,-9,25,-80,97,-12,18,75,10,-76,-38,-21,0,26,-43,19,41,-40,-1,-78,6,24,-4,-1,-8,7,68,9,13,4,39,25,-65, 
  /* [92][0][][] */ -14,110,20,30,-48,-9,-40,20,-21,-48,51,-44,2,40,-14,-11,38,12,40,-38,-37,-34,29,5,68,-9,19,13,12,-15,-48,-7,-12,20,3,26,-8,-58,4,26,-28,9,-14,-18,-43,27,15,14,23,-9,11,-69,43,-25,-28,20,51,-7,40,16,-34,-19,-1,7,-87,11,19,-33,33,-15,18,-61,-15,-14,31,127,-33,-40,20,-16,-32,-29,30,22,-16,-43,55,-35,4,4,26,5,9,-32,9,21,-6,18,-12,17,23,-8, 
  /* [93][0][][] */ 39,-9,-25,-77,-60,0,-53,7,-38,24,-39,-62,-13,-32,50,-17,-16,-23,70,13,52,-25,56,-42,-41,-40,24,-12,0,-11,32,-10,-15,-38,0,-27,24,24,34,63,-55,26,-40,-61,12,83,-79,29,36,-10,-49,38,-55,39,24,-34,-95,57,-49,5,16,-4,-4,-111,-50,-58,-23,54,21,23,5,80,-64,17,9,25,32,127,9,5,14,-63,-2,8,-67,28,27,8,28,23,-20,-2,50,51,27,35,-60,-73,-12,-1,-9,20, 
  /* [94][0][][] */ 6,-3,21,-1,-76,-25,-91,16,-18,-86,24,-14,-10,4,76,-49,15,-55,-12,-46,49,-3,-98,-27,-5,-12,-48,12,-65,98,-29,-15,-22,34,-13,47,-7,0,-29,-97,-18,-102,-78,-5,-6,-32,-86,47,7,0,37,32,-15,-20,-3,9,-1,-32,27,-31,39,127,71,42,-16,29,28,-59,-56,63,-51,29,17,-10,-20,-42,-5,37,62,2,-4,27,-53,-2,-15,92,-20,-2,-44,58,-23,22,3,-29,49,17,65,-21,66,-67,4,37, 
  /* [95][0][][] */ -48,36,-52,-37,17,28,-21,20,0,-36,13,36,-3,-2,5,20,-3,-19,20,-41,22,41,27,19,15,-1,32,-18,-36,-16,22,20,7,-8,-43,-19,17,8,7,-11,6,2,19,-22,-29,-32,-12,-23,-27,-72,-43,35,-20,-21,-1,26,23,-30,-11,-50,-127,2,13,-2,-4,-25,10,-13,-47,47,33,15,-37,13,21,38,10,-8,-30,31,-2,-3,-40,14,19,35,-18,-38,0,-26,36,13,-27,-5,1,21,47,-35,-83,45,63,45, 
  /* [96][0][][] */ -70,21,59,-45,41,0,66,50,-53,-46,12,53,50,32,-25,46,109,2,6,27,-19,52,-55,94,-30,12,27,-18,-56,3,115,10,68,-53,-37,43,-5,77,-3,-2,125,-3,-16,-35,-7,1,-10,-20,8,16,-20,53,-8,57,-10,-40,47,66,2,42,-28,24,-60,96,-83,0,-67,-25,-38,-58,-19,17,-25,-108,-62,72,-25,5,-14,22,15,-5,-9,69,48,-1,-30,70,-24,-18,-11,-27,50,44,127,-17,12,11,50,5,4,-1, 
  /* [97][0][][] */ -48,27,-29,-57,-66,41,70,-42,25,-30,-38,-20,-77,-7,21,127,127,-28,-6,-72,-27,14,84,65,75,23,-70,-78,65,-10,32,35,-61,-53,-2,-23,62,-28,-20,69,10,-48,45,14,-41,-58,0,-20,-17,-18,24,59,61,46,47,-59,-75,-7,37,29,12,-75,-10,-85,-16,26,-6,21,33,8,25,28,7,7,6,1,-50,-31,15,3,28,-67,27,12,-15,50,-5,24,-110,-56,-48,26,-22,98,-43,-34,-18,-43,-13,10,29,-105, 
  /* [98][0][][] */ -34,21,-35,32,-31,60,15,-10,127,19,-34,-21,-25,23,38,6,12,-50,-7,-14,-22,35,6,-15,53,45,-5,22,-4,-48,-66,38,-5,-29,-4,21,-28,-38,-12,39,-17,-25,-10,-37,-5,-32,21,-49,-25,62,10,-30,16,-44,-20,-11,53,-26,-21,-50,-4,55,-24,-37,-38,49,-29,13,-10,25,18,10,16,-11,16,2,3,-31,43,4,20,-11,9,14,33,26,45,-32,-19,33,-58,-47,-25,25,-5,-33,0,14,69,11,-32,-43, 
  /* [99][0][][] */ -2,-19,38,-26,-34,-16,68,65,7,1,32,11,-39,31,43,-11,-25,2,-30,-39,14,29,49,6,2,27,-21,15,-48,-49,39,-21,24,11,39,0,71,1,18,-1,45,9,22,-60,12,34,22,-32,-18,44,-12,5,29,-9,-10,-7,15,27,12,47,-21,24,-41,2,-54,27,-90,4,-24,24,39,2,45,15,24,19,-50,-78,-6,8,29,-52,13,13,0,-2,-27,60,13,-53,-78,29,-6,15,-4,40,-15,3,-127,-42,-4,-34, 
  /* [100][0][][] */ -39,19,5,-58,-81,4,46,-14,-57,-35,2,71,12,17,-45,30,-73,3,45,-4,14,-108,-35,-58,22,89,-29,22,-47,68,-13,69,-35,-22,5,-86,51,-117,-57,18,60,-11,24,42,-1,25,-38,21,39,-5,127,33,-13,-50,65,21,-84,5,-77,40,-49,24,17,-71,28,-21,10,-11,62,13,-86,25,-72,-19,20,53,100,19,-54,83,-42,-105,-33,18,20,-49,-50,-71,58,36,-1,31,43,-98,74,-56,101,-57,-9,27,11,-37, 
  /* [101][0][][] */ -48,-52,5,-54,-72,2,-48,-4,16,-11,7,-27,-11,14,29,-27,10,49,-60,-31,-20,15,-35,-127,-29,27,24,37,-13,-36,14,48,20,31,13,-30,21,92,-21,49,31,-7,51,-17,-7,-2,-11,-3,-32,-7,16,23,30,20,-1,14,-26,-27,-45,40,-7,-39,-27,28,-32,-25,-11,28,-15,-31,-8,-22,-10,-58,-7,-74,8,8,-30,5,70,20,-28,-11,-32,-11,61,1,-1,42,-6,44,-5,20,20,67,12,-16,10,13,-11,-82, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 102,1,1,102 } };
const TfArray<102, float> quant8_scale = { 102, { 0.011943792924284935, 0.0092203468084335327, 0.010735479183495045, 0.0097128134220838547, 0.014052099548280239, 0.010394087061285973, 0.012174049392342567, 0.0084982346743345261, 0.0084697036072611809, 0.0091926967725157738, 0.011752735823392868, 0.014130044728517532, 0.010943190194666386, 0.01224132813513279, 0.0099762100726366043, 0.011042935773730278, 0.0093777719885110855, 0.013737678527832031, 0.010848087258636951, 0.0085321525111794472, 0.0093097677454352379, 0.011928960680961609, 0.01153735164552927, 0.016024995595216751, 0.0098869744688272476, 0.0089172152802348137, 0.013121756725013256, 0.01267720852047205, 0.0099096810445189476, 0.0093447938561439514, 0.011056921444833279, 0.013847795315086842, 0.014175920747220516, 0.012123686261475086, 0.014332270249724388, 0.009846273809671402, 0.011967168189585209, 0.0089757209643721581, 0.009938322938978672, 0.010349408723413944, 0.011105605401098728, 0.0091758258640766144, 0.012514453381299973, 0.011682251468300819, 0.0079585285857319832, 0.0095364740118384361, 0.0095944320783019066, 0.012879369780421257, 0.012308797799050808, 0.015441234223544598, 0.011564123444259167, 0.014846674166619778, 0.010967954061925411, 0.0082889264449477196, 0.016400702297687531, 0.012049280107021332, 0.017591753974556923, 0.009861065074801445, 0.015393529087305069, 0.011097651906311512, 0.010390454903244972, 0.01412844005972147, 0.0094425296410918236, 0.0096576856449246407, 0.012686045840382576, 0.010712596587836742, 0.010512443259358406, 0.012300333008170128, 0.011923934333026409, 0.0080722356215119362, 0.012678938917815685, 0.010333348996937275, 0.014935335144400597, 0.0085754347965121269, 0.011471020057797432, 0.0094271423295140266, 0.010978722013533115, 0.0090561080724000931, 0.013134168460965157, 0.012936171144247055, 0.013337505981326103, 0.0084354979917407036, 0.013022240251302719, 0.012881625443696976, 0.013941369019448757, 0.010042146779596806, 0.010563968680799007, 0.011473589576780796, 0.010158780962228775, 0.010504617355763912, 0.011953872628509998, 0.012256855145096779, 0.013258099555969238, 0.012506047263741493, 0.013555446639657021, 0.017272556200623512, 0.011504705063998699, 0.01231727097183466, 0.014045169577002525, 0.013001990504562855, 0.010090531781315804, 0.012298674322664738, } };
const TfArray<102, int> quant8_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[102] = { 17541, 17496, 25660, -4830, -589, 21284, 21418, 23120, -5300, 10894, -911, 15954, -428, -1769, -3923, -438, -353, -1205, 62, 14029, 19543, 17576, 21087, 23503, 326, -5642, 17922, 14801, 21650, 13724, -3584, -585, -7096, 30064, 14319, 119, -367, -189, -235, 26010, -442, -390, 18678, 15438, 16326, 15698, 16726, -266, 290, 19996, 24049, 14352, 4301, -1103, 17738, 19551, 20954, 20643, -228, -481, 16422, -632, -127, 25843, 21017, 20782, -5461, -150, 18042, 12658, -1088, -1087, -2823, -510, -1593, 16545, 37, 20705, 27876, 1396, 28400, 19836, -2683, -331, 17734, 76, 14068, -1015, -555, -107, 9518, -6748, -1786, -316, -659, -8834, -9102, 13489, 24211, 16331, 19298, -66, };
const TfArray<1, int> tensor_dimension9 = { 1, { 102 } };
const TfArray<102, float> quant9_scale = { 102, { 8.5945452156011015e-05, 0.00013010310067329556, 9.4885443104431033e-05, 0.00014720315812155604, 6.8000321334693581e-05, 8.1446749391034245e-05, 0.00012171093112556264, 9.9484765087254345e-05, 7.6551397796720266e-05, 0.00013547104026656598, 0.00020877089991699904, 0.00012604723451659083, 6.5710788476280868e-05, 0.00015117792645469308, 0.00011125087621621788, 7.7661687100771815e-05, 0.00010885901428991929, 0.00010029838449554518, 0.00011535899102455005, 0.00013868423411622643, 0.00014839861250948161, 0.00014462121180258691, 0.00015870212519075722, 9.41083999350667e-05, 7.9923462180886418e-05, 0.0001455811143387109, 0.00011991403152933344, 0.00013998155191075057, 0.00012255637557245791, 0.00017897288489621133, 7.5181938882451504e-05, 6.1190228734631091e-05, 0.00011733278370229527, 7.8655015386175364e-05, 0.00017643725732341409, 0.00027608248637989163, 0.00017920255777426064, 7.3148868978023529e-05, 0.0001126456045312807, 8.2288366684224457e-05, 6.8020795879419893e-05, 8.4397899627219886e-05, 0.0001436848979210481, 0.00016004013014025986, 0.00016606204735580832, 0.00019339352729730308, 9.6830990514717996e-05, 0.00013535784091800451, 7.6127573265694082e-05, 0.00013824534835293889, 0.00010859586473088712, 8.5157313151285052e-05, 0.00045002857223153114, 6.5601379901636392e-05, 0.00015268809511326253, 9.7365882538724691e-05, 0.00011608025670284405, 0.00017216557171195745, 9.1074594820383936e-05, 0.00014362127694766968, 0.00020370040147099644, 0.00020530122856143862, 0.00014462381659541279, 0.00010312925587641075, 0.00013542949454858899, 9.2809867055620998e-05, 5.818522913614288e-05, 0.00011121630086563528, 7.1674563514534384e-05, 0.00011206833005417138, 0.00015204238297883421, 0.00012318577500991523, 6.225636025192216e-05, 0.00019567414710763842, 0.00012329597666393965, 9.635380411054939e-05, 0.0001030038547469303, 0.000136839400511235, 8.1376223533879966e-05, 0.00017976282106246799, 8.6901185568422079e-05, 8.7083084508776665e-05, 9.4357885245699435e-05, 7.8829143603798002e-05, 0.00013421129551716149, 6.6263564804103225e-05, 0.00012394206714816391, 0.00010715336247812957, 6.8168839788995683e-05, 7.2877890488598496e-05, 0.00025954254670068622, 0.00011274329881416634, 0.00019530720601323992, 0.00012939628504682332, 0.0001918496418511495, 0.00016528138075955212, 8.709297253517434e-05, 0.00012455896649044007, 6.9400070060510188e-05, 0.00011474522762000561, 0.00015254778554663062, 6.469530489994213e-05, } };
const TfArray<102, int> quant9_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*102] = { 
  /* [0][0][][] */ -127,-49,-118,57,51,-45,-99,-121,40,-109,62,-60,40,-22,10,43,46,-61,64,-83,-117,-110,-66,-28,42,54,-52,-93,-43,7,16,-7,37,-70,-127,39,44,55,-123,-66,-34,15,-99,-60,-64,-31,-32,-127,-14,-127,-87,-127,-23,70,-31,-90,-50,-21,17,43,-73,-52,63,-22,-102,-115,82,-62,-125,-127,31,88,45,52,105,-71,8,-119,10,58,-66,-97,13,-102,-110,55,-99,29,56,38,-23,-84,5,71,73,81,122,-64,-111,-127,-127,72, -81,-57,-127,127,127,-52,-103,-104,127,-88,13,-31,73,87,74,42,127,81,127,-107,-127,-127,-127,-98,69,44,-95,-61,-127,-127,92,117,67,-125,-102,22,127,127,34,-102,83,-12,-125,-125,-127,-127,-34,41,47,-117,-127,-78,-127,127,-85,-50,-60,-117,81,58,-122,41,64,-62,-91,-97,127,95,-93,-70,37,83,117,21,124,-69,59,-127,-71,65,-83,-121,28,127,-84,101,-39,6,127,95,-13,14,38,109,28,80,48,-127,-127,-112,-80,66, -98,-49,-120,38,72,-50,-106,-127,19,-127,-26,-72,43,-35,8,49,-2,-69,36,-50,-123,-101,-53,-27,40,39,-38,-77,-77,4,-51,-49,51,-84,-110,40,50,47,-76,-82,9,0,-107,-48,-75,-34,-26,87,0,-109,-88,-114,-24,80,-40,-65,-52,-22,53,-127,-74,23,-127,-13,-99,-127,49,23,-127,-98,11,76,48,-127,100,-48,-127,-112,5,66,-82,-75,-94,36,-83,56,-127,11,58,35,-37,-88,7,62,-127,94,99,-38,-92,-106,-114,46, 
  /* [0][1][][] */ -97,-127,-80,94,92,-64,-127,-37,118,-56,-84,-56,70,83,71,66,76,68,86,-127,-86,-123,-34,-111,94,16,-92,-127,-58,-24,102,123,63,-127,-51,47,-25,101,64,-91,127,76,-101,-74,-73,-57,-84,-111,98,-120,-80,-92,-9,71,-73,-106,-72,-45,96,57,-68,-63,97,-87,-127,-64,123,100,-97,-76,69,44,44,42,-12,-98,82,-71,-84,38,-121,-123,36,107,-29,55,-68,32,79,48,-29,78,-12,-19,38,52,40,-44,-81,-101,-116,84, -60,-61,-123,57,104,-88,-61,-51,117,-30,127,-66,127,127,127,115,47,127,75,-56,-104,-108,-116,-75,127,127,-112,-69,-107,-103,127,111,82,-79,-106,-36,-54,126,112,-104,84,97,-127,-127,-115,-98,-127,75,122,-98,-107,-33,-60,119,-127,-96,-113,-127,73,59,-127,36,27,-77,-92,-22,92,109,-61,-27,127,77,127,60,76,-39,71,-68,-127,-90,-103,-115,69,89,-122,127,-41,127,115,127,-127,84,127,127,33,-2,127,-113,-104,-48,-47,127, -79,-98,-67,87,69,-66,-106,-41,82,-73,40,-64,81,84,48,39,127,79,100,-122,-87,-111,-53,-98,92,29,-83,-115,-57,-14,80,127,61,-120,-51,-127,-11,109,87,-121,98,86,-79,-66,-67,-48,-98,74,106,-109,-70,-89,-11,65,-61,-114,-63,-73,81,61,-78,54,-119,-89,-108,-71,123,67,-91,-73,70,54,66,48,-3,-124,109,-79,-86,52,-127,-127,55,90,-26,95,-84,12,78,56,-43,77,-9,22,-35,58,5,-80,-85,-88,-81,91, 
  /* [0][2][][] */ -40,-76,-52,36,-51,-115,-57,-123,-12,-68,98,-127,41,-69,-45,76,25,-3,-55,-104,-50,6,-22,-84,22,35,-70,-38,-20,7,40,102,78,-41,34,63,-20,30,-38,-88,26,28,-35,30,-50,0,-41,-108,20,-42,-22,-123,4,-71,-83,-127,-69,-27,-91,25,-38,-127,37,-80,-36,-127,23,-127,-71,-61,-121,-127,14,-75,-49,-127,48,-69,-114,4,-71,-112,72,31,-127,39,-72,61,-22,3,4,72,41,-64,36,127,33,-39,-32,-3,-76,69, -91,-97,-75,85,17,-127,-62,-111,82,-43,-3,-96,113,67,-37,127,70,83,102,-98,-9,-15,-54,-127,57,28,-127,-35,-35,-50,105,125,127,-46,0,-32,-111,89,127,-127,91,127,-93,-45,-44,-27,-64,52,127,1,-66,-60,39,99,-62,-103,-127,-111,127,70,-67,40,44,-127,-89,-94,102,115,-76,-62,-14,-31,115,-63,-111,-74,92,-36,-124,-127,-87,-127,127,97,-104,59,-27,66,63,32,-106,127,59,-87,41,3,63,-31,-125,-40,9,91, -31,-61,-36,39,-32,-111,-82,-105,-4,-68,-76,-91,25,-57,-41,81,-20,9,-69,-68,-53,10,-6,-52,30,12,-69,-35,17,-10,48,74,27,-47,23,-33,-45,16,6,-110,56,37,-40,19,-50,-8,-56,55,35,-58,-30,-98,-2,-7,-81,-111,-89,-16,-38,-5,-51,42,-86,-62,-32,-123,-3,30,-83,-47,-87,-126,29,-81,-127,-59,28,-32,-112,3,-80,-97,70,64,-93,25,-86,72,-33,22,16,69,23,-63,-79,75,41,-23,-38,-3,-72,81, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,102 } };
const TfArray<102, float> quant10_scale = { 102, { 0.00424573989585042, 0.0064271450974047184, 0.0046873791143298149, 0.0072718947194516659, 0.0033592430409044027, 0.0040235021151602268, 0.0060125687159597874, 0.0049145873636007309, 0.0037816697731614113, 0.0066923238337039948, 0.010313366539776325, 0.0062267836183309555, 0.0032461392693221569, 0.0074682501144707203, 0.005495837889611721, 0.003836518619209528, 0.005377679131925106, 0.0049547804519534111, 0.0056987805292010307, 0.0068510565906763077, 0.007330950815230608, 0.0071443459019064903, 0.007839948870241642, 0.0046489927917718887, 0.0039482512511312962, 0.007191765122115612, 0.005923801101744175, 0.0069151450879871845, 0.0060543343424797058, 0.0088413320481777191, 0.003714017802849412, 0.0030228218529373407, 0.0057962867431342602, 0.0038855893071740866, 0.0087160710245370865, 0.013638585805892944, 0.0088526783511042595, 0.0036135835107415915, 0.0055647380650043488, 0.004065078217536211, 0.0033602546900510788, 0.0041692899540066719, 0.0070980917662382126, 0.0079060466960072517, 0.0082035316154360771, 0.0095537174493074417, 0.0047834897413849831, 0.0066867317073047161, 0.0037607324775308371, 0.0068293754011392593, 0.0053646792657673359, 0.0042068054899573326, 0.022231591865420341, 0.003240734338760376, 0.0075428527779877186, 0.0048099136911332607, 0.0057344110682606697, 0.0085050482302904129, 0.0044991215690970421, 0.0070949490182101727, 0.010062881745398045, 0.010141963139176369, 0.0071444744244217873, 0.0050946264527738094, 0.0066902716644108295, 0.0045848446898162365, 0.0028743736911565065, 0.0054941298440098763, 0.0035407522227615118, 0.0055362205021083355, 0.0075109549798071384, 0.0060854265466332436, 0.0030754890758544207, 0.0096663814038038254, 0.0060908705927431583, 0.0047599165700376034, 0.0050884317606687546, 0.0067599215544760227, 0.0040200180374085903, 0.0088803553953766823, 0.0042929532937705517, 0.0043019391596317291, 0.0046613174490630627, 0.0038941912353038788, 0.0066300919279456139, 0.0032734465785324574, 0.0061227874830365181, 0.0052934191189706326, 0.0033675679005682468, 0.0036001971457153559, 0.012821505777537823, 0.0055695641785860062, 0.0096482541412115097, 0.0063922284170985222, 0.0094774495810270309, 0.0081649664789438248, 0.0043024276383221149, 0.0061532626859843731, 0.0034283914137631655, 0.0056684603914618492, 0.0075359218753874302, 0.0031959740445017815, } };
const TfArray<102, int> quant10_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[102] = { 46397, 20441, 31441, 31347, 8083, 9355, -1947, 9960, 4356, 4535, -27772, 23521, 9635, 47333, -16708, 4052, 10316, -16366, 26048, -25832, 12420, -9907, -1354, 17161, 179, -11946, 2962, -24450, 28903, 13354, -19953, -34595, 19134, 33142, -3892, 6970, -22496, 199, 13747, 17636, -300, -1196, 10285, 10577, -13247, 25806, 1998, -4786, 24198, -6428, 16039, -7529, 42897, -16650, 30228, 7986, 6513, 10546, -34521, -20216, 2959, -493, -7404, 6830, -10220, -7662, -2007, -13917, 12511, 10322, 26887, -24852, 9310, -2198, 680, -7033, -8753, -7620, 4346, 742, 20101, 26846, 7909, -12412, -18818, -17949, 16256, 45993, 4808, -22902, -30536, 30704, -25309, 14024, -13631, -24207, -24556, 3604, -13823, 4800, 7223, 14407, };
const TfArray<1, int> tensor_dimension11 = { 1, { 102 } };
const TfArray<102, float> quant11_scale = { 102, { 5.6439792388118804e-05, 4.893698132946156e-05, 5.5857370170997456e-05, 6.0967748140683398e-05, 7.4482231866568327e-05, 5.7030832977034152e-05, 6.2044528021942824e-05, 7.954403554322198e-05, 8.0262972915079445e-05, 4.8324116505682468e-05, 8.5852261690888554e-05, 5.026693906984292e-05, 9.0655295934993774e-05, 6.6251173848286271e-05, 8.2394522905815393e-05, 7.4331168434582651e-05, 9.0741676103789359e-05, 7.8547513112425804e-05, 6.2851941038388759e-05, 4.4957650970900431e-05, 4.8606729251332581e-05, 4.7112225729506463e-05, 6.0692469560308382e-05, 6.37585180811584e-05, 6.3806779508013278e-05, 6.2184073613025248e-05, 7.5870542787015438e-05, 5.6898341426858678e-05, 5.0236212700838223e-05, 3.4038679586956277e-05, 7.0682137447874993e-05, 0.00010888981341850013, 8.0273595813196152e-05, 5.0851111154770479e-05, 4.9298836529487744e-05, 8.7278102000709623e-05, 6.1486753111239523e-05, 7.3604576755315065e-05, 8.204004552680999e-05, 6.2074774177744985e-05, 6.783161370549351e-05, 0.00012079693260602653, 5.2307463192846626e-05, 4.0003971662372351e-05, 3.8974339986452833e-05, 4.0983533835969865e-05, 7.7710814366582781e-05, 6.9535664806608111e-05, 7.9255543823819607e-05, 4.6974673750810325e-05, 5.2865969337290153e-05, 6.5266147430520505e-05, 4.7032302973093465e-05, 0.00011573468509595841, 5.5576882004970685e-05, 5.5152813729364425e-05, 5.0733826356008649e-05, 4.8242851335089654e-05, 9.7801792435348034e-05, 0.00010510923311812803, 3.7201501982053742e-05, 7.7907679951749742e-05, 8.2262384239584208e-05, 4.0136172174243256e-05, 5.761588181485422e-05, 0.00013074031448923051, 8.4233506640885025e-05, 0.0001153389603132382, 7.6693504524882883e-05, 7.400777394650504e-05, 8.2557846326380968e-05, 9.8646727565210313e-05, 9.2552640126086771e-05, 8.6036518041510135e-05, 5.65284353797324e-05, 7.9954028478823602e-05, 8.9200410002376884e-05, 3.9898932300275192e-05, 7.0663445512764156e-05, 8.8465974840801209e-05, 7.0509988290723413e-05, 4.5146407501306385e-05, 8.0814526882022619e-05, 9.5748036983422935e-05, 5.1063325372524559e-05, 9.9815144494641572e-05, 6.2740982684772462e-05, 7.2686139901634306e-05, 5.6588651204947382e-05, 0.00010500257485546172, 4.569317025016062e-05, 6.9763387728016824e-05, 7.3434508522041142e-05, 0.00012107723887311295, 8.3860737504437566e-05, 8.1936945207417011e-05, 7.1586720878258348e-05, 6.1359416577033699e-05, 7.0829453761689365e-05, 8.5578278230968863e-05, 4.6160876081557944e-05, 6.8307825131341815e-05, } };
const TfArray<102, int> quant11_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[102*1*1*51] = { 
  /* [0][0][][] */ 83,-56,127,1,-8,-43,-44,2,-71,-26,24,-98,11,12,-28,28,43,-104,-14,-23,25,115,51,-102,20,63,-82,-31,38,-66,-55,-53,-17,-76,-47,-102,-50,61,-85,-33,68,-88,49,-2,76,-36,-70,-82,-43,-42,61, 
  /* [1][0][][] */ -37,-21,89,-31,-62,-10,11,20,72,22,-30,-16,-22,-45,-25,-89,-45,-29,27,33,15,35,55,-79,-27,49,-4,86,-108,15,-18,27,-99,-11,19,-25,-20,-8,-25,-1,127,-18,78,-13,-25,39,-62,-5,43,40,1, 
  /* [2][0][][] */ -48,2,-20,-62,45,-26,-12,-27,-41,-17,-70,-70,-3,35,6,-7,-35,-53,-40,-13,-7,127,4,-1,-72,27,-43,-101,-26,-24,-17,24,67,58,28,14,8,9,32,27,75,48,-79,20,6,49,-2,6,-84,31,-67, 
  /* [3][0][][] */ -51,76,4,-35,-127,-35,20,-66,-31,46,-16,63,-8,-22,-3,-79,-12,12,27,-16,-12,-20,-41,-18,-79,-49,-120,-4,32,-19,-7,31,55,73,27,-23,55,32,-59,16,-9,-33,-22,6,44,-4,-29,11,-31,9,16, 
  /* [4][0][][] */ -119,62,41,-50,-30,-44,-8,21,-48,-19,23,76,40,38,73,-44,9,11,83,127,13,67,-8,-91,-110,-80,-7,-69,34,-72,49,-105,-20,30,25,19,-20,-85,0,35,29,80,-77,-25,-14,5,-65,58,-28,-49,-108, 
  /* [5][0][][] */ 8,120,15,-32,83,103,50,-30,-95,115,41,-109,-53,-14,-73,-60,74,44,-67,120,44,-27,40,-15,-34,-50,62,-88,-95,-52,-6,25,9,-54,114,62,14,65,-3,-7,29,17,83,-31,-25,-105,-11,-60,17,-127,-122, 
  /* [6][0][][] */ -2,-3,12,-49,20,2,17,35,55,53,-15,2,-32,33,14,51,-23,37,-53,-40,1,24,-16,23,43,1,5,-15,-28,-54,127,66,-18,4,-44,22,7,-41,12,-47,-28,-37,-17,33,7,12,-40,6,54,67,-110, 
  /* [7][0][][] */ 2,-20,18,-55,18,13,1,127,14,-61,-44,-54,-94,-87,-9,-8,-32,40,-27,6,-65,50,-7,-8,-49,-40,9,55,5,-8,55,-1,9,7,25,15,70,-36,2,0,99,-10,-17,2,-13,-50,37,-31,-30,43,59, 
  /* [8][0][][] */ 25,12,34,55,-16,-5,-22,-23,19,32,-33,-19,-15,-3,5,39,-35,58,5,50,29,-13,10,-34,-24,7,-34,-18,-127,-18,-2,60,-73,23,18,-58,-39,-14,10,12,32,12,19,0,26,52,-23,-22,40,20,-3, 
  /* [9][0][][] */ 82,-48,13,-28,-9,-17,71,-116,43,68,-77,19,-48,100,-100,-29,33,-12,-69,95,-63,-27,-54,55,-62,-46,-94,-27,30,-7,29,9,-5,34,26,-69,-7,-2,68,-40,-70,91,-21,-15,37,88,127,-2,55,69,51, 
  /* [10][0][][] */ -57,127,60,-44,-13,-30,-8,34,61,45,-19,-68,46,38,34,27,10,58,-50,11,-10,-98,-10,-28,97,-21,43,-5,-22,60,-2,-47,27,56,-28,108,46,-98,-26,-13,3,-36,40,-17,17,-44,-10,117,73,32,-34, 
  /* [11][0][][] */ -20,-24,-88,-60,70,22,50,-6,80,127,-81,-53,-31,-64,-24,-35,20,77,-40,69,73,52,-53,-8,63,2,50,-36,17,-101,-27,23,-45,17,-85,-59,-32,53,40,-43,-106,-101,12,-80,-30,-87,-8,40,5,-4,4, 
  /* [12][0][][] */ 20,-36,32,15,35,-69,-96,-15,19,-78,28,54,71,78,-28,14,13,50,22,115,-85,60,34,32,13,-15,-53,-15,16,-7,71,-62,-49,-85,-40,-15,86,-1,-17,-27,-35,-127,-18,4,-16,-17,-13,-56,9,-66,33, 
  /* [13][0][][] */ -87,-77,-69,-94,88,-28,-41,-25,-22,33,-14,-40,-23,-125,-59,-45,-8,-86,54,-32,-35,1,-40,-38,-9,75,-127,-109,-1,-21,57,10,16,80,-14,-49,-46,12,-51,59,34,-66,25,-38,-9,65,-38,27,33,-2,-89, 
  /* [14][0][][] */ 48,-61,-35,-6,-3,0,-31,-70,-33,-5,30,18,-14,39,-5,-29,1,127,50,9,59,57,-95,-64,100,-32,-41,21,-2,-23,11,7,18,34,-56,30,-8,-9,16,47,-7,-23,64,-14,3,-23,38,77,28,11,3, 
  /* [15][0][][] */ 2,61,16,-127,41,11,-46,6,-70,-54,3,-2,0,-24,25,-60,-28,-21,54,86,10,71,-5,-11,-62,104,-22,-67,37,66,35,-1,-57,90,-55,-47,11,57,81,18,11,-28,54,-20,-48,-65,-71,15,32,-7,42, 
  /* [16][0][][] */ -6,64,-10,29,-26,14,-94,-21,34,-127,-30,1,-47,-63,35,-30,-8,33,5,117,-61,9,5,-51,-58,-7,29,6,-86,-6,-39,24,-31,2,15,3,-19,33,-31,-10,-81,63,114,-61,22,44,1,54,-64,21,-8, 
  /* [17][0][][] */ -8,-39,-4,127,68,-51,98,26,72,12,-90,8,33,3,-40,-36,9,-64,-14,72,-2,-44,24,-30,40,78,-39,-41,-47,-37,53,-80,73,-46,79,-9,-7,-8,23,-51,13,0,26,30,24,-69,-28,122,21,37,-43, 
  /* [18][0][][] */ -46,88,11,43,-17,60,-88,45,8,111,-127,-27,-27,0,26,28,54,-42,22,-92,-26,1,-15,-29,-52,-34,23,-23,-124,-13,-85,-45,-52,20,12,-52,-83,98,-45,6,53,-12,40,30,-21,7,9,-71,-73,-47,31, 
  /* [19][0][][] */ 37,-26,-42,26,21,-3,-40,5,-23,16,105,-5,-48,13,-6,56,34,4,42,42,-20,127,-21,-71,5,-7,-20,92,41,21,48,1,-23,84,39,42,5,-62,3,2,104,-30,-24,-19,71,41,15,-44,-23,-17,-20, 
  /* [20][0][][] */ 17,-16,41,127,-24,11,2,-21,-98,19,-23,-6,1,-92,30,31,-17,-26,-24,-16,12,4,81,32,34,3,-16,59,16,16,-19,-3,-10,17,-6,-40,-83,-63,15,30,91,17,-8,-16,-37,-45,8,48,32,22,-109, 
  /* [21][0][][] */ 12,-4,6,-65,-16,-61,85,23,-26,5,83,-5,-4,-35,-60,30,31,-96,-69,24,-100,33,33,-47,85,59,-5,99,40,31,16,-17,-74,97,-7,83,-125,30,105,-17,-23,19,14,4,-27,-49,-4,108,19,-9,-127, 
  /* [22][0][][] */ -22,-4,15,13,-30,1,33,14,-21,-29,-59,-35,26,-3,-11,31,-67,-19,47,1,-16,-3,-33,13,58,11,36,-11,9,-24,127,26,-28,-14,33,66,-46,66,20,-9,-12,67,1,20,-9,-10,29,-11,-34,15,-2, 
  /* [23][0][][] */ -3,10,-27,16,24,40,-5,-25,-33,-10,-10,-7,-8,-15,24,14,104,5,-22,9,-24,45,19,-52,-6,-41,-44,24,127,-13,1,-8,-26,3,-44,-19,-4,-57,-7,22,-82,38,6,-14,8,102,-30,-11,-46,6,24, 
  /* [24][0][][] */ -17,-59,56,-33,119,-105,27,-41,-25,-127,24,13,69,-34,15,102,20,-12,17,-47,90,51,-89,-19,19,7,18,61,113,5,-4,-78,82,13,-21,-1,-1,-1,-50,53,-25,-35,15,66,2,-84,-66,-95,-19,9,38, 
  /* [25][0][][] */ -58,50,47,12,-38,-36,-43,-46,-67,-13,31,-26,0,-24,50,39,40,127,92,-68,82,47,2,-14,-9,-53,63,0,-11,33,36,22,61,99,-33,-1,18,57,-81,89,-53,-126,27,4,3,-82,-65,86,-39,-15,113, 
  /* [26][0][][] */ 0,-4,-18,-55,52,26,9,-23,15,13,23,-50,41,-16,-50,-20,5,99,-10,8,-22,-90,-36,-34,-17,-77,16,42,35,-27,127,82,-48,29,-7,-4,43,65,-36,23,26,-13,-20,45,-6,-1,-14,0,0,-10,-5, 
  /* [27][0][][] */ -13,27,10,-43,-5,34,31,26,-4,-30,22,78,69,-19,0,-60,4,51,-19,42,-38,34,60,58,57,-41,-24,127,-16,16,44,-1,25,6,-19,-101,3,9,10,-48,45,54,9,41,51,11,33,6,-29,38,-31, 
  /* [28][0][][] */ -16,-11,7,0,39,46,34,-25,15,-7,127,-42,11,-77,-20,40,-5,-39,6,-13,3,-1,-73,43,34,12,0,-22,-117,-67,-73,18,22,-2,-117,-14,-39,37,-73,8,-58,24,-14,2,50,31,-66,83,-4,-13,-40, 
  /* [29][0][][] */ -12,22,3,23,17,-16,20,-59,96,59,36,20,-25,110,62,88,30,-52,42,-45,-60,-23,-101,74,7,-52,35,-56,-45,108,-28,-2,-31,27,-8,80,4,44,127,-52,-13,-1,25,-35,-85,109,-124,-90,-29,-25,-29, 
  /* [30][0][][] */ 25,-127,9,44,-12,1,97,-9,17,-58,-85,27,-13,50,46,-34,107,18,-21,41,39,-49,-10,37,76,18,-74,-22,-85,23,76,-41,-5,43,57,32,84,-52,111,89,-5,2,-20,-63,-43,48,66,114,-75,28,-47, 
  /* [31][0][][] */ 34,67,-8,24,46,29,52,4,4,46,-52,59,47,21,-57,60,9,-10,9,106,30,10,80,1,-50,40,-75,32,5,-8,-36,-7,-19,16,4,65,2,23,76,49,-42,127,25,-49,22,-38,-11,-50,-3,57,5, 
  /* [32][0][][] */ 6,16,-1,26,25,-26,2,1,74,77,-80,-127,-71,-71,-24,-39,-7,-51,10,46,-88,-121,44,29,11,5,44,-7,-4,53,-57,35,91,20,-19,-1,55,6,-20,-14,0,29,27,13,-1,25,4,-51,-100,32,-16, 
  /* [33][0][][] */ -11,-43,-30,60,9,2,-21,-30,1,26,-127,7,0,-40,3,-55,-6,16,-127,-54,0,19,-18,1,-23,89,66,50,6,-59,-28,65,40,-58,19,61,-26,46,-44,-101,-88,-2,-68,33,55,28,55,54,24,-49,-35, 
  /* [34][0][][] */ -18,21,51,0,21,-39,29,-19,11,31,-11,7,74,41,71,-41,-5,58,-21,61,-36,85,80,51,-51,42,-40,-55,-17,-27,-46,-29,101,15,44,-127,64,2,-77,69,-61,10,0,6,61,-39,15,-5,68,-42,54, 
  /* [35][0][][] */ 2,9,41,58,-34,-10,-9,38,66,52,-37,-49,-22,-52,40,-127,-11,-60,-3,-10,-30,4,-28,-51,-44,29,26,54,17,-21,-40,-36,-32,53,22,-9,4,-10,15,19,52,26,41,31,12,22,-15,-42,-20,-81,-20, 
  /* [36][0][][] */ 43,28,50,27,16,110,30,-56,48,57,-12,30,4,18,28,31,0,-68,-65,44,119,-37,-14,-30,127,27,-59,-32,-100,-21,-10,-28,-85,23,-29,52,74,15,83,-38,119,0,38,26,-40,-43,23,90,104,-48,-1, 
  /* [37][0][][] */ -22,0,40,-22,60,23,-28,-22,-44,-127,29,16,-14,-9,50,22,94,20,-35,5,-45,31,20,-109,-25,26,-22,0,51,-12,-56,109,-2,-17,24,21,-11,-77,-25,-62,-67,44,71,-9,27,98,-49,-17,-3,-9,38, 
  /* [38][0][][] */ -78,-53,-23,47,9,28,35,-93,-39,16,23,-27,43,-81,47,-98,57,-47,-60,127,41,22,11,12,93,19,-78,-71,-41,48,58,26,0,-39,53,-48,60,-98,44,46,4,3,23,7,-30,-8,6,-117,84,-54,-52, 
  /* [39][0][][] */ -9,11,16,46,1,31,-44,-25,21,-15,85,-50,8,38,-26,7,-53,70,34,-28,35,-42,4,9,87,25,-61,-111,5,36,-39,-24,-9,-79,127,-47,2,16,-16,-25,-72,42,4,-8,14,-14,-67,-27,-30,-57,38, 
  /* [40][0][][] */ 47,12,36,-74,-6,32,-15,103,-25,54,-7,-15,29,-2,-31,64,12,-68,11,-31,40,-3,-37,86,10,31,-101,27,-13,17,-57,36,-54,-83,49,-71,-7,127,25,-52,84,11,97,-13,-1,56,-39,-91,24,-16,17, 
  /* [41][0][][] */ -2,28,20,-26,3,-20,34,-44,-17,20,77,14,28,0,-28,-21,20,-21,127,-12,-18,-11,-2,20,-16,-5,26,15,-23,16,20,43,-64,-45,-30,27,22,-22,14,-6,5,-22,-51,15,-11,12,-14,-44,41,2,0, 
  /* [42][0][][] */ -18,50,12,-40,-4,-39,71,35,-37,-6,4,-36,42,-5,35,23,-32,63,-41,-46,-30,-38,-1,-9,26,26,-56,50,25,-17,-19,26,-1,-15,7,-62,-47,127,35,-17,-13,12,-5,-7,-8,35,-26,-22,2,21,-88, 
  /* [43][0][][] */ 41,-68,15,15,18,-44,-110,-69,122,-47,15,7,-84,3,85,9,-63,11,90,11,1,13,75,-14,-30,-32,-42,27,-7,2,26,40,20,84,3,14,-85,-1,22,24,-17,76,-55,39,0,-93,109,-127,15,-22,-62, 
  /* [44][0][][] */ 22,41,91,29,-54,34,27,11,-52,-19,13,4,-12,-50,62,91,42,127,39,-76,38,48,68,-18,-29,-42,-32,47,9,0,37,-5,-5,-8,-3,-9,-43,29,43,9,-50,-12,-12,30,74,4,83,56,-40,-38,-60, 
  /* [45][0][][] */ 27,17,-23,-56,-79,10,-1,-3,12,-25,25,30,6,-41,-24,-41,-17,73,-14,0,-21,-122,23,-53,41,-6,44,-20,-2,-23,3,7,7,54,-127,31,9,17,60,-41,3,59,-6,-60,92,-23,31,9,39,-75,-58, 
  /* [46][0][][] */ 12,-29,12,-29,36,-17,-35,2,16,23,21,59,8,-10,-44,-30,-22,7,127,-29,4,-9,62,12,45,25,37,-1,39,3,44,75,32,46,-10,9,20,-32,-83,-16,-68,-29,25,14,35,-53,27,-30,-57,20,-48, 
  /* [47][0][][] */ 7,-47,-31,-3,10,-18,-15,20,127,47,60,-11,-31,-40,-8,-33,-18,-82,7,84,1,63,-32,-15,-4,12,-5,20,26,1,62,13,-36,-7,-6,11,-48,-81,10,-11,1,30,23,-7,55,28,7,-38,54,-9,18, 
  /* [48][0][][] */ 5,9,-46,-89,66,-70,43,27,-92,64,-35,-20,4,39,6,59,127,-1,-8,25,-100,-3,29,-21,-17,71,-80,28,30,5,-61,-32,-21,20,-36,-5,-35,73,-111,-18,-29,-62,-22,32,27,-83,-9,-98,-5,3,-37, 
  /* [49][0][][] */ 27,-16,43,-39,-10,15,-59,52,36,-20,48,-12,68,-8,4,100,-59,127,-9,12,-71,62,-26,-19,-20,-21,-15,30,39,-35,5,14,41,53,19,14,-51,8,45,30,31,-125,40,9,-74,37,-5,-14,-33,-7,-5, 
  /* [50][0][][] */ 59,16,8,-7,-28,-21,-26,6,6,60,-43,-24,32,-7,55,0,-42,1,84,-31,45,-91,106,-5,-38,-1,-37,19,59,53,3,-45,-34,115,27,-38,-113,-75,-12,3,-28,-16,-9,38,101,18,16,36,-121,54,-127, 
  /* [51][0][][] */ -105,-86,8,66,53,-83,28,-39,26,75,12,100,8,-44,48,8,-21,28,25,51,25,33,-127,-60,88,20,-7,-24,78,-6,96,29,92,-48,-63,-17,17,-56,-30,-1,-16,-95,6,30,53,-85,105,-57,57,65,-2, 
  /* [52][0][][] */ -10,0,14,-58,24,-33,27,-56,9,3,-127,47,5,-51,-50,22,28,-98,-50,9,-5,27,-16,28,74,-6,-72,-78,-14,28,-75,-16,44,55,-33,-96,-11,31,-1,2,-70,23,-16,48,21,-48,-20,22,20,-11,-36, 
  /* [53][0][][] */ 4,-29,2,7,34,13,51,-31,-9,36,20,-3,-7,-59,-44,-28,18,51,32,-21,28,42,-48,21,-1,-20,-15,39,15,30,-49,-10,4,8,-2,21,-16,34,6,4,40,127,54,20,-19,-42,16,-2,-21,-27,18, 
  /* [54][0][][] */ -4,53,87,36,-37,-12,-25,30,-3,-19,76,-21,6,60,-21,31,-4,-124,-22,47,-15,-10,68,-82,27,9,0,-87,-52,-42,-28,42,69,13,-39,-127,23,21,-67,-21,-43,-20,-81,-1,-14,-5,-12,19,11,29,-16, 
  /* [55][0][][] */ -6,-127,44,71,-3,-11,66,31,-4,27,-86,67,-28,-48,-16,-36,33,-72,-15,63,59,90,3,-10,-5,15,-63,76,-97,-44,42,-23,14,58,7,-7,-32,-30,-42,65,-78,-16,28,28,-12,-39,119,3,56,-11,41, 
  /* [56][0][][] */ -6,24,-127,-56,33,62,-66,-47,61,60,-3,-22,29,-49,37,3,83,-35,-12,-106,98,-32,0,45,32,26,40,-43,25,-5,-18,3,67,17,91,15,-23,-25,-1,112,20,-110,-36,17,-45,20,37,108,-21,52,-11, 
  /* [57][0][][] */ 47,34,36,-114,9,31,-3,-28,11,-1,3,-51,17,28,20,-3,-31,29,-40,25,-3,-7,14,0,-44,-32,-20,127,47,-24,-5,-7,-14,-16,34,44,27,-34,-5,21,-23,-7,5,30,82,-18,50,-79,54,-5,-10, 
  /* [58][0][][] */ -74,-15,7,11,40,-45,37,30,-20,61,56,30,-24,-25,-30,127,35,18,21,82,-8,8,-6,46,59,26,-22,-18,16,41,38,-15,42,16,-1,46,35,-30,31,44,80,19,-66,-3,46,-76,-75,-18,15,-25,0, 
  /* [59][0][][] */ 2,-12,-6,28,0,-42,24,19,50,-1,9,-7,34,8,-30,22,60,-40,3,12,45,-15,30,-23,6,74,36,-10,-20,-25,-1,60,-12,34,-19,79,-7,-49,-71,82,81,-9,-13,-26,127,-22,10,-74,86,-54,-1, 
  /* [60][0][][] */ 11,-29,39,9,4,-15,-22,2,8,-2,-14,3,32,-59,11,-2,11,15,-22,-69,-22,-8,-18,-26,8,21,-7,66,-30,13,68,-49,-15,-5,21,-9,-41,-19,18,13,72,121,-12,7,127,9,-1,-26,-10,2,-66, 
  /* [61][0][][] */ -22,45,44,-72,-32,-8,-62,53,16,127,-79,-13,-59,69,-7,-65,18,4,43,69,-63,-3,-27,-15,-16,21,36,-4,-17,-35,-19,-11,-107,-26,7,42,0,58,-26,-48,100,-11,-1,11,53,33,-44,8,59,11,-58, 
  /* [62][0][][] */ -29,-40,-2,-18,11,-9,-13,-3,124,17,41,2,-19,-28,0,5,8,-22,6,127,7,53,-58,-26,36,36,27,11,-10,7,75,-20,-42,12,15,13,-7,-62,-31,-10,-15,-22,61,-15,44,21,-7,-20,-21,31,-48, 
  /* [63][0][][] */ 83,-88,47,-45,-22,18,-63,-18,-58,93,-37,-3,32,4,11,104,85,-101,-64,105,38,7,48,-14,-15,-88,113,10,-27,63,-1,-44,-73,65,0,25,66,70,8,-44,-20,63,-88,16,9,-65,-62,14,-37,82,127, 
  /* [64][0][][] */ 14,24,38,37,11,27,-15,8,8,1,11,32,-11,15,43,127,16,5,-10,18,35,-40,-17,44,2,24,-42,57,-12,-52,-8,-33,0,14,-23,-16,-30,-7,45,-18,95,-9,6,41,10,-21,-18,-42,11,-7,-25, 
  /* [65][0][][] */ 18,-20,23,10,-8,-12,16,9,13,-6,-12,-2,-10,17,-1,28,31,27,127,-15,-17,-47,11,12,14,13,24,20,-20,-4,25,-21,-2,9,-32,3,-16,-3,7,12,-15,-6,-11,3,-7,18,-1,-7,18,-7,10, 
  /* [66][0][][] */ -18,72,32,55,44,39,81,61,-47,-25,9,17,21,1,12,67,-30,-127,-27,12,-56,-14,102,12,65,-22,-49,105,-23,15,35,76,16,7,-30,-91,-61,-7,36,-28,25,-63,-77,-1,-41,31,-77,-35,28,-9,89, 
  /* [67][0][][] */ -8,2,47,-12,-6,3,-47,-10,47,-49,20,-27,6,-4,-15,-81,15,23,17,127,-3,-17,74,-27,24,60,27,21,-27,26,-32,-10,-40,4,14,-1,-16,76,-31,-19,64,22,15,-2,8,-5,-37,-3,-8,13,20, 
  /* [68][0][][] */ -39,98,3,-95,-50,33,-103,1,-16,24,73,-18,-8,86,-61,-62,29,45,-53,-34,21,46,-71,23,-14,-16,99,-6,12,-37,-60,10,59,-20,56,-58,-21,73,-78,-17,120,-62,5,37,22,37,-117,-127,68,-8,-7, 
  /* [69][0][][] */ -26,4,35,43,63,-15,48,-18,-21,-3,-44,-5,-46,-39,-6,4,-32,-127,9,37,-3,-2,-36,57,-9,68,3,45,112,15,-26,-19,-60,44,-41,-69,40,15,-40,9,67,-106,32,39,111,-12,-122,-37,31,-42,5, 
  /* [70][0][][] */ 35,2,18,-8,-61,7,24,125,-13,-18,-36,-2,33,73,40,-32,-2,-17,-16,-42,66,30,-1,-72,-50,15,-54,-14,-35,-2,-27,78,-111,16,26,30,14,-33,-127,-9,-27,-88,28,9,-8,-48,-15,-14,-96,20,-71, 
  /* [71][0][][] */ -19,24,-10,37,-11,45,36,-15,-35,-63,-18,24,-25,38,-25,3,-65,-55,12,73,1,19,-39,30,51,81,-5,19,30,56,-12,-12,-66,-21,-34,-37,-27,23,8,7,127,-15,60,-3,37,72,7,20,99,-15,14, 
  /* [72][0][][] */ 55,-35,-4,73,-18,-11,-48,110,-41,-47,-3,-18,-49,-15,72,-76,-23,7,43,65,26,-3,-73,31,-15,3,-63,-72,9,51,100,3,31,21,-23,-30,-37,88,-26,13,-24,-39,-33,-33,127,-13,-82,-40,3,-27,66, 
  /* [73][0][][] */ 8,-26,78,4,-50,-29,4,-18,8,-16,41,-6,40,7,-37,-56,23,22,-19,-36,-7,-1,-9,-24,127,-33,-3,7,-26,45,-6,-20,53,-30,-16,-18,-6,-25,-62,-61,28,74,81,25,23,-48,-14,27,24,11,-31, 
  /* [74][0][][] */ -20,-63,1,-74,-18,28,29,10,69,-127,9,31,73,25,20,86,-43,74,37,4,-25,94,-1,-57,-80,7,16,17,12,-47,-22,-23,-34,19,112,-20,44,51,-121,-105,54,36,-83,56,42,-22,-21,-110,45,-107,-22, 
  /* [75][0][][] */ -3,7,58,-25,-2,3,-33,-19,-30,-61,14,-22,-11,3,1,-17,73,45,-48,47,4,-10,6,-37,-51,18,25,-3,5,28,-7,127,29,-9,-25,40,-21,-20,26,-26,-53,29,78,-1,12,120,40,-5,15,33,38, 
  /* [76][0][][] */ 105,-36,4,-21,67,19,53,52,6,-32,-13,-27,26,-35,-71,-25,2,21,45,60,19,53,-39,4,-4,-4,10,23,58,-28,16,35,16,35,47,-75,-18,10,-9,-55,6,-127,-16,4,11,53,-31,-4,60,21,-16, 
  /* [77][0][][] */ -13,-36,17,-16,29,14,-27,-65,-14,-4,-4,-13,35,73,70,0,-17,72,-93,-53,-23,68,58,5,46,24,-76,35,40,-3,10,-48,-18,51,-20,127,9,8,65,-11,42,-47,13,-84,41,22,91,-6,-24,-16,-93, 
  /* [78][0][][] */ -12,68,6,-42,9,-42,61,28,127,-41,-38,-6,41,29,24,-23,47,-33,-45,9,9,14,-34,37,-8,-15,11,-30,-2,-1,36,-49,-90,17,14,12,-9,2,-48,-14,-35,43,39,46,-7,-41,-34,30,55,14,-13, 
  /* [79][0][][] */ -11,33,-24,47,20,-21,4,11,-42,-44,4,-4,6,60,18,-83,55,127,-4,96,-10,-1,18,-86,36,56,-32,-29,22,-4,1,-6,-76,3,23,-35,49,33,-29,34,-6,12,-62,-18,-45,95,17,-21,-44,-48,0, 
  /* [80][0][][] */ 42,-8,-22,-6,-43,-17,49,54,50,45,17,-7,-23,-25,-17,-69,-6,69,-19,-23,-6,78,5,17,20,-3,41,35,15,-1,-63,-31,-61,2,8,0,-15,-17,6,25,-25,10,-127,-92,11,6,-15,6,-37,-8,-33, 
  /* [81][0][][] */ -16,21,25,-79,60,-53,-47,61,43,-77,-124,30,-59,52,-79,-5,-5,-88,38,-105,-9,-17,-12,116,65,-10,-114,36,48,95,-43,61,38,-51,7,69,-105,59,-61,-127,-79,-48,-43,-78,38,12,122,50,53,-1,-53, 
  /* [82][0][][] */ -54,2,32,32,13,-52,127,54,-28,19,-33,-7,-40,-5,8,-74,5,33,-61,-20,91,-82,30,-4,4,-5,-5,36,20,28,25,3,-64,42,-32,-8,-25,45,21,-69,0,-15,-68,33,-20,12,0,-28,21,11,27, 
  /* [83][0][][] */ -13,83,-4,32,39,7,-54,22,108,68,-47,-3,-9,-19,-33,74,30,11,-60,30,9,-20,64,-6,-55,-90,-4,11,127,64,-74,-19,34,28,-12,35,-19,44,6,-13,30,-51,13,-8,23,-64,-18,7,4,1,10, 
  /* [84][0][][] */ 24,-48,-24,72,-30,39,-5,19,-22,-84,17,6,83,58,4,44,10,64,40,40,-57,-3,-30,7,-65,-22,-60,27,-25,-58,-34,4,36,38,1,-7,-6,30,127,39,46,83,39,-1,-17,-45,42,-23,-1,-15,-1, 
  /* [85][0][][] */ -17,27,17,29,-9,80,9,25,127,50,5,-24,-2,24,16,-46,-49,-73,15,-1,-5,17,17,4,-35,-28,-7,-5,-19,-50,-5,-35,36,-43,11,2,-9,14,-25,-22,72,0,35,10,-1,26,16,76,57,11,14, 
  /* [86][0][][] */ 69,5,-54,38,-13,-77,-29,-20,-59,-17,-127,8,-63,10,-85,-75,41,34,-67,88,-40,37,-31,-38,59,43,40,20,31,-6,-10,-70,-49,-15,-44,-3,-50,43,24,0,58,-26,-1,-4,78,58,-46,28,-4,59,-47, 
  /* [87][0][][] */ -16,-10,10,-70,-35,2,44,-62,68,-58,-111,-42,-54,74,-33,-1,-64,-109,-7,-109,47,127,56,88,57,-59,58,-88,94,-106,-125,9,-45,-5,-82,-36,33,10,-44,-14,58,-63,38,-66,21,-28,-17,-100,-39,13,-15, 
  /* [88][0][][] */ 1,-14,60,-78,19,-84,75,-12,114,-20,7,14,33,-127,71,-29,7,77,-63,62,-62,-109,-42,-55,73,-110,-63,96,-24,-8,-90,0,82,-40,-31,28,-4,38,-41,13,90,47,-26,-26,35,11,58,-17,69,49,-11, 
  /* [89][0][][] */ 22,-9,-8,42,3,-8,-58,61,-12,0,-3,52,34,111,-39,-63,17,13,127,-92,56,15,-10,14,-9,33,18,45,59,-31,-5,-32,17,-19,-50,-6,-6,83,23,7,-33,-32,7,30,-24,89,-73,101,-2,12,21, 
  /* [90][0][][] */ -51,62,82,-17,-9,-19,63,-22,-44,-2,-29,63,14,14,52,-25,-26,8,19,48,-37,-24,19,127,50,42,-6,-106,76,31,-37,38,39,101,70,25,30,-7,0,-35,-6,74,-20,6,28,33,-35,96,13,-15,77, 
  /* [91][0][][] */ -3,72,16,-71,-1,-71,-60,-81,-44,62,-127,-11,-57,-77,40,6,74,-97,-56,26,-65,38,-46,-101,61,54,8,-52,51,-36,-117,-83,-61,-46,-72,24,45,53,83,4,88,94,7,19,106,-113,-47,-63,81,36,-42, 
  /* [92][0][][] */ -70,70,17,-22,35,-15,77,-15,10,34,28,14,5,127,99,-13,18,-15,-33,-68,9,-30,-21,31,14,30,-5,-75,51,-45,-32,42,24,-3,-93,25,33,-8,39,41,19,-1,16,85,4,7,31,101,-63,-25,82, 
  /* [93][0][][] */ -42,-13,-25,-13,28,9,1,-21,5,-40,4,-1,-45,-57,-24,-11,-5,-15,127,10,-6,4,52,-38,-54,-19,-36,12,-9,-3,-36,-6,8,29,20,-3,-9,-14,-12,-15,-15,19,-20,24,-4,-20,10,-34,33,4,27, 
  /* [94][0][][] */ -12,35,13,13,29,-32,-27,16,62,127,-6,6,2,56,-13,101,23,-12,29,-24,-43,-5,-66,39,-27,9,-31,20,12,29,-39,-21,7,-50,-25,-36,-74,10,-33,11,83,-33,11,80,72,37,0,-9,28,-21,-40, 
  /* [95][0][][] */ 26,4,11,27,17,-10,35,-13,2,2,78,-10,19,13,97,-26,-6,27,-8,4,-9,43,45,27,-31,-15,43,-1,-11,-3,-20,-3,25,-15,3,-11,18,-33,62,-1,-13,6,19,127,32,-1,-19,18,0,0,-21, 
  /* [96][0][][] */ -66,24,19,-28,0,34,-3,22,26,70,68,-41,102,54,-23,39,-45,-8,124,127,34,-41,51,46,3,-85,80,-94,-7,-31,93,-15,-81,46,-53,-67,23,33,42,9,37,73,8,25,-77,48,-78,44,-55,25,-54, 
  /* [97][0][][] */ -21,-5,37,-100,61,20,-21,20,4,21,-21,34,-33,37,69,-8,0,-38,15,29,31,54,-78,42,-51,34,-79,14,-62,39,-10,-21,23,-51,127,-39,-16,-15,-16,-30,-11,66,-35,-8,31,5,76,7,42,27,-71, 
  /* [98][0][][] */ 25,14,0,-15,53,-31,-13,-9,-23,54,47,15,-15,12,-25,-32,-17,127,32,-54,29,23,-95,-57,98,-29,-50,-10,15,-7,-36,17,17,-24,-72,61,-23,-7,18,-14,59,90,63,-10,-23,-37,2,98,37,20,-12, 
  /* [99][0][][] */ 16,-22,5,41,-6,-17,-36,17,-29,17,-1,-21,30,-8,52,-54,61,-31,-10,37,-15,19,13,-17,-6,-24,-27,-12,16,14,-2,127,-64,20,12,11,-38,33,40,-3,1,12,-4,12,24,-24,12,-20,5,-1,-23, 
  /* [100][0][][] */ 49,20,29,4,0,-83,-44,55,-49,7,6,5,5,-6,48,-13,-81,26,-18,-127,-42,36,2,-33,-18,17,-38,68,59,-50,25,-41,-57,59,1,-6,-66,41,-2,0,2,47,-58,-7,-26,82,41,34,52,3,-54, 
  /* [101][0][][] */ -11,-6,15,-23,-37,-44,23,19,-72,-18,17,14,-33,-62,-7,-12,35,25,80,21,88,127,59,-39,40,2,-98,38,84,7,-71,36,-103,-23,-106,16,32,39,4,-8,28,-61,51,-83,6,-20,0,-67,-22,-79,-27, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 102,1,1,51 } };
const TfArray<102, float> quant12_scale = { 102, { 0.0032555428333580494, 0.0028227679431438446, 0.0032219476997852325, 0.0035167229361832142, 0.0042962613515555859, 0.0032896350603550673, 0.0035788335371762514, 0.0045882347039878368, 0.0046297041699290276, 0.0027874168008565903, 0.0049521038308739662, 0.0028994821477681398, 0.0052291508764028549, 0.0038214798551052809, 0.0047526555135846138, 0.0042875474318861961, 0.0052341334521770477, 0.0045307534746825695, 0.0036254064179956913, 0.0025932334829121828, 0.002803718438372016, 0.0027175128925591707, 0.0035008443519473076, 0.0036776992492377758, 0.0036804829724133015, 0.0035868824925273657, 0.0043763411231338978, 0.0032819926273077726, 0.0028977098409086466, 0.0019634086638689041, 0.0040770652703940868, 0.0062809488736093044, 0.0046303169801831245, 0.0029331780970096588, 0.0028436402790248394, 0.0050343484617769718, 0.0035466598346829414, 0.0042456365190446377, 0.0047322087921202183, 0.0035805781371891499, 0.0039126421324908733, 0.0069677713327109814, 0.0030171829275786877, 0.0023074967321008444, 0.002248105825856328, 0.0023639996070414782, 0.0044824914075434208, 0.0040109348483383656, 0.0045715938322246075, 0.0027095787227153778, 0.0030493985395878553, 0.0037646617274731398, 0.0027129028458148241, 0.0066757723689079285, 0.0032057685311883688, 0.0031813075765967369, 0.002926412969827652, 0.0027827292215079069, 0.005641372874379158, 0.0060628782957792282, 0.0021458456758409739, 0.0044938470236957073, 0.0047450335696339607, 0.0023151224013417959, 0.0033233815338462591, 0.0075413226149976254, 0.0048587312921881676, 0.0066529465839266777, 0.004423811100423336, 0.0042688935063779354, 0.0047620763070881367, 0.0056901103816926479, 0.0053385929204523563, 0.0049627320840954781, 0.0032606557942926884, 0.0046118837781250477, 0.0051452307961881161, 0.0023014380130916834, 0.0040759872645139694, 0.0051028672605752945, 0.0040671355091035366, 0.0026041211094707251, 0.0046615186147391796, 0.0055229086428880692, 0.0029454189352691174, 0.0057575064711272717, 0.0036190059036016464, 0.0041926596313714981, 0.0032641291618347168, 0.0060567264445126057, 0.0026356594171375036, 0.0040240702219307423, 0.0042358268983662128, 0.0069839400239288807, 0.0048372293822467327, 0.0047262618318200111, 0.0041292430832982063, 0.0035393151920288801, 0.0040855626575648785, 0.0049362997524440289, 0.0026626375038176775, 0.0039401110261678696, } };
const TfArray<102, int> quant12_zero = { 102, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[51] = { 19617, 28325, -968, -178, 24228, 21463, 26540, 26606, 2242, 57, 16, 30263, 21182, 41128, 27724, -102, -256, -8701, 561, -183, -4524, -93, -10599, 28968, 298, 25612, 22460, 2292, -644, 33144, -373, -90, 549, 20195, -271, 28426, -6943, -1719, 6492, 33184, -1275, -2015, 45315, 19795, -35, 3471, -246, 2056, 35367, 16616, -4707, };
const TfArray<1, int> tensor_dimension13 = { 1, { 51 } };
const TfArray<51, float> quant13_scale = { 51, { 9.9852535640820861e-05, 0.00011400597577448934, 6.2262384744826704e-05, 4.4263062591198832e-05, 8.2075392128899693e-05, 6.8605411797761917e-05, 0.00011996983812423423, 7.7616714406758547e-05, 6.2193168560042977e-05, 4.9926660722121596e-05, 6.0640260926447809e-05, 5.192807293497026e-05, 9.1815338237211108e-05, 4.5884655264671892e-05, 7.2518552769906819e-05, 5.9160222008358687e-05, 4.85438977193553e-05, 6.3531406340189278e-05, 6.7988381488248706e-05, 7.364093471551314e-05, 5.4154581448528916e-05, 6.5878768509719521e-05, 6.987742381170392e-05, 5.9401099861133844e-05, 5.3365725761977956e-05, 9.5306742878165096e-05, 0.00012754445197060704, 8.0075951700564474e-05, 4.9399604904465377e-05, 5.1618051656987518e-05, 6.7315522755961865e-05, 8.0704950960353017e-05, 5.5081880418583751e-05, 8.3567916590254754e-05, 7.8582619607914239e-05, 9.0437904873397201e-05, 9.0769208327401429e-05, 5.9609988966258243e-05, 7.1105132519733161e-05, 4.4137948862044141e-05, 5.8085090131498873e-05, 5.9387552028056234e-05, 4.5023080019745976e-05, 5.1591978262877092e-05, 7.9352052125614136e-05, 6.5958993218373507e-05, 7.33623091946356e-05, 5.9471818531164899e-05, 5.0688358896877617e-05, 9.731509635457769e-05, 0.00010022958304034546, } };
const TfArray<51, int> quant13_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[1*3*3*51] = { 
  /* [0][0][][] */ -124,-92,-29,80,-102,-127,-127,-105,-14,53,119,-111,-127,-101,-127,35,81,115,118,0,77,-16,48,-34,110,-57,-52,-38,82,-73,11,46,48,-127,94,-95,127,-40,-72,-127,61,85,-93,-86,-31,-28,56,119,-120,-9,127, -127,-103,36,77,-118,-115,-103,-98,3,105,127,-115,-99,-127,-120,6,79,127,127,6,93,-14,51,-51,127,-55,-63,-53,79,-90,-8,54,72,-109,127,-127,110,-12,-53,-117,68,81,-97,-127,-58,-37,84,127,-117,-21,106, -31,-14,-61,-5,-40,-27,-31,-18,-29,55,22,-58,-9,3,3,-20,50,2,-26,10,-10,-29,-1,-19,-1,-3,-15,-13,18,-19,-23,26,20,-11,-9,-26,6,-21,-27,-95,57,29,-36,-61,-2,-17,-1,-16,-32,5,7, 
  /* [0][1][][] */ -60,-127,52,126,-87,-100,-45,-127,93,99,115,-122,-120,-61,-104,86,113,119,87,104,127,55,127,-127,93,-127,-99,68,114,-98,46,117,118,-31,72,-39,-30,63,-40,-127,115,127,-127,-53,61,76,115,119,-119,-94,-26, -66,-97,127,127,-127,-93,-56,-120,127,127,123,-118,-127,-99,-118,122,127,106,106,127,122,70,106,-106,98,-124,-127,64,127,-105,61,127,127,-43,95,-31,8,79,-14,-75,127,121,-101,-46,35,105,127,115,-127,-127,-46, 11,-10,-10,22,-29,-20,27,26,56,37,-1,-11,-20,3,-30,55,44,12,0,27,31,32,35,-37,4,-28,-19,16,5,-20,0,28,23,-2,-14,7,76,63,28,-77,22,3,-25,-31,16,65,26,0,35,0,36, 
  /* [0][2][][] */ 66,-43,108,46,42,-18,-10,0,125,49,-34,-127,96,-36,-21,113,-28,70,-38,50,29,127,42,-11,26,-7,34,127,34,-127,125,57,68,-62,4,-31,-18,127,127,-47,-2,27,-81,-70,89,102,9,-20,55,-31,-10, 65,-23,79,56,53,-12,-29,7,119,26,-26,-97,83,-19,-23,127,-27,85,-43,67,50,119,61,-20,37,-12,19,123,25,-109,127,63,61,-78,20,-35,-16,124,113,-78,3,65,-89,-92,127,127,-7,-33,65,-72,17, 13,1,23,13,30,16,14,36,34,22,-4,-37,59,26,-5,15,-23,-2,10,38,5,27,7,-60,16,18,23,25,17,1,18,15,32,-12,8,-17,-47,26,34,-31,-13,12,-2,-26,-14,36,40,-13,67,-14,-61, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant14_scale = { 51, { 0.0053301183506846428, 0.0060856277123093605, 0.003323559882119298, 0.0023627579212188721, 0.004381176084280014, 0.0036621501203626394, 0.0064039779826998711, 0.0041431724093854427, 0.0033198653254657984, 0.0026650801301002502, 0.0032369710970669985, 0.0027719154022634029, 0.0049010934308171272, 0.0024493183009326458, 0.0038710332009941339, 0.0031579667702317238, 0.0025912683922797441, 0.0033913003280758858, 0.0036292131990194321, 0.0039309458807110786, 0.0028907661326229572, 0.0035166020970791578, 0.0037300498224794865, 0.0031708248425275087, 0.0028486570809036493, 0.0050874645821750164, 0.0068083102814853191, 0.0042744465172290802, 0.0026369460392743349, 0.0027553664986044168, 0.0035932960454374552, 0.0043080220930278301, 0.002940265228971839, 0.0044608470052480698, 0.0041947322897613049, 0.0048275664448738098, 0.0048452513292431831, 0.0031819753348827362, 0.0037955848965793848, 0.0023560794070363045, 0.0031005763448774815, 0.0031701016705483198, 0.0024033274967223406, 0.002753974637016654, 0.0042358045466244221, 0.0035208843182772398, 0.0039160726591944695, 0.0031745997257530689, 0.0027057395782321692, 0.0051946700550615788, 0.0053502451628446579, } };
const TfArray<51, int> quant14_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 3 };
const ALIGN(16) int32_t tensor_data15[51] = { 1770, 49908, 14335, 12243, 19001, -3740, 41074, 20645, -10498, 1157, 730, -1651, 10831, 1900, 37986, 3791, -12087, 10237, -36917, -5778, 13670, -2765, -10605, 14661, -9349, 10791, 9110, -1678, -5689, 23271, 9602, -7892, 8419, -16629, -6733, 1968, -15250, 14835, -5205, 22550, 8115, 11290, -11668, 13701, -4153, -14549, -19993, 32467, 14473, 42814, -10161, };
const TfArray<1, int> tensor_dimension15 = { 1, { 51 } };
const TfArray<51, float> quant15_scale = { 51, { 5.1092436478938907e-05, 2.4715020117582753e-05, 8.7116866779979318e-05, 8.1723046605475247e-05, 5.8821242419071496e-05, 6.2203100242186338e-05, 3.4859735023928806e-05, 5.2413048251764849e-05, 7.2970731707755476e-05, 0.00011810378782683983, 4.6852343075443059e-05, 8.2369559095241129e-05, 4.8195088311331347e-05, 7.2757633461151272e-05, 5.0440492486814037e-05, 6.1702790844719857e-05, 8.2188213127665222e-05, 5.4373991588363424e-05, 6.4337778894696385e-05, 5.4799846111563966e-05, 6.642106018261984e-05, 6.7430555645842105e-05, 4.6555058361263946e-05, 5.0707832997431979e-05, 5.6057699111988768e-05, 6.2363433244172484e-05, 4.8126428737305105e-05, 4.8475307266926393e-05, 9.1251764388289303e-05, 7.1832604589872062e-05, 6.5453241404611617e-05, 7.7309967309702188e-05, 8.0290650657843798e-05, 6.3483435951638967e-05, 0.00010393032425781712, 5.9460398915689439e-05, 9.2659196525346488e-05, 5.900364340050146e-05, 7.2030983574222773e-05, 6.7739063524641097e-05, 5.9813421103172004e-05, 6.9609770434908569e-05, 6.4843385189305991e-05, 9.6676740213297307e-05, 7.8257944551296532e-05, 8.3880448073614389e-05, 8.3666687714867294e-05, 5.5753178457962349e-05, 6.2615305068902671e-05, 5.0746279157465324e-05, 7.5125346484128386e-05, } };
const TfArray<51, int> quant15_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[51*1*1*51] = { 
  /* [0][0][][] */ -24,20,-9,-23,18,-29,-24,35,8,14,9,-3,2,-6,21,-93,-26,13,-58,-36,24,43,-9,23,25,63,-40,99,-9,127,39,-1,37,-58,-4,-19,16,-25,-11,-41,23,-7,-38,21,38,55,62,13,26,-11,88, 
  /* [1][0][][] */ 19,89,15,25,27,-121,43,-127,39,32,17,32,-45,5,-64,110,-52,-15,28,76,78,-59,-87,-9,-46,-67,85,25,-68,-97,69,-37,-75,49,-71,4,-84,-42,70,-68,32,28,11,-11,12,-52,83,9,19,-102,-7, 
  /* [2][0][][] */ 1,-6,-50,56,-118,20,62,41,-43,-8,17,-13,-33,-41,11,5,-3,-17,-14,45,93,-46,26,0,-43,-127,-32,-9,-60,13,8,12,-62,0,-11,17,-27,111,-27,10,-31,-88,6,28,30,1,-98,-62,69,12,15, 
  /* [3][0][][] */ -127,-3,-16,-29,43,-54,51,-54,-91,5,-23,48,-76,-20,-3,-2,27,-44,-1,66,-12,25,-3,83,5,-7,59,-3,14,-25,9,-55,51,15,39,-71,-42,4,62,73,-18,-11,-40,30,10,-20,26,114,10,20,29, 
  /* [4][0][][] */ 44,66,-61,40,-11,10,-52,5,-61,61,54,1,105,-62,23,-95,1,-101,26,54,-127,-39,67,-3,-29,-20,-62,-21,-21,3,-69,44,2,83,-15,15,-2,-36,28,-8,56,74,-3,-4,13,-31,36,-55,31,-46,-39, 
  /* [5][0][][] */ 42,5,49,-53,-60,25,68,39,90,31,107,37,-14,52,40,-38,-97,-46,75,-127,55,7,-14,16,-55,-72,3,26,67,-32,-30,19,25,-19,12,-68,6,33,11,57,-1,-65,-59,-69,32,-24,-57,61,2,-76,33, 
  /* [6][0][][] */ -7,-39,-50,66,-72,4,29,-13,53,-24,-15,-127,-11,23,-47,21,-103,-43,-10,-42,17,30,60,42,34,-24,24,-11,6,-5,-52,-10,42,26,73,41,-50,-84,-43,30,-13,-59,-11,19,-7,-1,-44,4,-9,-23,-17, 
  /* [7][0][][] */ -16,-75,-3,30,-33,5,-26,-127,-89,-49,-12,20,54,-22,85,-19,-51,-37,38,-3,35,12,22,13,4,-13,-24,30,-22,-37,-7,79,28,-62,-39,17,83,-35,-16,-107,32,21,69,-2,31,-13,-3,13,-18,-3,14, 
  /* [8][0][][] */ -22,22,60,-3,-28,64,43,-18,-54,64,36,48,19,8,-11,-37,-81,127,-55,-15,-45,45,12,-34,24,-44,10,-26,14,35,-28,29,39,-19,-24,89,-61,93,-11,30,51,-65,-9,-15,3,7,-10,11,-38,88,-23, 
  /* [9][0][][] */ 19,15,7,-4,-19,-71,24,-21,-47,2,-27,-1,24,56,3,-16,-33,38,-9,24,-6,-5,-4,-29,-14,16,17,-12,13,-42,10,-30,24,3,-14,43,-2,8,-9,20,-15,15,25,23,-13,10,19,7,127,28,0, 
  /* [10][0][][] */ -35,10,45,62,-18,-5,-80,73,127,-77,-35,49,14,70,11,38,-5,22,55,-66,-8,-53,80,59,15,25,-95,115,-93,19,-44,-10,-11,-79,12,-67,-30,71,-18,44,55,-83,2,3,-47,-16,122,6,-34,47,-90, 
  /* [11][0][][] */ -21,-51,23,0,50,64,26,-32,16,-15,-33,10,51,24,-32,-5,14,7,1,127,-17,15,-22,-34,22,-63,45,38,-38,73,14,7,28,39,30,-1,56,31,-12,16,-37,34,22,-38,-67,-66,-50,0,4,35,-65, 
  /* [12][0][][] */ -127,-24,36,-15,-99,12,30,-3,23,-28,-17,-10,1,31,81,-1,14,-39,20,22,-19,31,56,19,11,78,2,-6,-42,1,5,8,0,0,-59,-5,17,-5,-2,-10,10,33,79,80,-7,-24,-28,-28,-23,-49,-36, 
  /* [13][0][][] */ -17,-19,-21,-12,-2,70,-10,-6,-27,-3,-78,-15,127,88,33,-23,43,-36,-10,12,44,90,-8,20,-51,-11,-47,12,32,3,-6,16,-95,99,13,-5,-70,-14,28,-28,5,-38,-98,31,-16,44,-23,98,0,-21,25, 
  /* [14][0][][] */ -39,30,-66,13,3,-36,109,-22,30,-16,9,-30,70,-12,4,-8,33,-23,-33,-61,2,-108,-31,11,-71,-21,-13,55,-52,29,-31,46,-36,-127,-79,-3,-98,-57,63,-63,-59,2,65,32,-28,64,-91,-25,53,-11,-27, 
  /* [15][0][][] */ -34,-22,8,-25,85,-63,34,-15,48,59,54,-12,-38,127,5,-51,17,-17,-29,-52,36,5,-46,-14,23,-43,-4,-7,-8,-17,21,57,-10,-51,-8,66,-27,42,-7,-6,34,-19,22,5,31,-29,-22,9,-26,33,19, 
  /* [16][0][][] */ 30,13,-95,-17,27,17,14,-25,43,-23,37,-32,12,34,25,42,77,-81,-16,-11,92,-6,-2,124,127,-35,-6,0,-1,-26,5,-29,12,-12,-51,28,85,-18,-86,2,5,-36,-16,-4,-22,54,18,-19,20,17,-9, 
  /* [17][0][][] */ 127,-40,-24,-23,42,18,54,-49,17,-6,-27,9,-22,30,-24,11,28,-19,-22,58,-35,-4,-39,18,-21,-2,-24,-27,-11,-35,11,1,31,6,-23,-6,-26,-16,16,0,31,-16,27,13,-9,17,38,-8,9,-2,25, 
  /* [18][0][][] */ 127,63,23,-22,7,-13,-28,28,89,75,0,-6,67,-51,126,78,-20,-40,-42,16,12,24,14,8,-45,-19,73,62,-8,-14,-32,87,40,13,19,-21,-7,98,-82,-72,14,47,4,98,17,53,20,38,11,16,-56, 
  /* [19][0][][] */ 2,66,22,-18,-3,119,24,3,-23,29,-70,27,11,39,-27,-35,-80,-10,-29,-20,-10,-23,-8,89,14,-44,52,-50,53,3,48,-14,-26,-52,5,21,4,10,84,54,36,-28,127,24,60,-52,13,-15,35,6,67, 
  /* [20][0][][] */ -4,55,81,42,-19,-88,26,-62,8,51,64,-4,-19,-7,-47,-41,66,65,-19,-13,-31,-69,-56,-7,30,-41,-74,61,41,36,32,64,-72,20,-13,-6,-58,7,-79,21,5,-67,127,-6,-60,6,-2,1,-24,6,-27, 
  /* [21][0][][] */ -23,-56,91,-11,-31,-32,127,3,-2,85,88,-11,4,-16,-13,48,-9,27,25,-11,45,-24,-6,82,-27,-29,26,-36,-27,3,-11,-14,26,9,-44,-35,-1,41,-31,8,-15,-41,-23,-41,-12,22,30,-53,37,2,5, 
  /* [22][0][][] */ 24,19,-114,32,94,-7,0,15,38,113,-1,19,8,-47,3,-3,-48,-20,-36,36,62,42,-16,35,-45,-79,-29,-78,64,36,68,-30,30,127,71,13,-27,32,-74,89,-10,22,48,63,30,-31,45,71,22,11,-5, 
  /* [23][0][][] */ 100,0,-49,-6,-10,21,-25,71,-49,-108,89,-76,-45,-19,19,-45,-41,13,-62,60,113,-7,34,52,6,-121,3,-3,51,8,80,-79,28,40,-74,11,1,14,-56,61,127,56,52,-6,-121,4,3,57,-33,-61,-50, 
  /* [24][0][][] */ 15,8,-56,-38,-109,-13,37,30,76,122,-127,99,7,-27,49,-15,-89,64,52,0,46,28,-8,22,112,-96,14,-81,63,14,43,4,-8,-127,20,-25,-40,-28,17,35,33,101,-24,96,-25,127,11,73,15,-40,-36, 
  /* [25][0][][] */ -8,-27,-17,-11,-59,-47,-40,-35,11,-31,22,11,18,-58,20,-28,-7,-52,-13,-16,-79,-10,50,45,30,-2,3,8,-29,24,36,-13,-30,1,-1,127,47,67,3,16,13,21,-15,-31,16,19,2,14,-26,-10,22, 
  /* [26][0][][] */ 34,-6,-65,51,-40,-59,-22,27,20,-69,16,-47,43,23,22,-43,31,-17,38,0,-17,-5,-8,5,15,21,34,6,-35,1,31,54,3,0,13,-37,-1,41,127,-25,34,6,5,41,-11,-5,-47,9,-12,-1,-3, 
  /* [27][0][][] */ -80,51,-30,70,40,-3,102,45,27,-59,-43,-39,-69,6,-28,127,67,83,-19,-100,94,32,-9,-35,14,-49,16,-121,74,-46,4,62,-29,23,94,-57,-26,9,-24,35,-5,-95,104,-50,45,-20,-14,34,33,-1,-63, 
  /* [28][0][][] */ 82,-52,31,-41,-47,-32,50,-35,-64,28,-4,33,12,-39,-18,-44,11,-68,-23,24,127,13,-1,62,74,-1,25,2,27,4,10,30,-7,-32,-17,-10,-53,-13,3,34,-30,11,102,-31,2,6,3,33,-5,95,14, 
  /* [29][0][][] */ 27,-79,61,-21,98,-20,-22,-43,-127,-73,8,-45,5,-46,26,36,15,0,3,-32,-16,-8,-18,-36,-34,-88,-25,2,55,38,20,-18,54,-26,107,-38,-16,11,8,-60,59,-39,21,12,10,22,-58,-28,42,-6,37, 
  /* [30][0][][] */ 27,42,33,-35,52,-37,13,50,5,7,-30,-83,4,18,-2,-127,-23,-6,-27,-25,-10,16,-14,55,-5,-23,-14,9,120,4,2,15,20,36,42,-21,18,58,-6,42,-70,9,-43,5,22,30,-18,-44,6,-58,-50, 
  /* [31][0][][] */ 19,26,-52,-49,18,123,-26,-82,-25,12,127,-36,22,21,-6,3,-17,-15,39,-59,-46,49,44,24,23,-1,4,-3,-19,-13,39,6,-20,31,-28,-54,-21,19,-58,37,1,-31,53,-36,-18,-56,10,-15,75,30,-21, 
  /* [32][0][][] */ 10,53,37,-5,-3,-67,9,39,-17,12,-127,1,-29,11,-25,9,22,-30,-14,-24,57,25,24,-36,38,-18,38,-30,-42,69,33,26,-1,11,14,62,-55,-58,28,-3,71,26,14,-1,15,18,-17,8,-6,-19,2, 
  /* [33][0][][] */ -36,-19,9,76,14,3,47,9,65,22,-15,-93,-9,-45,-16,33,34,100,-100,9,25,-60,-31,-12,69,28,-43,-25,43,2,43,-8,-10,-14,127,20,3,-63,65,-40,-66,36,-33,117,-61,60,70,-45,4,35,34, 
  /* [34][0][][] */ 6,21,-19,25,-56,-22,-11,-48,-7,1,-15,-38,0,-28,-57,20,2,22,34,-48,-9,4,-26,-21,43,36,19,6,-2,24,16,64,-35,17,30,-7,22,25,5,6,-12,-1,1,127,-35,-14,6,28,10,4,32, 
  /* [35][0][][] */ -7,-80,26,-4,-3,-3,-31,-7,58,2,31,5,27,21,0,5,-6,-36,2,40,5,-17,36,-42,55,-39,-4,-11,127,-25,2,54,15,41,-11,6,-74,-42,32,43,-28,-1,-23,-13,-2,-23,7,-1,5,28,84, 
  /* [36][0][][] */ 66,51,-26,26,33,8,35,-17,17,127,24,38,-14,-50,56,-21,-51,33,0,67,44,26,-17,-91,-58,11,-27,-78,-5,3,-23,-88,-27,46,29,62,38,25,-58,-20,19,30,-6,3,49,12,-10,34,0,-4,51, 
  /* [37][0][][] */ 68,78,7,-77,-8,-10,102,1,34,18,17,-47,-49,-43,1,78,63,-56,-48,-48,-53,-32,-1,-18,16,-73,-35,2,-76,-42,-29,-26,-58,-42,1,59,-7,38,-21,43,-53,-58,-42,-71,-34,31,-50,12,127,62,-16, 
  /* [38][0][][] */ 4,-36,127,72,-22,63,5,18,70,46,-73,-26,-29,-21,-54,-11,64,-8,-22,-35,-63,80,-53,-3,2,34,-38,10,13,34,30,63,-16,-57,51,-5,5,6,-18,37,0,-15,-35,-1,3,5,39,-8,-29,-5,48, 
  /* [39][0][][] */ 25,-22,21,-63,30,32,66,-30,4,-84,1,2,-87,-7,-75,-119,-29,38,10,-29,64,29,22,-1,-50,36,-12,-35,-54,-127,91,-6,42,98,-46,38,-31,-59,-85,-7,-52,45,-4,-21,-12,-79,8,-29,59,81,-9, 
  /* [40][0][][] */ -43,60,4,15,-41,-66,43,-18,19,17,4,85,-56,6,-16,29,-101,-25,-4,-29,-9,31,-20,78,-11,-1,29,-4,-40,40,-31,87,-34,127,-30,-23,-48,42,-23,-50,67,25,19,-85,-28,8,12,0,107,-38,56, 
  /* [41][0][][] */ 26,-15,-13,-6,49,14,-42,4,-39,10,-20,4,-14,20,14,6,-27,-22,-18,20,15,-68,-6,52,37,23,9,-4,-15,-26,45,-3,7,43,-3,23,-29,16,-19,8,-15,-26,-12,15,-16,127,-58,-36,-30,18,-10, 
  /* [42][0][][] */ 12,-28,-9,-21,-89,-50,-10,90,-46,-23,17,97,127,27,-79,30,36,47,47,17,9,28,12,86,-81,10,-6,53,86,-29,44,32,-15,-4,91,108,25,2,-56,-24,43,-16,7,42,32,-4,-3,-16,-29,4,-33, 
  /* [43][0][][] */ 5,-1,-116,-22,-48,-39,52,-9,46,-9,19,-9,28,-3,-78,39,-1,64,-37,96,-12,-10,-51,57,12,34,0,-37,13,21,18,21,-2,-79,4,18,1,-81,62,4,3,7,48,12,0,-12,-127,1,-11,40,-120, 
  /* [44][0][][] */ 20,-10,46,3,-25,18,110,2,46,8,14,18,60,40,1,-57,-21,21,-6,-10,51,-39,-54,-58,29,11,20,47,-63,-39,-18,27,-47,-26,127,-11,11,57,-6,9,15,-40,15,-35,42,-4,40,-27,15,-24,-101, 
  /* [45][0][][] */ -35,-6,-14,6,-2,66,-8,-13,-18,17,127,3,29,6,-6,-18,-5,-35,-10,3,62,-23,-53,17,56,-7,7,-15,3,-14,-20,8,25,4,-8,16,-13,38,-10,29,27,-13,-48,4,-5,-30,14,12,28,44,28, 
  /* [46][0][][] */ -6,-31,19,43,39,-3,-10,-21,34,52,6,-25,-7,26,12,78,0,31,-3,-14,30,27,92,-82,-58,44,-26,-24,10,-26,14,-40,0,-31,-38,10,50,96,127,-9,124,-18,-66,59,64,-20,-75,-3,-23,-60,23, 
  /* [47][0][][] */ -11,-11,-50,73,-14,23,6,21,-77,3,23,-52,-54,-6,-44,-35,-6,71,37,-23,-41,-44,38,-24,-45,-4,127,-9,1,-10,3,-14,-100,-44,20,15,-51,-39,-98,-64,55,-46,28,50,24,72,61,-19,-39,-44,52, 
  /* [48][0][][] */ 25,-35,19,-26,-69,-17,13,28,65,85,14,-2,28,86,-14,-9,70,2,43,42,-75,39,-43,-21,5,-61,21,88,-79,43,46,-40,-64,-4,-30,-50,127,-50,-63,-92,-24,41,8,-27,17,15,-63,-7,7,-48,10, 
  /* [49][0][][] */ -46,-36,-7,-39,-24,-85,-71,-25,-51,-63,-39,-13,74,27,16,-26,30,-9,-33,-29,-62,-8,89,109,8,-42,-33,-11,-57,7,-5,-21,6,56,-32,-127,83,-15,-22,-88,-33,-49,32,-28,-32,-24,35,-71,27,80,-21, 
  /* [50][0][][] */ -9,-5,12,-32,59,14,-28,-6,11,127,-19,1,71,-38,-36,45,33,-20,3,-3,0,-13,-57,11,115,-7,-30,38,-33,-45,-45,13,-26,29,30,83,-45,15,-18,50,-8,-8,-53,8,-35,-50,30,-18,1,14,41, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant16_scale = { 51, { 0.0027444940060377121, 0.0013275981182232499, 0.0046795913949608803, 0.004389855545014143, 0.0031596564222127199, 0.0033413171768188477, 0.0018725341651588678, 0.0028154323808848858, 0.003919714130461216, 0.0063440925441682339, 0.0025167320854961872, 0.0044245836324989796, 0.0025888592936098576, 0.0039082672446966171, 0.0027094739489257336, 0.0033144424669444561, 0.004414842464029789, 0.0029207668267190456, 0.0034559839405119419, 0.0029436422046273947, 0.0035678902640938759, 0.0036221162881702185, 0.0025007631629705429, 0.0027238344773650169, 0.0030112091917544603, 0.0033499298151582479, 0.0025851712562143803, 0.0026039115618914366, 0.0049017025157809258, 0.0038585781585425138, 0.003515902440994978, 0.0041528013534843922, 0.004312912467867136, 0.0034100920893251896, 0.0055827470496296883, 0.0031939896289259195, 0.0049773044884204865, 0.0031694544013589621, 0.0038692341186106205, 0.0036386884748935699, 0.0032129525206983089, 0.0037391758523881435, 0.0034831434022635221, 0.0051931119523942471, 0.0042037232778966427, 0.0045057428069412708, 0.0044942605309188366, 0.0029948516748845577, 0.0033634593710303307, 0.0027258996851742268, 0.004035451915115118, } };
const TfArray<51, int> quant16_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int32_t tensor_data17[51] = { 2354, -6087, -1525, 24059, -10475, -3541, 7427, 44937, 33055, -203, -7, -4090, 48589, -871, 29846, 31734, -12616, -2959, 24913, -2659, -256, 22860, 28611, -7274, 2222, 41093, 35676, -2674, -247, 25477, 26959, 35487, 27813, -11792, -4121, -1699, 30928, 26369, -28, -5716, -1455, 5700, 3371, 20177, 21211, -1497, 49474, 28637, -4684, 237, 37643, };
const TfArray<1, int> tensor_dimension17 = { 1, { 51 } };
const TfArray<51, float> quant17_scale = { 51, { 7.2044625994749367e-05, 4.8918915126705542e-05, 0.00011068351159337908, 6.4596155425533652e-05, 0.00014873783220537007, 8.3527665992733091e-05, 0.00011359743075445294, 5.4524145525647327e-05, 5.9294434322509915e-05, 9.8251686722505838e-05, 0.00015118611918296665, 6.5526342950761318e-05, 4.6591791033279151e-05, 4.5981378207216039e-05, 7.0784488343633711e-05, 7.6225529483053833e-05, 6.5667096350807697e-05, 6.4932923123706132e-05, 5.539992343983613e-05, 7.3405033617746085e-05, 0.00010799623851198703, 6.7468572524376214e-05, 7.728513446636498e-05, 8.1247540947515517e-05, 6.4714040490798652e-05, 4.7839275794103742e-05, 6.8758308771066368e-05, 0.00011363576777512208, 9.3754402769263834e-05, 7.6366755820345134e-05, 4.3267464207019657e-05, 6.9479057856369764e-05, 5.0803111662389711e-05, 8.1300371675752103e-05, 0.00010958343773381785, 0.00011766306852223352, 6.8334789830259979e-05, 7.4946634413208812e-05, 0.00012512694229371846, 8.5773121099919081e-05, 0.00012850736675318331, 6.5083266235888004e-05, 0.00014489273598883301, 0.00012488040374591947, 5.9072484873468056e-05, 9.7879026725422591e-05, 3.5450262657832354e-05, 5.1878039812436327e-05, 9.6427567768841982e-05, 6.5825792262330651e-05, 4.5431232138071209e-05, } };
const TfArray<51, int> quant17_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[1*3*3*51] = { 
  /* [0][0][][] */ -2,49,21,-127,53,31,24,-120,0,25,34,-30,-114,50,-42,-37,5,1,-110,21,3,-47,-61,58,-31,-127,-9,-92,-9,-94,-127,-94,-67,32,79,24,30,1,11,93,-90,-66,14,-45,-52,-51,-127,-127,58,45,-53, -29,88,27,49,-20,74,115,-127,-2,29,127,8,-127,30,-66,-56,93,17,-41,47,20,-55,-127,64,24,-110,-98,106,28,-127,-23,-88,-127,53,52,81,-127,2,20,-3,-127,-127,127,-58,-70,-2,-114,-118,89,127,-60, -18,40,13,-125,46,-6,11,-95,31,6,-15,-17,-80,34,-33,-43,-11,18,-127,-34,-9,-55,-45,23,-25,-76,-22,-65,-11,-79,-97,-59,-55,7,55,-2,17,-12,-10,127,-34,6,17,-16,-34,-69,-111,-97,-43,18,-12, 
  /* [0][1][][] */ -6,111,33,-100,-20,48,-71,-40,-46,-46,-10,35,-80,90,12,-18,118,7,-68,-1,49,-127,-126,37,45,-69,-103,25,0,-93,-39,-76,-39,0,-65,57,-88,-42,5,32,66,70,2,-54,-60,14,-41,-4,52,37,-23, 104,109,127,36,24,127,103,-98,-127,80,58,22,-79,127,-127,-23,127,127,-8,17,127,-81,-10,127,127,-95,-90,127,7,-29,41,-127,-84,43,11,127,-116,-127,127,-26,51,91,-11,-127,-127,81,-98,-35,127,56,-127, 10,71,-10,-86,30,11,-58,-19,-41,-41,-27,58,-29,57,12,0,51,-6,-34,-7,-5,-69,-92,-19,-11,34,-80,-5,17,-69,-27,-68,2,26,-4,-16,-56,-9,-3,38,27,109,-18,-42,-93,-4,34,13,-29,36,-10, 
  /* [0][2][][] */ 72,-32,-15,-28,113,18,-94,-99,2,35,-31,127,-37,-1,-44,-46,35,50,-82,97,-9,-15,11,13,5,-70,-127,-60,54,9,-110,-46,10,92,107,-54,-28,-34,18,70,24,-108,-79,5,-15,21,-115,-93,-22,-45,-49, 127,127,-12,-31,-8,8,-59,-110,-90,127,-23,101,-116,72,-123,-127,35,112,-62,127,12,-8,25,48,89,-119,-36,111,127,-45,9,6,-17,127,127,-29,-32,-84,-20,-31,74,-86,-64,22,17,127,-78,-36,29,-50,-80, 30,-3,-6,-53,127,-5,-127,-26,-1,23,-14,45,-17,21,-71,-12,9,30,-59,48,-14,-29,-35,-12,22,-20,-99,-38,30,12,-93,-32,-17,46,47,-40,1,-3,-12,75,32,-56,-70,-10,-11,-17,-75,-86,-51,-13,17, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant18_scale = { 51, { 0.0043630329892039299, 0.0029625366441905499, 0.0067030098289251328, 0.0039119524881243706, 0.009007585234940052, 0.0050584478303790092, 0.0068794772960245609, 0.0033019902184605598, 0.0035908797290176153, 0.0059501365758478642, 0.0091558536514639854, 0.0039682849310338497, 0.0028216056525707245, 0.0027846391312777996, 0.0042867190204560757, 0.0046162293292582035, 0.0039768088608980179, 0.0039323475211858749, 0.0033550274092704058, 0.0044454196467995644, 0.0065402681939303875, 0.0040859067812561989, 0.0046803993172943592, 0.0049203629605472088, 0.0039190920069813728, 0.0028971536085009575, 0.0041640130802989006, 0.00688179861754179, 0.0056777806021273136, 0.0046247821301221848, 0.002620283979922533, 0.0042076618410646915, 0.0030766439158469439, 0.0049235625192523003, 0.0066363890655338764, 0.0071256929077208042, 0.0041383649222552776, 0.0045387791469693184, 0.0075777061283588409, 0.0051944330334663391, 0.0077824248000979424, 0.0039414521306753159, 0.0087747257202863693, 0.0075627756305038929, 0.0035774384159594774, 0.0059275683015584946, 0.0021468731574714184, 0.0031417417339980602, 0.0058396677486598492, 0.0039864196442067623, 0.0027513219974935055, } };
const TfArray<51, int> quant18_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 3 };
const ALIGN(16) int32_t tensor_data19[51] = { -3801, 8742, -5581, -7811, 18421, -1834, 12906, 14312, 16980, 12229, 15349, 234, 16173, -6064, 7939, 3864, 10919, 9070, -1881, -13364, 33125, 4980, 2860, 1435, 11971, 14, 19066, 23446, 5122, 28013, -29054, 37022, -5349, 11090, 26436, 27354, -3269, 16728, 1880, 15231, 31833, -12707, -8586, 34528, -1402, -7471, -429, 5979, 11721, 8594, 19953, };
const TfArray<1, int> tensor_dimension19 = { 1, { 51 } };
const TfArray<51, float> quant19_scale = { 51, { 6.3848077843431383e-05, 7.8416967880912125e-05, 5.3371197282103822e-05, 9.0526576968841255e-05, 4.0952349081635475e-05, 5.1553346565924585e-05, 3.9039387047523633e-05, 3.6682798963738605e-05, 5.8134795835940167e-05, 4.6720924729015678e-05, 4.9257356295129284e-05, 4.8259025788865983e-05, 3.7809353671036661e-05, 0.00011541981075424701, 2.9629092750838026e-05, 6.5551881561987102e-05, 4.3846208427567035e-05, 5.2027789934072644e-05, 7.8626915637869388e-05, 7.4331488576717675e-05, 5.5794385843910277e-05, 4.8408564907731488e-05, 4.6252680476754904e-05, 6.3826635596342385e-05, 5.2013703680131584e-05, 6.3858227804303169e-05, 3.8842194044264033e-05, 4.5336699258768931e-05, 6.5059837652370334e-05, 5.3319035941967741e-05, 5.6031607527984306e-05, 4.9096004659077153e-05, 6.0231570387259126e-05, 4.4848809920949861e-05, 4.5205222704680637e-05, 3.7966114177834243e-05, 3.7393412640085444e-05, 5.1269857067381963e-05, 5.1964059821330011e-05, 4.6287204895634204e-05, 3.5494140320224687e-05, 6.4961714087985456e-05, 6.5626969444565475e-05, 3.1238731025950983e-05, 6.1756909417454153e-05, 5.7935769291361794e-05, 4.9748243327485397e-05, 6.2172730395104736e-05, 7.621380063937977e-05, 7.846071821404621e-05, 5.8912006352329627e-05, } };
const TfArray<51, int> quant19_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[51*1*1*51] = { 
  /* [0][0][][] */ 23,5,127,58,6,-58,17,-16,-2,-27,71,27,20,-1,53,4,73,8,-1,47,-24,-20,-26,12,-84,33,48,2,3,11,-18,29,-7,24,-13,-40,26,8,-1,-5,-45,-10,34,-2,-46,-15,-37,0,-6,17,13, 
  /* [1][0][][] */ 37,14,7,-42,3,8,-25,-51,-41,30,52,6,48,-37,31,-60,17,16,-28,-80,3,-20,127,-32,54,-45,7,41,34,-50,27,64,74,8,-40,-21,24,32,4,-17,-47,31,-16,-66,-47,29,21,-18,10,-42,-33, 
  /* [2][0][][] */ 66,82,-4,27,19,2,127,15,-58,-42,44,-10,-16,34,29,-5,-4,64,-4,-76,-6,-2,-19,40,73,-28,121,106,-60,-16,15,-29,-38,-14,-78,-5,-25,63,58,126,47,18,39,-29,-25,-25,29,-26,-43,45,-55, 
  /* [3][0][][] */ -5,27,1,4,-12,-66,21,1,-53,127,-8,28,-56,-11,3,6,1,24,42,14,13,-27,7,-19,8,-3,69,38,28,30,-6,71,21,-31,-14,-22,-22,31,40,-17,72,-17,59,-16,-65,5,10,9,6,-22,2, 
  /* [4][0][][] */ -24,-17,-35,-49,-20,-57,-57,14,-49,-3,-2,-26,26,19,29,42,28,9,-20,63,-19,-32,-9,-7,23,-36,53,12,20,58,-6,127,-7,15,21,10,-6,18,-3,55,-7,-30,-29,9,-10,9,-7,-2,9,-16,7, 
  /* [5][0][][] */ -7,-15,19,17,27,19,79,7,-18,92,-17,-53,13,28,15,19,-69,0,-45,127,12,20,97,-29,-6,39,2,7,-39,6,-5,0,2,-2,8,10,101,-4,-4,15,-36,6,-3,45,-34,-33,29,13,-46,-12,-32, 
  /* [6][0][][] */ 75,-14,37,-27,-3,109,36,-3,30,19,-41,-37,-24,37,-7,-42,18,-46,21,10,-35,31,-12,53,-33,-8,-2,44,-75,38,-10,-84,58,-3,6,26,-17,-9,-24,-5,11,1,10,1,-63,-9,8,-127,45,-44,86, 
  /* [7][0][][] */ 114,9,-16,-14,-24,125,52,61,101,-63,87,-72,-29,-13,-21,-63,-47,62,-34,126,20,44,18,-98,3,-44,127,11,11,-49,-33,-30,-82,-77,-58,35,-1,103,-19,-43,65,-21,10,-28,-69,30,-69,64,43,-27,-44, 
  /* [8][0][][] */ 37,37,-89,-35,63,-21,-8,-120,15,-17,4,78,10,-68,74,-27,-127,-28,-44,35,-6,62,23,-79,-79,-17,-34,43,7,29,21,100,-5,-19,-2,6,-8,72,21,67,75,-60,-50,-100,33,26,80,22,-68,-37,4, 
  /* [9][0][][] */ 62,23,30,-19,-19,-75,-6,-8,-30,-68,-18,81,36,68,-49,1,6,83,-29,-73,30,-122,-31,-18,-31,59,-118,19,-68,-22,-30,120,27,61,25,43,5,-18,-29,17,-60,30,10,-13,-24,-2,50,-31,127,67,-65, 
  /* [10][0][][] */ 41,30,-59,-6,5,21,127,-53,55,-6,34,29,61,5,-12,-70,3,-31,31,52,8,-16,39,54,-19,-110,-24,78,37,7,-24,-44,33,-38,-30,-63,14,-26,-49,-18,2,17,9,-33,-15,18,2,-11,-40,-54,-40, 
  /* [11][0][][] */ 52,37,16,127,-4,9,-32,-15,45,91,30,-38,-11,48,-22,109,62,-75,36,-44,16,-8,-4,-18,-42,-19,100,47,-41,-23,70,6,-42,12,-37,-24,-29,37,1,75,-81,-8,6,15,20,-42,26,30,-47,-41,80, 
  /* [12][0][][] */ 98,21,127,-115,62,24,65,-44,-64,56,-29,-24,2,39,2,1,110,-34,-38,-2,-68,4,-24,116,-45,-60,-65,-30,-23,-48,25,-89,-46,-1,35,-41,-13,-21,-82,-13,56,-3,-60,35,-40,-24,29,48,0,36,19, 
  /* [13][0][][] */ 37,42,-7,-44,21,42,-15,-21,-31,31,8,19,-11,19,12,-16,44,-13,0,20,-14,-7,-3,-21,17,-8,34,38,-18,-11,1,-47,-27,-62,-63,-9,-13,-15,10,32,18,3,5,10,14,-33,43,-29,127,-16,-62, 
  /* [14][0][][] */ -14,46,100,-31,67,47,55,-71,-20,-41,12,91,-25,-64,1,11,-33,-82,-35,-78,12,74,32,-78,73,100,1,42,-48,56,16,64,48,-22,93,107,27,-127,-8,-28,18,-14,85,-71,37,20,-77,43,-4,-8,66, 
  /* [15][0][][] */ 31,-14,-4,-26,-21,-43,2,12,35,18,-19,68,26,35,-17,21,8,-16,-51,0,37,-40,9,13,21,76,11,3,54,-40,11,-65,-17,-16,-27,-30,12,55,-38,127,-18,-14,37,-17,-4,-30,-1,-12,-6,-12,-10, 
  /* [16][0][][] */ 3,40,32,4,-31,-28,88,-39,-42,103,22,-30,55,56,7,-59,100,-41,-35,97,-15,6,-95,25,31,5,71,59,-27,6,23,-7,-28,-31,-58,-10,34,30,-19,-127,-2,19,23,-19,-56,3,103,-51,15,26,-37, 
  /* [17][0][][] */ 13,-10,-5,75,7,17,-26,4,1,-17,-32,-4,64,-19,31,-12,-46,51,37,-56,-42,127,114,7,3,12,-70,27,3,-43,43,95,2,-21,39,-58,-101,-2,-87,112,-12,-34,21,65,2,90,-104,13,-23,-1,-38, 
  /* [18][0][][] */ -54,23,13,-15,-46,-91,52,18,28,91,19,29,-27,46,22,-127,25,0,-21,71,7,60,-3,-7,3,-42,57,-10,66,15,-19,36,-32,-1,-54,-67,-33,-27,-9,23,-30,85,11,3,56,23,31,-46,16,71,-11, 
  /* [19][0][][] */ -18,-29,-29,32,-34,10,31,17,10,-31,7,27,127,16,-50,27,-96,53,-28,34,-13,-47,16,-5,28,13,77,35,40,36,38,-2,-34,-27,30,27,-14,6,-11,44,58,-24,9,16,45,-11,5,16,36,-24,-33, 
  /* [20][0][][] */ -42,9,-65,16,0,-4,-91,8,38,-24,-24,-36,65,-5,1,-39,97,-16,-48,-9,-5,35,-91,-3,-2,-11,-23,90,-88,21,25,-15,29,-40,-16,-45,127,69,3,52,1,-26,-31,-2,-56,-2,-12,-35,-26,-20,1, 
  /* [21][0][][] */ -27,32,-70,-25,10,-60,-86,20,-18,1,127,74,0,22,63,62,7,-10,45,-27,-24,-12,-50,37,-13,25,-73,22,69,-83,11,92,22,-30,-4,34,49,-36,49,-7,-31,-31,43,-32,-11,-12,14,6,47,32,62, 
  /* [22][0][][] */ -15,7,76,16,15,-11,27,-38,47,2,0,-24,-12,-8,-26,85,-20,-17,-7,-18,24,39,62,38,-25,-70,127,9,9,-45,46,-61,82,33,10,-37,49,-10,7,-19,-8,2,-31,29,13,-58,-14,-16,-2,-31,-24, 
  /* [23][0][][] */ 108,31,58,16,1,0,3,-64,-78,-15,-27,18,-10,35,-44,-53,-34,5,-21,27,-51,-9,-12,4,19,-32,26,93,50,36,26,1,-26,-32,-51,6,127,7,10,-9,9,5,4,-13,-27,-12,1,0,23,2,42, 
  /* [24][0][][] */ 9,9,-42,-58,87,-53,-76,15,-83,38,64,-60,56,30,39,28,-97,-86,36,117,-46,11,-60,29,-19,31,0,27,79,-89,92,-48,-29,-58,-94,-39,127,-20,-40,79,-104,-66,127,39,9,39,56,-9,82,-51,27, 
  /* [25][0][][] */ 77,9,-32,-52,-8,2,93,-41,26,-49,56,-42,-23,-8,41,53,-2,-32,-20,-30,-18,4,35,-39,17,16,12,14,40,16,-4,37,24,-13,-52,-10,64,11,91,21,0,-14,11,-26,44,-21,-127,22,69,26,-48, 
  /* [26][0][][] */ 46,-8,-49,6,38,-1,-12,14,-6,47,-10,64,5,5,57,54,30,1,68,10,-10,51,4,-31,-51,14,-62,0,50,36,46,54,-127,-48,20,-16,-33,105,-91,-71,-52,-77,85,-17,0,90,-15,-23,74,-34,-35, 
  /* [27][0][][] */ -86,7,-70,-15,81,-120,-73,79,-13,33,82,93,-66,42,3,13,47,-44,-19,5,4,-7,-9,-14,31,24,15,70,9,9,-32,-10,17,81,50,-127,-40,15,87,-26,-57,32,-22,-122,-51,19,-35,59,-21,-38,-71, 
  /* [28][0][][] */ -3,-12,36,75,48,-37,-2,56,-25,11,34,25,-2,1,4,-16,47,28,24,-26,25,12,-41,-7,127,-27,-79,23,11,60,-17,20,-39,-11,-25,-13,43,-1,-8,0,-58,7,15,-35,-5,8,24,9,-28,-23,-21, 
  /* [29][0][][] */ -51,-44,-49,13,45,11,91,-51,-90,-32,3,-40,68,31,57,0,0,-27,126,-10,60,-69,1,-119,-15,-25,-24,-7,12,-20,-67,-127,-9,-38,37,-1,-20,-51,13,15,52,8,-55,10,-69,-58,-9,-45,-39,7,26, 
  /* [30][0][][] */ 20,44,78,-75,16,127,34,8,52,114,-2,-56,-35,-13,55,-85,4,-34,48,-66,-1,19,48,-104,26,-50,64,69,-37,71,-35,47,-15,-37,-115,34,43,23,118,-1,-37,99,11,123,80,-91,110,-4,8,30,94, 
  /* [31][0][][] */ 31,-28,-40,-31,-20,-127,-57,-36,52,-5,-3,-31,-33,-5,-46,-12,-27,41,23,21,-13,-40,-7,16,-9,55,7,2,-91,-6,-40,-9,-50,-1,-14,3,60,-19,14,7,40,-9,1,-33,44,42,24,-49,-9,40,-42, 
  /* [32][0][][] */ -64,22,-50,-26,92,71,-39,-73,10,93,58,-25,20,66,-16,-109,-16,-98,-33,-56,6,0,60,-22,-52,90,55,44,74,10,83,-16,127,-71,-29,59,72,28,-11,-52,-8,21,-8,-10,9,-9,-4,4,28,23,13, 
  /* [33][0][][] */ -65,30,-18,13,-13,-19,-44,35,-33,32,47,-20,30,-15,-50,-31,41,1,-25,17,18,0,127,112,8,13,114,11,33,-8,16,-30,-27,-39,-45,-7,27,-18,-33,7,28,1,0,-19,0,4,-84,-8,16,-70,0, 
  /* [34][0][][] */ -93,-33,-95,20,-16,-127,-20,-23,-35,-82,10,-15,-62,-10,7,10,46,-124,7,20,9,32,4,34,5,53,-75,-16,3,9,46,8,-46,4,19,88,-43,57,9,30,-1,16,11,29,11,6,-53,-52,59,28,-5, 
  /* [35][0][][] */ 5,43,86,29,-14,-11,83,-63,-26,50,39,-66,30,-66,20,-44,-50,28,11,-18,-36,-30,-47,-29,12,-44,26,11,-53,73,-8,-36,-23,-73,-73,-25,-52,-13,-13,127,-20,29,10,-55,-34,-36,13,80,93,-51,6, 
  /* [36][0][][] */ -6,32,58,-106,-41,-41,83,95,-76,37,60,108,26,119,24,-25,17,-56,20,16,-58,12,26,-27,-52,18,48,32,4,35,27,-94,10,-46,-54,-30,22,-11,71,7,109,30,5,-34,-27,-30,-9,-34,-127,87,99, 
  /* [37][0][][] */ 103,-17,32,7,5,-33,32,12,78,-18,-29,34,8,-34,31,-7,-78,34,-46,-4,44,90,-127,-4,69,46,-118,-66,-69,4,39,65,24,31,-45,44,36,-44,-12,-97,70,38,32,-41,-24,-15,-66,-63,37,-14,-11, 
  /* [38][0][][] */ 10,-27,50,10,-43,59,23,-46,13,-49,-7,-19,-45,-62,-15,-4,-72,32,126,-65,-8,67,-25,-19,-30,34,2,10,102,-16,127,86,28,-27,-24,-14,50,10,-8,70,19,23,3,63,24,-11,58,-35,-69,-26,-73, 
  /* [39][0][][] */ -24,46,16,-34,49,-72,7,6,-84,19,-1,51,44,-27,5,-25,1,-29,127,24,10,-61,10,3,1,-13,4,54,-12,-45,27,-88,-38,29,-52,43,43,-6,6,2,34,-10,40,-60,-39,45,-4,25,20,39,-72, 
  /* [40][0][][] */ -4,10,-16,29,67,57,-105,-125,-6,-67,-14,-30,-10,42,11,-75,25,48,-17,38,63,27,14,-4,37,12,-11,-26,24,-49,17,-84,25,-26,-85,-24,-19,-32,-83,36,63,7,-34,71,20,30,-6,-85,0,83,127, 
  /* [41][0][][] */ -43,11,22,30,-17,60,86,-56,-69,41,10,-25,-115,-35,11,127,33,-1,49,41,21,-40,-19,-21,40,-41,-36,-74,79,-15,38,-20,26,7,-18,-32,-60,28,21,-9,-19,-6,5,5,44,45,88,-26,86,50,25, 
  /* [42][0][][] */ -50,-9,31,3,32,20,10,24,-26,-2,1,-12,-18,127,-12,-17,-36,59,-58,55,31,8,22,-49,50,111,85,67,9,76,-1,10,27,-48,-69,-63,-8,6,18,7,31,-5,35,21,-11,8,-19,-9,30,-12,-24, 
  /* [43][0][][] */ 20,15,-2,-21,-3,60,92,-113,2,22,48,5,-112,64,-10,-72,-1,-26,-50,-33,36,118,-25,106,14,107,70,-6,-21,-40,-6,-72,-127,49,-27,9,-12,37,4,-48,-17,6,-6,-39,-22,-64,36,-43,-80,-20,-31, 
  /* [44][0][][] */ 31,54,-17,30,-30,127,59,52,-72,-13,-56,-55,-46,-83,31,7,-58,-17,29,-4,-34,-17,12,-20,42,97,-9,47,-21,-94,34,-26,23,16,63,-61,17,-14,29,-88,35,52,94,-34,54,-4,-40,25,48,3,53, 
  /* [45][0][][] */ 20,26,-33,35,-35,-6,-72,8,-7,73,40,11,-11,37,-12,-16,-52,120,-27,55,23,31,-3,60,27,9,47,27,24,-27,45,19,30,-55,-9,-48,-61,-4,22,43,27,-19,27,5,-13,-23,-6,-54,53,68,127, 
  /* [46][0][][] */ -63,38,67,-26,-90,-50,24,73,-58,23,64,-54,-2,16,-27,-35,-81,-73,59,32,6,41,-20,97,6,20,-26,15,6,1,-3,-29,127,-43,-41,4,19,55,60,90,36,16,-13,15,-27,-38,28,6,118,-81,-42, 
  /* [47][0][][] */ -15,-29,-64,-46,75,-78,47,-18,-71,-72,46,68,58,-106,3,31,-36,127,45,-23,0,4,-42,85,-36,42,-17,-66,-12,31,-61,7,-15,29,69,32,58,-50,6,85,-123,10,-9,27,-28,65,9,-69,19,-51,25, 
  /* [48][0][][] */ 3,19,-7,-1,17,-17,31,-13,-10,-18,-4,-17,-23,43,5,49,-24,-20,-17,-30,-17,-3,76,-25,4,7,-32,-11,7,8,21,-8,-15,-12,-33,-9,16,-23,-8,-45,-11,127,8,-35,-7,8,63,-37,45,-10,17, 
  /* [49][0][][] */ -46,87,-8,14,-58,-114,127,-15,51,-33,17,9,-31,1,-10,-45,-35,-102,21,3,-108,-36,-1,-13,-71,-32,31,94,-16,-44,96,-12,-17,7,-38,-11,-54,-4,29,26,12,24,42,18,-54,7,41,13,21,-23,78, 
  /* [50][0][][] */ 41,19,-103,28,-127,-55,31,-9,-28,-3,-7,-43,50,-18,19,-99,27,-3,48,-55,21,7,55,16,21,33,-1,72,39,-35,-64,-37,-57,4,-26,-32,-31,45,-11,-25,84,-15,86,60,-22,-24,4,-17,48,65,-13, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant20_scale = { 51, { 0.0034787328913807869, 0.0042725121602416039, 0.0029079050291329622, 0.0049322987906634808, 0.0022312698420137167, 0.002808860270306468, 0.0021270429715514183, 0.0019986452534794807, 0.0031674474012106657, 0.0025455679278820753, 0.002683764323592186, 0.0026293706614524126, 0.0020600252319127321, 0.0062885950319468975, 0.0016143274260684848, 0.0035715638659894466, 0.0023889404255896807, 0.0028347100596874952, 0.0042839511297643185, 0.0040499167516827583, 0.0030399314127862453, 0.0026375183369964361, 0.0025200559757649899, 0.0034775647800415754, 0.0028339426498860121, 0.0034792860969901085, 0.0021162990015000105, 0.0024701491929590702, 0.0035447550471872091, 0.0029050630982965231, 0.003052856307476759, 0.0026749731041491032, 0.0032816892489790916, 0.0024435666855424643, 0.0024629856925457716, 0.002068566158413887, 0.0020373628940433264, 0.002793414518237114, 0.0028312378562986851, 0.0025219370145350695, 0.0019338818965479732, 0.003539408789947629, 0.0035756549332290888, 0.0017020277446135879, 0.0033647967502474785, 0.0031566035468131304, 0.0027105100452899933, 0.0033874523360282183, 0.0041524735279381275, 0.0042748958803713322, 0.0032097934745252132, } };
const TfArray<51, int> quant20_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[51] = { -111, -236, -5416, -3482, 34011, -10496, -2649, 20593, -144, -10965, -7615, 41528, -3946, -4998, -1975, -14405, -1641, -1629, 633, -748, 28655, -80, -576, -3039, -786, 38269, -8723, -2688, 39109, -969, -2766, -402, -271, 28038, 2631, 23593, 2079, 18, 34699, -665, -2170, -1977, -4875, 24824, 22331, -9068, -250, 32557, -524, -1, -2109, };
const TfArray<1, int> tensor_dimension21 = { 1, { 51 } };
const TfArray<51, float> quant21_scale = { 51, { 0.00010859578469535336, 0.00010287646000506356, 0.00013835255231242627, 6.7219676566310227e-05, 3.9756472688168287e-05, 7.9142533650156111e-05, 0.00011606417683651671, 9.3497365014627576e-05, 8.0216384958475828e-05, 9.7969350463245064e-05, 9.2392605438362807e-05, 3.7900204915786162e-05, 0.00011312896822346374, 7.2848946729209274e-05, 9.4443435955327004e-05, 6.3119026890490204e-05, 0.00010451863636262715, 6.5829823142848909e-05, 0.00010561673116171733, 0.00010536765330471098, 3.3526717743370682e-05, 0.00010763188038254157, 0.00016058047185651958, 9.1185305791441351e-05, 9.458108979742974e-05, 5.9290468925610185e-05, 0.00012902461457997561, 8.0729681940283626e-05, 5.9531084843911231e-05, 4.8171950766118243e-05, 0.00016054033767431974, 0.00016912831051740795, 0.00011834506585728377, 4.9022764869732782e-05, 8.0986268585547805e-05, 9.3692266091238707e-05, 0.00012337228690739721, 0.00010661980923032388, 4.3189156713197008e-05, 0.00011571479262784123, 8.418441575486213e-05, 0.00010993496107403189, 0.00011190713848918676, 6.4439685957040638e-05, 5.10370809934102e-05, 3.688181095640175e-05, 6.0898961237398908e-05, 4.5419787056744099e-05, 0.00015732963220216334, 9.1887974122073501e-05, 7.8308941738214344e-05, } };
const TfArray<51, int> quant21_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*51] = { 
  /* [0][0][][] */ -19,93,-24,3,15,11,-19,3,76,14,2,11,-12,13,42,73,-25,-24,-40,-36,-21,22,-7,-6,39,12,55,-55,20,-13,-7,-3,-23,53,-55,-42,-37,-16,-3,-31,-6,-21,2,-24,-51,3,-21,-31,-3,-51,-15, 127,-32,127,127,-127,22,9,1,41,70,20,-127,40,21,127,67,46,115,-17,26,-75,43,21,46,127,-124,11,-11,-89,77,-18,127,-22,-84,127,-28,48,-12,-71,75,68,-127,42,-30,-11,108,127,-106,6,52,19, 66,30,7,68,-52,9,-31,-5,127,44,46,-65,-1,31,3,127,26,25,-30,4,-127,22,20,21,46,-46,66,-40,-1,63,-3,7,-33,17,-55,-88,6,-26,-47,21,2,-96,-71,-58,-96,16,54,-79,29,-17,-15, 
  /* [0][1][][] */ -20,26,4,-12,-29,-1,-46,-5,-30,-26,-16,8,12,17,-21,29,-16,-1,-5,8,-65,-43,-14,-13,-43,-1,-5,7,3,55,-17,-32,-10,-108,-7,53,-17,-43,21,-8,21,-28,97,-43,-21,68,13,-76,-29,-11,-3, -13,-114,100,112,-68,73,127,-127,-25,64,94,-72,127,127,33,54,127,127,127,127,-27,127,127,24,39,-82,-19,67,-111,30,127,0,127,-75,122,-127,127,127,-89,127,127,96,127,-127,-40,119,112,-41,127,127,127, -5,-3,28,35,-70,39,43,-18,-59,8,30,-29,40,53,-40,62,46,73,15,108,-103,-12,43,-20,-67,-64,6,127,-127,127,16,19,37,-127,-5,1,56,41,-41,74,64,40,-95,-86,-21,127,28,-73,55,49,52, 
  /* [0][2][][] */ -1,127,-12,-47,-55,79,-18,23,87,-2,-108,-27,-18,-25,7,64,-21,10,-29,-34,-11,1,-33,-13,-3,-8,76,-60,32,-34,1,-15,-23,5,3,-72,-24,2,-4,-30,-14,-1,-37,58,-92,-18,-47,-74,-18,-7,8, 9,-44,31,-48,-49,127,115,-63,-10,127,127,-79,17,8,-43,69,-13,-40,76,-40,-122,16,-23,127,-45,-127,57,73,-121,82,6,27,44,-108,44,-28,-43,-12,-127,-39,-23,49,-52,-32,-59,74,11,-96,1,-25,60, 22,11,-15,-71,-85,99,44,-24,109,59,57,-48,-31,-6,21,113,-13,-13,42,-38,-92,-10,-41,68,-33,-71,127,45,-29,47,3,-22,-27,-31,39,-52,-50,21,-50,-58,-9,68,25,49,-127,-16,-32,-127,-39,25,23, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant22_scale = { 51, { 0.0071012824773788452, 0.0067272852174937725, 0.0090471338480710983, 0.0043956213630735874, 0.0025997506454586983, 0.0051752789877355099, 0.0075896549969911575, 0.0061139687895774841, 0.0052455002442002296, 0.0064064003527164459, 0.0060417260974645615, 0.0024783657863736153, 0.0073977159336209297, 0.0047637298703193665, 0.0061758337542414665, 0.0041274717077612877, 0.0068346704356372356, 0.0043047359213232994, 0.006906476803123951, 0.0068901889026165009, 0.0021923752501606941, 0.0070382510311901569, 0.010500659234821796, 0.005962778814136982, 0.0061848354525864124, 0.003877115435898304, 0.0084371622651815414, 0.0052790655754506588, 0.0038928496651351452, 0.0031500544864684343, 0.01049803476780653, 0.011059618555009365, 0.0077388067729771137, 0.0032056907657533884, 0.0052958442829549313, 0.0061267134733498096, 0.0080675464123487473, 0.0069720698520541191, 0.0028242203406989574, 0.0075668082572519779, 0.00550497742369771, 0.007188853807747364, 0.0073178182356059551, 0.0042138323187828064, 0.003337410744279623, 0.0024117711000144482, 0.0039822976104915142, 0.002970085246488452, 0.010288081131875515, 0.0060087274760007858, 0.0051207691431045532, } };
const TfArray<51, int> quant22_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[51] = { 4224, 17013, 33916, 2526, 4026, 5243, 31988, 15428, 5507, 26913, 6103, -9235, -1759, 5025, 9180, 2547, 7352, 27698, 11488, 323, -558, 3798, 1313, 35863, -9578, 28713, 31275, -4789, 48739, 4391, -22994, -15454, 18657, 5941, -19738, 42692, 10806, 3625, 27291, 4649, -1764, 8967, -7362, 5159, 14283, -19141, 19092, 10500, 15077, -15660, -8572, };
const TfArray<1, int> tensor_dimension23 = { 1, { 51 } };
const TfArray<51, float> quant23_scale = { 51, { 5.3568430303130299e-05, 5.6787692301440984e-05, 3.3484982850495726e-05, 0.00012803442950826138, 7.051763532217592e-05, 4.5015189243713394e-05, 3.8893333112355322e-05, 5.153659003553912e-05, 6.4078507421072572e-05, 3.1717194360680878e-05, 0.00012391540803946555, 8.233889820985496e-05, 9.6717543783597648e-05, 6.6259817685931921e-05, 6.4243577071465552e-05, 4.856261148233898e-05, 4.8919562686933205e-05, 4.6454537368845195e-05, 4.6606761316070333e-05, 9.4005990831647068e-05, 0.00011523978173499927, 7.6531774539034814e-05, 5.6988130381796509e-05, 5.5841483117546886e-05, 6.295528874034062e-05, 4.3944804929196835e-05, 3.1471176043851301e-05, 6.8033419665880501e-05, 3.6454322980716825e-05, 7.4602721724659204e-05, 9.07133799046278e-05, 0.00010618472151691094, 5.5047225032467395e-05, 8.2791142631322145e-05, 8.8511202193330973e-05, 4.1735125705599785e-05, 7.5197487603873014e-05, 0.00010106241097673774, 8.0798046838026494e-05, 4.6147601096890867e-05, 4.0885595808504149e-05, 8.9397559349890798e-05, 7.2344962973147631e-05, 4.932567389914766e-05, 5.8824887673836201e-05, 0.00012170946865808219, 7.5803196523338556e-05, 7.4351737566757947e-05, 4.5828513975720853e-05, 6.2330378568731248e-05, 5.9389873058535159e-05, } };
const TfArray<51, int> quant23_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[51*1*1*51] = { 
  /* [0][0][][] */ -17,-42,-24,-11,27,23,55,22,13,-8,-114,83,-27,0,-40,28,-47,-43,125,-28,77,-53,8,-52,104,49,-58,26,-96,44,-36,5,-2,5,40,-5,20,26,56,-58,65,-8,21,30,-49,21,127,43,-105,-87,-54, 
  /* [1][0][][] */ -68,115,-127,-5,121,87,-16,-10,-57,85,86,45,-8,-67,20,24,-31,-13,8,-6,-86,-13,-100,-7,-58,48,-89,-20,-64,-59,57,-53,5,18,-3,-40,28,38,-72,-10,-21,-22,0,11,105,1,-87,25,57,118,-80, 
  /* [2][0][][] */ 12,58,52,7,-127,40,21,17,10,-22,-14,-15,-41,-59,-38,-50,21,7,10,-55,-32,76,-21,-38,110,-38,-12,-46,-1,17,-34,-41,-18,23,-27,-10,105,-41,16,28,35,5,-29,18,14,25,114,-23,-10,-34,23, 
  /* [3][0][][] */ -11,-29,-17,40,53,27,127,-6,-26,-4,-3,-6,9,-16,0,2,35,3,27,-25,-6,33,3,-42,-9,-11,3,-17,-35,40,-4,-6,-5,-8,-20,6,-42,50,3,-31,8,-17,-33,21,-15,16,-25,13,-31,-41,38, 
  /* [4][0][][] */ -60,-60,-61,-11,-12,-5,87,58,65,-36,50,10,-25,20,82,13,-80,127,-64,-48,-33,114,16,23,19,-45,-77,19,-5,-21,15,28,19,-56,44,-22,76,-5,-43,-39,-15,10,-78,-10,83,25,-22,114,109,32,-83, 
  /* [5][0][][] */ -11,-12,44,-14,42,56,-10,-55,18,16,-31,9,8,-11,-8,7,28,-51,1,52,-2,2,-38,127,17,4,-8,-1,25,8,-31,10,-8,-14,-18,-33,13,-9,7,18,43,10,22,-24,-10,3,-40,85,-31,-9,24, 
  /* [6][0][][] */ 113,-26,25,-76,-44,127,102,-22,-19,-29,-54,-12,-22,0,-29,-13,-55,-33,-21,8,2,-46,-47,48,-31,2,1,14,-46,31,5,79,-52,1,-80,-9,6,-9,-14,-2,-38,32,-6,56,-2,2,-11,37,-49,22,-58, 
  /* [7][0][][] */ -127,-67,31,15,58,25,2,11,-40,-12,16,78,74,-48,5,-57,26,9,-29,-46,89,59,5,-69,-26,19,64,101,-50,11,65,8,-22,10,-92,-7,95,55,-27,-82,14,39,-7,-81,-71,8,-14,9,28,-73,19, 
  /* [8][0][][] */ 61,-57,15,31,38,-62,14,42,-65,-32,-59,25,42,15,13,-25,29,-17,-50,-17,34,0,-16,-14,2,-21,-33,-41,-43,61,-45,52,-11,26,12,-31,24,-18,24,19,-52,3,-21,-21,32,43,127,5,-36,8,-33, 
  /* [9][0][][] */ 20,102,-21,30,-80,-31,8,11,3,61,56,-66,38,-124,-43,26,-26,-37,18,-38,79,-7,-58,-70,-73,39,-12,67,127,89,-4,1,60,-12,40,5,-55,41,60,-55,-3,96,-24,-71,-97,12,10,9,-24,-1,-8, 
  /* [10][0][][] */ -16,-7,11,-27,53,39,-12,-32,-37,-3,-25,-22,-17,-9,24,-21,7,-7,-27,5,-33,-4,10,-37,-34,0,-25,-7,127,45,-10,35,18,-7,-18,27,-16,7,-34,-62,-33,0,-5,-6,-5,-22,70,-1,18,-17,-12, 
  /* [11][0][][] */ 6,27,-62,127,82,15,-40,-41,-16,-27,-105,-5,-23,-45,-19,-26,-26,30,-44,-37,41,-43,102,29,107,-7,-58,39,63,59,34,84,34,57,5,-59,-101,-25,-36,-75,-91,-34,79,50,107,-11,22,78,42,-23,-14, 
  /* [12][0][][] */ 4,-13,13,-28,31,127,39,-6,-2,-49,8,63,31,-18,10,-1,7,-27,-10,42,15,-23,-31,-14,-29,-5,7,-12,-7,-36,-4,-29,59,-51,19,-27,-14,8,-21,-5,-18,20,15,-7,58,-22,-41,30,18,-22,6, 
  /* [13][0][][] */ 7,-24,119,52,5,-46,-66,108,-4,-36,29,63,127,-25,-38,66,0,-26,6,84,-29,35,34,52,16,-22,-24,-66,-32,-40,-24,-101,-27,-81,42,-81,2,14,10,-50,96,-69,-22,-26,41,-63,11,57,14,-43,53, 
  /* [14][0][][] */ 30,10,40,-100,25,45,54,-24,-14,-17,-24,-68,30,19,-21,-120,-76,43,25,-21,-118,-83,7,45,116,77,21,-49,-106,43,56,-34,14,107,-109,1,-36,-6,-36,-25,90,42,65,71,-74,27,42,-127,21,8,107, 
  /* [15][0][][] */ -76,-119,-42,8,26,127,17,46,0,10,68,-5,7,-2,-7,42,108,-64,-38,-57,35,3,47,17,-5,-16,43,60,-65,71,-44,19,-31,-51,43,51,10,-51,-56,-25,61,52,2,72,32,-15,18,-24,-18,40,24, 
  /* [16][0][][] */ 42,-6,54,-54,6,32,-7,-4,25,-73,-64,7,-41,3,-36,-39,41,65,58,36,4,8,22,-21,22,8,-2,127,111,38,59,-49,34,1,-58,-43,0,21,-31,-6,-34,99,-58,74,-44,19,-10,-43,-99,8,-3, 
  /* [17][0][][] */ 4,13,-67,-61,-1,86,37,45,-47,-8,-14,-71,51,-31,27,15,-127,56,78,8,-100,-39,-35,82,12,55,-84,64,9,34,-58,19,-13,-3,-5,-41,31,28,-63,-87,-11,-41,27,-4,-111,-17,-42,61,-25,49,109, 
  /* [18][0][][] */ -30,40,-50,-25,2,-92,66,-54,-5,15,-46,-16,29,98,-16,24,0,-19,41,36,-39,112,-66,8,1,15,40,14,8,24,-22,-59,3,-91,18,-32,15,-4,-89,-74,-69,24,79,54,7,-23,64,-87,127,2,-7, 
  /* [19][0][][] */ 5,-8,-14,-1,-4,16,-15,-6,-3,-22,7,2,-25,8,-2,-1,-18,16,-34,-29,-2,-18,7,-3,13,127,84,23,7,30,-30,-22,33,4,-2,-8,-5,8,-10,-14,0,15,15,6,13,11,30,-5,5,10,45, 
  /* [20][0][][] */ 7,-9,34,3,-77,21,-5,-73,28,34,-48,-34,6,70,-31,26,-19,9,83,-5,5,-97,2,-12,-9,-46,52,32,7,51,-5,-4,-88,101,-31,31,-48,0,33,-18,21,-33,21,127,15,6,42,-4,-41,-37,-32, 
  /* [21][0][][] */ -3,-68,27,-14,16,-69,-21,-68,-1,44,15,9,-5,-79,-46,-22,-56,-57,1,-45,30,26,-17,-1,-15,-17,-47,7,-26,12,75,94,-10,-24,-27,52,34,46,32,51,11,-82,18,41,-17,19,58,39,127,32,45, 
  /* [22][0][][] */ -5,-21,63,25,7,-3,92,-39,60,-35,-9,19,-34,-4,3,-23,14,38,20,-1,18,-9,20,-19,3,-23,52,-79,39,30,-1,-8,22,39,-51,-26,-37,8,25,-16,-1,-12,127,6,-44,48,8,3,-2,39,4, 
  /* [23][0][][] */ 76,-68,70,-101,-11,-127,-1,-70,17,-16,52,28,-5,63,30,18,-42,-17,-38,-57,63,106,16,-18,4,4,-43,-53,116,-52,-69,55,-64,-17,-79,51,12,2,-120,-58,-22,13,16,-90,-25,25,-61,25,-87,-49,28, 
  /* [24][0][][] */ 1,42,16,8,-19,50,28,-12,14,1,39,27,1,44,-34,64,-9,-31,5,74,-5,-86,-43,126,-57,-3,-66,3,-73,120,-34,-67,127,-2,-30,-18,-63,-5,1,15,90,17,79,75,-96,13,28,2,7,-64,-19, 
  /* [25][0][][] */ 36,-18,-12,18,-127,5,-56,-26,-11,-41,8,-24,41,34,46,69,105,61,-67,-31,-6,-60,64,-69,-14,19,0,26,-64,10,-13,85,-53,-21,19,-55,-8,-68,-50,37,-33,-66,103,-67,-23,-48,90,94,123,-14,-57, 
  /* [26][0][][] */ 0,12,-44,-15,-6,-89,12,-14,21,26,-19,1,-75,-18,27,37,27,14,32,-72,6,-22,33,-66,-36,5,-7,12,-4,-57,14,16,-34,-43,-18,85,59,24,127,-38,-29,-11,23,-7,46,17,-11,13,4,33,-77, 
  /* [27][0][][] */ 53,14,-54,-26,33,65,41,6,-41,7,0,52,61,17,61,39,30,19,86,36,-4,54,-32,-14,1,127,-90,39,65,-38,36,-32,17,10,-58,-40,-20,-15,15,-19,-20,-6,-29,21,7,9,5,28,-4,-43,-54, 
  /* [28][0][][] */ 4,-6,9,112,-87,-113,25,-86,-62,31,22,-85,-127,-87,34,59,-2,-76,9,36,-77,-76,55,-21,-8,106,-47,37,-4,53,41,-40,-37,42,43,25,-67,120,-34,78,-90,-66,-69,-43,48,56,-6,-31,-34,-40,-25, 
  /* [29][0][][] */ 4,-52,79,-74,-84,-24,0,-44,13,5,-57,58,-4,-13,0,-35,56,127,-10,-17,-40,69,32,-39,-35,-28,-29,97,-94,72,-5,-12,-18,-19,18,-5,-30,121,49,23,-14,-30,43,9,-44,9,28,20,77,24,33, 
  /* [30][0][][] */ 20,-85,66,23,-6,-10,-47,-36,9,14,12,5,-63,29,-11,23,71,1,13,-7,55,-32,-35,28,-43,6,46,-8,19,71,127,8,44,63,34,72,-50,-26,80,31,-46,35,-35,17,62,-6,56,10,13,-29,12, 
  /* [31][0][][] */ -16,-4,-7,-29,0,127,-30,17,17,26,11,31,4,6,3,19,13,-3,12,13,11,37,4,-13,7,-1,34,14,-9,8,24,7,9,-20,40,3,45,1,-1,-23,74,-12,-11,20,-13,-19,-17,17,7,19,-29, 
  /* [32][0][][] */ -15,-91,27,-56,-2,-44,13,-69,-76,57,77,34,-22,-101,43,92,-50,127,67,100,-44,34,-125,29,-40,18,-1,31,1,-63,1,-71,-20,-36,-28,66,118,-28,77,31,17,-63,-38,-40,23,-37,66,-69,19,-86,-21, 
  /* [33][0][][] */ -22,-23,4,-16,90,35,-18,-35,-28,19,-20,4,-30,-25,22,-1,-1,1,-21,-3,-6,-15,-39,-88,50,11,33,39,-48,84,-60,52,-26,-29,70,53,-127,-18,103,-38,-33,12,71,44,-54,-32,-51,24,56,-79,45, 
  /* [34][0][][] */ -15,27,-57,49,-24,-6,-21,77,15,35,91,10,54,-53,19,122,-24,16,27,28,-48,-32,24,72,-70,-4,44,-21,-9,-31,26,-76,77,36,127,-13,40,51,38,-38,6,-118,-11,-26,74,-6,61,-15,125,44,-71, 
  /* [35][0][][] */ 45,-118,48,42,77,-3,-48,3,-127,-2,-81,-22,-45,-99,-78,76,-82,125,15,-89,78,-107,-35,-34,-35,95,-56,-21,28,-61,-43,10,61,76,31,-37,-58,4,27,-51,31,33,-4,42,14,58,-110,34,-30,-58,58, 
  /* [36][0][][] */ 4,-44,32,-1,0,-9,-14,-5,-50,-55,-33,38,-28,-13,-67,6,9,-31,-2,33,4,59,15,36,14,127,-19,-23,-23,1,-5,-1,29,9,16,31,-7,4,13,12,-1,-1,26,27,-47,18,-42,-23,-25,-14,-27, 
  /* [37][0][][] */ 78,-15,-47,51,55,-26,-127,-14,-1,-33,-10,-1,-29,-69,41,-40,-29,84,41,-9,23,66,32,-27,-19,4,38,34,-74,26,20,56,15,44,3,-22,-26,18,35,-34,13,-7,-61,-49,0,25,36,62,10,62,-6, 
  /* [38][0][][] */ 12,-54,83,68,-55,17,-21,-30,40,-111,-59,7,-59,35,102,-3,-61,-18,3,8,13,-84,-59,-26,-26,3,-2,-82,17,-26,53,-33,-114,-43,13,-51,14,43,-17,-6,-50,26,22,-29,127,-32,42,0,-15,-108,83, 
  /* [39][0][][] */ 127,-18,-34,5,63,0,-4,-16,-51,51,8,43,-46,-24,-32,-61,31,20,115,31,-6,21,45,-24,14,-7,107,18,-26,79,-22,-58,30,32,-53,8,1,-4,-63,-25,14,-12,49,-29,-41,47,15,-31,-12,-22,15, 
  /* [40][0][][] */ 122,-117,-30,-108,80,-61,18,-11,41,-17,1,111,59,18,-81,4,50,-86,14,-29,8,22,-60,101,127,18,87,42,3,-23,-18,-55,85,66,29,-122,-32,52,116,-92,-123,6,3,-23,-42,15,-60,31,-8,-52,53, 
  /* [41][0][][] */ 12,-30,-4,-5,-4,2,22,-44,-25,-39,-24,-3,-6,36,-7,2,82,2,-9,23,-7,-26,-41,-25,-9,-17,13,-33,33,-14,-12,17,-38,64,10,4,-31,17,28,-61,-34,-5,127,7,-27,0,-17,-5,13,16,-58, 
  /* [42][0][][] */ -57,-12,-30,-23,31,13,37,3,-27,66,-14,0,58,66,-31,-31,12,-2,27,-2,14,33,-121,33,-89,6,-43,-30,11,43,-20,-17,14,4,-21,77,14,37,76,-35,17,63,-12,93,127,11,1,-32,-15,-57,-3, 
  /* [43][0][][] */ -7,-113,63,-98,-33,54,14,40,-43,10,55,-90,120,10,7,20,69,58,67,51,-32,-55,37,-14,-96,28,-49,3,-7,91,-60,-1,-50,56,-20,123,-15,86,127,34,-106,70,51,-98,9,-23,94,-24,-43,-107,-17, 
  /* [44][0][][] */ 109,29,-65,-14,53,-76,-98,-5,66,88,-10,-26,-71,67,-31,-52,73,8,127,-24,-103,-85,15,-42,35,-37,-11,99,32,7,39,-9,-42,-92,37,-38,41,-79,-48,-22,-33,-7,-81,-28,43,-2,21,41,37,-61,-51, 
  /* [45][0][][] */ -2,55,68,-26,-32,-15,7,17,-1,28,-10,-26,59,85,-24,58,-70,-31,127,-30,69,2,4,33,-5,-28,39,-23,-21,27,17,-18,1,44,18,26,-9,21,19,19,-7,77,17,21,-2,-25,53,14,-1,-8,-23, 
  /* [46][0][][] */ 23,-2,-51,-2,-24,43,36,-77,-10,-92,-46,-90,-28,57,36,-17,127,-18,8,-27,97,33,-36,-3,-52,-12,10,11,-67,-26,-50,-54,29,56,-32,-32,-46,2,-40,-30,-7,60,23,-33,-43,14,2,116,-25,14,-3, 
  /* [47][0][][] */ -38,-88,-3,-16,69,2,-7,-6,-16,-13,-78,67,-127,24,-18,31,30,38,24,-2,33,23,-33,-48,58,-14,-24,30,-31,-77,61,12,36,31,42,34,-45,101,-17,-63,4,-13,15,52,-22,-44,42,29,-63,-19,23, 
  /* [48][0][][] */ -35,-5,13,39,22,31,-50,44,-9,29,-6,42,-17,16,14,33,-46,-30,-32,16,-1,35,-31,23,-109,13,25,99,-3,31,-71,3,-46,56,-62,-108,-45,3,-7,2,-35,-17,84,32,73,91,127,3,-11,-30,16, 
  /* [49][0][][] */ -85,64,-25,-50,-68,-8,-46,-31,24,4,-15,20,22,10,-9,66,-21,-27,84,80,-32,11,66,-18,32,-63,-53,52,80,45,-11,-46,71,-87,-32,49,111,103,65,-40,-70,2,22,127,-51,-5,104,-28,-31,69,87, 
  /* [50][0][][] */ 58,107,6,6,19,40,63,-23,-40,5,19,18,50,13,-19,-11,15,13,-20,91,13,-28,-13,37,-36,8,42,-14,12,26,3,26,-12,67,7,51,17,-28,-32,-29,-81,-51,6,31,3,28,-20,18,-35,-3,127, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant24_scale = { 51, { 0.002649444155395031, 0.002808665856719017, 0.0016561357770115137, 0.0063324626535177231, 0.0034877357538789511, 0.0022264088038355112, 0.0019236276857554913, 0.0025489511899650097, 0.0031692625489085913, 0.0015687026316300035, 0.0061287395656108856, 0.0040724044665694237, 0.0047835586592555046, 0.0032771481201052666, 0.0031774269882589579, 0.0024018611293286085, 0.0024195155128836632, 0.0022975977044552565, 0.002305126516148448, 0.0046494477428495884, 0.0056996513158082962, 0.0037851894740015268, 0.0028185793198645115, 0.0027618671301752329, 0.0031137093901634216, 0.0021734687034040689, 0.0015565347857773304, 0.0033648689277470112, 0.0018029964994639158, 0.0036897803656756878, 0.0044865985400974751, 0.0052517964504659176, 0.002722583943977952, 0.0040947720408439636, 0.0043776808306574821, 0.0020641800947487354, 0.0037191968876868486, 0.0049984515644609928, 0.0039961952716112137, 0.0022824169136583805, 0.0020221630111336708, 0.0044215191155672073, 0.0035781136248260736, 0.0024396013468503952, 0.0029094235505908728, 0.0060196355916559696, 0.0037491547409445047, 0.0036773669999092817, 0.0022666351869702339, 0.0030828018207103014, 0.0029373671859502792, } };
const TfArray<51, int> quant24_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[51] = { -71, -12543, 2273, -1141, 18919, -5319, 718, -10229, 17404, 22287, -932, 32889, 25520, 28961, 2612, 34604, 2970, -291, 53, 45, 34237, 111, 22786, 5273, -4345, 7, 4790, 138, 2388, 49050, 27296, -92, 29193, -8440, 17007, 24839, 19067, -635, 21294, 20005, -9440, -60, 2983, 288, 28229, -386, -4652, -130, -603, -2281, -3225, };
const TfArray<1, int> tensor_dimension25 = { 1, { 51 } };
const TfArray<51, float> quant25_scale = { 51, { 0.00010535534238442779, 9.3623246357310563e-05, 6.9726629590149969e-05, 8.9504661445971578e-05, 0.00011957455717492849, 0.00020356383174657822, 0.00012724885891657323, 6.7523731559049338e-05, 7.0994050474837422e-05, 6.7931970988865942e-05, 0.00022919637558516115, 4.8623922339174896e-05, 7.2955561336129904e-05, 9.51702895690687e-05, 0.00012210769637022167, 5.7822344388114288e-05, 0.00010926788672804832, 0.00014499067037831992, 0.00015289190923795104, 8.7320157035719603e-05, 4.672567592933774e-05, 9.6435578598175198e-05, 6.4879655838012695e-05, 9.0257723059039563e-05, 0.00019915576558560133, 9.5175877504516393e-05, 8.0662932305131108e-05, 0.00014208228094503284, 0.00012938653526362032, 3.5025354009121656e-05, 5.0232196372235194e-05, 0.00013513525482267141, 5.5125117796706036e-05, 0.00011476018698886037, 0.00015725508274044842, 0.00010664497676771134, 9.3008144176565111e-05, 0.00016416625294368714, 0.0001204680884256959, 6.718672375427559e-05, 0.0001450004056096077, 9.3008144176565111e-05, 0.00013428316742647439, 0.00010007224045693874, 0.00010494060552446172, 0.00014418698265217245, 0.0004684781888499856, 0.00011467477452242747, 0.00014591112267225981, 0.0001103863978642039, 6.5707368776202202e-05, } };
const TfArray<51, int> quant25_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[1*3*3*51] = { 
  /* [0][0][][] */ 40,99,37,64,-10,23,42,25,-127,-63,36,3,-18,-74,127,-119,6,42,30,44,-59,31,-58,60,-62,41,64,30,26,-97,-69,46,-69,3,-69,-44,-61,30,-36,-19,11,52,17,-6,-38,55,-74,9,42,23,44, 27,127,61,84,-87,8,25,100,-29,-97,127,-127,-127,-70,14,-7,66,31,8,127,-48,71,-127,-33,-33,28,83,31,58,-103,-51,36,-87,32,-127,-31,-127,-33,-36,-24,71,61,41,89,-77,-94,-29,37,48,52,127, -38,41,-32,37,25,9,-33,-47,-89,2,-7,52,30,-62,66,-76,-27,-51,-16,-57,-27,-41,35,90,-42,-58,-25,-38,-38,-82,-10,12,3,-27,-17,-25,5,18,13,-12,4,9,-29,-50,-6,-20,-23,-9,-2,-1,-35, 
  /* [0][1][][] */ 60,37,43,56,-75,20,35,127,-63,-77,15,-99,-97,-75,-26,-75,7,47,9,37,-91,44,-52,-35,25,54,38,23,58,-82,-78,42,-117,40,4,-54,-40,19,-22,-106,18,59,5,13,-81,18,63,-36,40,21,27, 127,60,84,127,-127,-15,127,93,-16,-127,45,-95,-99,-127,-122,-114,127,127,127,76,-127,127,-100,-50,105,97,127,127,127,-127,-127,127,-123,127,-112,-127,-103,127,-127,-127,85,90,127,127,-127,70,127,127,127,127,85, -75,67,-33,13,3,26,-64,99,-46,8,-5,-68,-60,9,14,-69,-26,-62,-83,-9,-77,-36,-5,-6,20,-75,-45,-58,-62,-89,-79,6,-42,0,3,-35,-9,-44,11,-62,-17,34,-56,-25,-25,-127,3,-78,-21,-35,-6, 
  /* [0][2][][] */ 42,50,64,-12,43,53,41,-12,-63,-34,-6,-52,-7,-37,-11,-85,-13,-6,16,123,-97,23,-27,127,1,23,3,23,-5,-88,-10,-40,-42,41,9,-38,15,15,-53,10,41,12,18,14,-35,67,1,54,5,16,50, 23,-1,127,28,31,127,35,121,-16,-66,18,-107,-120,-71,-46,-127,55,-27,56,-53,-39,57,-63,69,127,127,7,52,-3,-84,-75,-34,-127,65,-55,-87,49,25,-68,-27,127,127,36,71,-94,81,-27,91,12,41,112, -16,81,-43,-17,28,22,-46,-3,-65,-2,-13,2,22,-28,-5,-63,-26,13,-41,98,-60,-32,-9,103,-18,-89,-28,-48,-31,-53,-4,-27,-15,16,0,-5,-20,-28,6,22,0,-53,-24,-18,-18,-21,25,0,-8,-20,11, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant26_scale = { 51, { 0.0052789351902902126, 0.0046910867094993591, 0.0034937227610498667, 0.0044847209937870502, 0.005991403479129076, 0.010199770331382751, 0.0063759316690266132, 0.003383344504982233, 0.0035572282504290342, 0.0034037996083498001, 0.011484114453196526, 0.0024363505654036999, 0.003655511885881424, 0.0047686030156910419, 0.0061183287762105465, 0.002897246740758419, 0.0054749771952629089, 0.0072649032808840275, 0.0076608024537563324, 0.004375264048576355, 0.0023412369191646576, 0.0048320014029741287, 0.0032508603762835264, 0.0045224539935588837, 0.0099788997322320938, 0.0047688828781247139, 0.0040416973643004894, 0.0071191755123436451, 0.0064830421470105648, 0.0017549805343151093, 0.0025169346481561661, 0.006771087646484375, 0.0027620994951575994, 0.0057501746341586113, 0.0078794239088892937, 0.0053435536101460457, 0.0046602664515376091, 0.0082257147878408432, 0.0060361744835972786, 0.0033664584625512362, 0.007265391293913126, 0.0046602664515376091, 0.0067283930256962776, 0.0050142202526330948, 0.0052581545896828175, 0.0072246333584189415, 0.023473570123314857, 0.0057458947412669659, 0.0073110237717628479, 0.0055310213938355446, 0.0032923335675150156, } };
const TfArray<51, int> quant26_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 3 };
const ALIGN(16) int32_t tensor_data27[51] = { 11088, 38568, -13591, -5357, 32085, 5928, 738, -10618, -2088, -5159, 4600, 17242, -10278, 4013, 3305, 17503, 12709, 4889, -216, -4622, 2123, -2440, 9850, 9123, 18914, -3446, 340, 10249, 5636, -6218, -7376, 9781, 4492, 16489, 17855, 3316, 32060, -6441, 2124, -1649, 29974, 20572, -8592, -4712, 28832, -14894, 22389, -8876, 6827, 5220, -3836, };
const TfArray<1, int> tensor_dimension27 = { 1, { 51 } };
const TfArray<51, float> quant27_scale = { 51, { 9.6245617896784097e-05, 2.8642416509683244e-05, 7.4620416853576899e-05, 5.7101991842500865e-05, 3.6034143704455346e-05, 3.3131404052255675e-05, 6.6549437178764492e-05, 7.0222326030489057e-05, 9.3182898126542568e-05, 7.9891840869095176e-05, 6.8540750362444669e-05, 7.1091330028139055e-05, 4.9916918214876205e-05, 3.6624031054088846e-05, 9.5211049483623356e-05, 5.1795694162137806e-05, 7.490954885724932e-05, 0.0001320428418694064, 8.0502337368670851e-05, 0.00015631699352525175, 5.1408107538009062e-05, 9.9327335192356259e-05, 0.00010374889097874984, 6.3314524595625699e-05, 3.7647994759026915e-05, 7.1301314164884388e-05, 5.8600686315912753e-05, 0.00010372926044510677, 5.4257357987808064e-05, 8.0376041296403855e-05, 9.1615147539414465e-05, 9.8767719464376569e-05, 7.0841917477082461e-05, 0.00010518819181015715, 3.7894064007559791e-05, 5.7081295381067321e-05, 5.3919240599498153e-05, 0.00010163291153730825, 5.1245951908640563e-05, 0.00010058207408292219, 3.2039264624472708e-05, 6.969151581870392e-05, 5.5509335652459413e-05, 6.9719950261060148e-05, 4.1919178329408169e-05, 9.8951655672863126e-05, 2.558316191425547e-05, 8.0543737567495555e-05, 7.7718555985484272e-05, 7.0803573180455714e-05, 0.00010835447028512135, } };
const TfArray<51, int> quant27_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[51*1*1*51] = { 
  /* [0][0][][] */ -25,10,-40,48,-45,89,-6,10,-51,19,-27,-16,97,10,-14,-57,-19,96,-5,-11,-2,36,3,52,-31,-8,-49,-70,-55,-24,-32,-2,127,-22,12,-68,15,-20,-13,24,-33,29,38,7,-49,-29,-30,57,-35,-15,29, 
  /* [1][0][][] */ 127,46,-52,-26,33,-28,-32,-19,76,77,-50,39,-19,-4,-3,-43,-49,-33,-16,-40,21,-83,14,23,32,-68,-44,-11,46,-32,45,69,6,50,-111,25,-12,-21,-57,62,70,-78,1,33,13,121,90,-21,-78,-44,52, 
  /* [2][0][][] */ -7,127,-38,-27,124,-68,-40,10,-64,-36,-19,-4,38,7,12,-9,-19,-10,3,43,92,32,31,89,26,-27,81,-46,82,-14,124,-11,44,-14,-24,-4,-48,44,-48,-17,-26,-5,64,-66,-57,59,-79,63,-11,-45,47, 
  /* [3][0][][] */ -12,80,26,99,-44,30,101,-22,-58,-90,-42,-20,22,76,-31,5,-127,72,-3,-21,57,-80,-5,5,27,-68,-22,-37,2,112,65,75,44,36,-108,-57,14,25,-46,13,20,6,-37,-11,24,17,62,28,58,62,47, 
  /* [4][0][][] */ -17,-81,-38,-84,77,-40,-127,47,-23,13,68,-102,22,-14,-8,-10,-94,-51,10,-42,85,0,-46,14,-7,-5,31,-12,-22,-11,-7,34,46,49,44,20,-79,91,39,-6,46,3,8,72,34,11,-18,-12,2,-60,61, 
  /* [5][0][][] */ -64,-32,79,71,-61,-11,-25,-36,-30,-36,-43,-6,-65,127,-34,-1,16,-16,-4,-7,57,-4,16,-7,30,-17,52,12,4,-20,64,117,1,30,23,51,15,-65,-5,77,-7,5,24,-20,16,9,-23,119,52,-19,61, 
  /* [6][0][][] */ 6,46,-71,-2,-16,-24,0,-17,-50,-18,50,-15,-6,-33,18,37,-37,-86,9,-10,24,-35,83,1,40,37,-1,44,-11,46,113,29,105,4,-34,1,13,-33,23,9,-4,-8,43,-3,-30,-6,-2,44,-11,127,13, 
  /* [7][0][][] */ -33,-33,76,-34,-14,18,-39,9,46,-13,-88,19,-15,-23,55,-6,41,60,-1,121,-2,53,66,11,127,4,38,106,35,60,12,-41,-3,-10,39,-26,36,-14,0,15,-27,-19,-48,49,27,40,71,8,45,-11,-44, 
  /* [8][0][][] */ -7,-1,19,0,-1,13,19,52,-14,1,-7,-1,-36,-3,-18,75,-1,-10,127,33,-11,28,63,-39,3,12,-33,-15,53,3,-7,4,-35,-17,5,24,1,38,-6,59,-21,5,-18,9,-7,6,-21,16,-45,-3,-26, 
  /* [9][0][][] */ -1,-7,-41,3,-16,36,69,100,-63,-36,-26,-22,-36,-12,46,6,-13,0,44,47,-35,-56,30,12,-16,-94,73,-40,-74,56,17,20,40,89,25,-14,23,-9,-8,127,10,3,42,90,-51,-4,92,9,-37,-7,-71, 
  /* [10][0][][] */ 32,28,-49,-55,37,7,7,20,4,91,36,3,0,-127,-34,-16,-20,-36,18,10,1,77,21,-10,-13,53,20,31,9,-101,-88,-77,-20,28,32,-9,36,41,4,-35,-27,9,19,-37,-2,-47,-65,26,-21,-13,-23, 
  /* [11][0][][] */ -18,-108,-43,0,-127,39,-40,-9,-14,6,51,79,37,70,-43,-61,37,-7,-126,-8,-18,31,1,2,-28,67,-32,-17,-122,-23,50,5,38,70,25,-37,-76,-13,32,26,55,14,-97,82,15,35,-25,11,112,25,-29, 
  /* [12][0][][] */ -44,28,28,50,-51,-127,1,-86,-61,112,59,89,61,84,64,77,-64,99,-24,-39,35,52,-6,40,121,36,53,-5,37,-47,-54,66,44,36,124,-25,-28,-34,8,82,23,2,-47,-47,-3,-54,-21,25,39,61,3, 
  /* [13][0][][] */ 9,-9,32,63,14,-36,49,60,31,4,91,86,-26,58,-53,-5,-48,46,28,-94,-5,54,25,-13,-21,-60,-7,-62,35,-81,42,-59,16,54,127,109,-2,56,-25,2,-27,-38,-29,-20,73,-53,53,58,8,18,-25, 
  /* [14][0][][] */ 2,59,9,-72,29,78,-47,11,-14,14,-3,22,22,-2,7,-36,26,-52,-46,48,-72,-8,16,83,-36,-30,-24,-23,40,-35,34,-33,-45,-62,-23,-46,-21,127,-3,-51,49,21,35,9,46,-7,-2,-5,46,-1,-7, 
  /* [15][0][][] */ -31,-42,20,33,30,-1,25,33,-58,3,-127,71,54,-31,-26,-31,-48,65,-15,-2,97,17,-32,-53,-35,-36,-55,-41,-1,4,-11,7,60,69,32,-16,-1,-71,-76,-10,-61,19,4,-13,-17,-64,6,50,13,96,74, 
  /* [16][0][][] */ -33,32,-93,51,-60,42,41,-127,-39,103,-3,-32,3,-19,48,87,-23,-26,18,-12,48,-2,88,-28,10,-66,3,-99,-3,10,-39,-15,49,53,-20,5,-37,2,-8,12,12,54,69,18,-21,-43,2,43,-48,-5,29, 
  /* [17][0][][] */ -1,-39,-17,33,-16,-47,7,24,0,-25,3,0,-5,41,-31,-14,57,40,-18,36,2,1,-32,-14,2,17,-16,-49,-3,1,24,9,-21,-7,-15,1,-25,-2,-6,1,-7,-20,10,127,3,3,-7,-2,-35,-5,5, 
  /* [18][0][][] */ -21,44,-12,16,23,5,67,-101,-37,22,15,88,40,-48,14,-19,-15,30,0,12,-71,-18,54,7,28,-21,-81,0,-40,-19,-7,127,39,35,-9,4,12,21,-22,-7,2,28,101,-11,35,-11,-56,18,-1,-49,29, 
  /* [19][0][][] */ 16,63,-14,41,33,15,127,-19,-35,-12,-21,-40,-13,1,28,-1,-3,-21,13,-57,-23,-5,5,-32,-40,-21,-20,-4,-4,-23,-33,45,-3,-4,-47,35,21,3,-46,5,-64,0,1,6,-47,-5,0,65,-40,-12,26, 
  /* [20][0][][] */ 90,-118,-100,40,127,-53,72,-51,-33,-84,-31,-32,-73,79,-40,-7,17,64,-33,-60,60,2,60,24,78,-72,-48,48,-36,18,58,-9,82,-83,82,105,-70,-19,-18,27,104,48,50,97,-23,-2,-127,-58,19,2,15, 
  /* [21][0][][] */ -40,1,-42,31,48,-14,-1,32,-43,1,-27,-17,73,24,-54,-32,21,-12,20,12,19,11,-18,36,-1,8,-59,-20,49,-21,-33,60,-30,12,13,0,2,1,10,24,-34,-8,62,-45,-29,-13,-5,25,50,127,20, 
  /* [22][0][][] */ 10,-37,1,-17,-50,-30,-13,3,-27,37,14,-31,2,32,17,-26,29,-11,-10,0,-31,0,-79,-1,11,10,38,-34,29,-30,-6,33,32,-52,-5,-10,-24,32,1,53,-10,28,-32,-11,-69,72,25,-5,-12,127,4, 
  /* [23][0][][] */ 21,-14,30,127,0,3,-5,12,-53,-45,10,19,110,53,-13,2,-24,0,20,-14,-29,67,-51,-43,-20,-9,4,14,45,-66,42,4,-61,25,64,-66,-3,-95,-12,5,-18,37,57,-45,-32,28,-57,62,6,-19,29, 
  /* [24][0][][] */ -60,37,27,21,-38,12,15,-45,-72,-67,18,32,20,17,127,12,-37,-11,13,-15,-38,11,-73,-15,1,-52,2,28,5,21,6,20,8,-27,101,32,22,-20,-71,48,68,50,68,-4,-12,-30,-27,-13,-32,65,16, 
  /* [25][0][][] */ -1,-22,-38,-15,19,2,-32,127,-19,-23,21,28,12,11,14,103,-3,-32,105,15,-31,-8,7,6,57,4,-40,5,15,-2,11,5,-30,-7,-16,-2,-2,-3,10,121,17,1,54,-11,-1,18,-14,25,-5,-1,-1, 
  /* [26][0][][] */ -69,-112,-48,-7,-24,-27,86,90,-80,115,-38,50,61,-76,87,-19,-54,41,-17,-48,41,45,-11,36,127,60,9,36,-67,-9,-64,-114,28,17,-21,43,11,26,-57,53,-45,23,59,-102,63,-10,21,93,26,-21,10, 
  /* [27][0][][] */ -27,3,-62,35,-15,-8,-17,-127,-57,-56,-16,-15,12,69,22,-59,-4,22,33,30,39,14,-14,-1,-10,-7,46,-41,58,1,-38,17,26,29,12,19,19,9,2,-62,-11,18,-2,-21,-64,16,-1,39,-3,-30,27, 
  /* [28][0][][] */ -8,127,0,3,33,9,-13,-24,-23,30,-13,16,3,5,19,39,11,5,-11,-36,31,-33,-35,3,-56,50,110,27,22,-16,-5,-24,9,14,-34,7,69,-2,-44,2,-86,-30,19,31,-54,48,-19,0,-5,-31,55, 
  /* [29][0][][] */ 127,-60,95,16,39,-16,-16,-34,65,-26,71,-10,-48,-20,-10,-13,-73,53,28,-60,81,20,-36,0,73,42,-56,-19,16,45,15,-54,-12,24,48,-7,-40,15,-4,-27,93,17,17,19,71,-14,89,-69,51,70,-57, 
  /* [30][0][][] */ 18,-32,31,4,-81,-95,56,31,-41,47,-24,10,4,57,-40,16,-127,32,14,61,58,21,91,56,-44,-21,-24,19,45,-69,-79,39,-41,1,65,57,2,16,-23,-20,21,106,-24,103,-34,-23,-49,-3,-33,0,13, 
  /* [31][0][][] */ -49,113,-34,44,-73,37,-38,-29,-96,-51,-31,-37,21,8,-23,-40,-45,26,19,-49,-48,1,47,41,-23,-25,-18,-10,2,-22,31,-54,95,-66,22,-115,56,5,-21,29,-9,-20,31,-13,-60,16,-17,127,-42,-22,115, 
  /* [32][0][][] */ -52,23,42,117,-59,-50,-34,-35,-47,-32,-16,-97,43,61,-71,-69,-93,29,-27,51,29,-76,-4,121,77,30,41,-2,9,-14,60,-14,59,31,127,-101,-24,-28,-23,-11,-22,47,6,-61,-56,-12,30,30,93,17,4, 
  /* [33][0][][] */ -7,12,-27,-22,-62,12,-18,-127,-28,34,19,40,4,-5,-48,-24,-68,5,51,3,-13,17,-30,34,-68,-12,68,-38,-29,-46,56,-12,11,52,-25,-5,-63,16,-18,-6,-34,57,48,-42,-23,81,57,4,28,-7,17, 
  /* [34][0][][] */ -48,-39,27,-11,-41,64,-77,-41,16,-29,-20,29,9,18,-4,56,69,-53,49,1,-2,-82,-4,-37,35,68,27,61,24,43,43,72,-19,-14,96,-22,127,23,-58,57,-93,4,-2,-11,45,-42,43,40,-79,-17,-17, 
  /* [35][0][][] */ -4,-33,-6,-66,-26,-29,127,-15,24,23,61,18,21,3,8,14,23,10,-25,-38,-23,-5,-19,18,-34,-13,52,83,98,-46,-21,16,-8,-8,-35,-32,-25,48,13,8,12,-9,-7,32,-26,-27,-11,-30,40,23,29, 
  /* [36][0][][] */ 13,-30,-8,-77,107,-42,-66,30,20,-11,38,-15,12,44,-13,10,-2,-9,5,-59,74,21,67,-28,-53,26,-46,-2,13,-127,-11,-7,17,26,-115,-34,-91,-102,46,-7,-22,-8,-21,2,7,38,-55,12,48,-44,-43, 
  /* [37][0][][] */ -13,-17,-13,49,-7,-40,-80,28,-45,-14,-56,68,44,1,10,-53,-79,-24,-12,-28,-31,38,118,22,51,38,54,3,46,-17,24,-83,22,-45,4,127,70,-36,-19,33,-13,18,22,3,-23,24,24,63,56,25,-26, 
  /* [38][0][][] */ 67,-14,105,30,34,11,42,30,-5,-16,74,-36,59,62,-65,-36,12,-13,38,-40,46,3,15,18,6,127,61,-19,-96,17,17,45,9,57,-80,18,14,6,25,3,-17,16,-16,-3,17,-36,19,-59,-12,6,16, 
  /* [39][0][][] */ 10,70,31,-42,-73,3,-6,0,-3,-27,8,-8,-20,-2,12,-26,127,-21,-3,-27,21,31,14,3,-46,-1,8,28,-28,22,7,-51,14,39,2,17,17,19,-34,-1,48,26,15,-12,-108,1,-5,38,-20,-28,15, 
  /* [40][0][][] */ -28,-2,-2,53,-17,23,-31,-51,7,33,-7,114,-50,60,-36,127,43,-77,-61,91,3,-4,-70,-4,-11,40,29,-82,59,88,51,117,5,40,23,-99,-84,-34,-11,44,-22,-56,21,-50,86,-26,-18,4,-78,-21,9, 
  /* [41][0][][] */ -50,-108,-48,-9,-89,-14,-127,8,-92,-20,-76,-10,-46,77,62,75,9,10,-21,-8,-47,-68,9,-30,-78,26,115,-12,-63,12,-6,-65,-3,88,76,-23,-53,-6,-2,114,-114,-5,-65,5,-107,74,-48,114,23,33,-5, 
  /* [42][0][][] */ -22,39,-52,-23,-86,-66,82,-2,-1,-37,-50,-12,127,2,-46,105,-28,-6,-44,-13,-41,-2,-17,36,18,-50,72,88,-17,-53,8,34,97,68,12,96,34,26,15,91,-60,89,46,-43,-32,39,-50,61,-2,-41,51, 
  /* [43][0][][] */ 37,-40,-102,58,67,13,84,-92,48,25,-15,-44,18,-10,2,-43,25,-87,47,-6,-18,41,-67,10,-50,-62,29,-1,28,106,-28,-33,83,-29,21,36,-40,-2,-18,20,9,-38,-5,79,23,127,-42,43,27,31,77, 
  /* [44][0][][] */ -18,43,-13,-1,-14,-21,-22,13,-19,56,-35,-24,50,-39,-18,1,-60,44,-23,76,-44,6,11,-62,9,55,-42,-37,-64,-25,-25,127,109,22,-27,7,21,15,-4,-30,5,-63,-87,38,-53,-6,0,9,70,-69,-2, 
  /* [45][0][][] */ -41,17,-47,18,-19,-13,122,-27,-44,-29,-26,120,117,11,-48,-15,-127,94,10,-14,51,5,17,73,-3,-55,-34,46,63,5,6,-43,47,58,10,-66,20,2,-52,0,-15,48,17,-43,70,27,78,-9,56,4,26, 
  /* [46][0][][] */ -82,8,12,-35,12,-20,81,23,14,-7,-15,18,0,15,-31,13,25,-5,-18,-6,27,9,20,9,-9,-14,-45,75,8,-11,22,-24,22,26,31,-17,12,-18,62,-31,-24,-36,-24,-16,57,34,18,127,21,18,-11, 
  /* [47][0][][] */ -17,52,-37,0,-127,38,60,4,-12,-14,13,-53,7,25,1,55,-8,39,4,18,-31,-16,-5,-66,47,-22,-3,-45,26,84,13,83,-25,46,35,40,-46,79,-8,16,25,13,14,-15,-73,22,-56,62,-5,19,70, 
  /* [48][0][][] */ -9,-36,-5,68,-109,6,17,6,48,9,-51,9,47,-15,-19,-24,2,-24,3,-37,43,15,-84,-5,13,-44,37,-37,-15,-114,-12,46,28,46,-8,-37,-44,-22,4,56,-8,32,1,-116,-48,-25,-15,31,79,127,67, 
  /* [49][0][][] */ 25,91,-73,-61,11,91,-82,-8,-24,-21,6,4,15,76,37,105,6,-74,-26,-35,-19,49,-46,33,55,-23,-83,10,-37,79,38,-22,76,41,42,1,2,-72,31,4,4,-23,-21,127,-59,17,92,-49,-12,-103,7, 
  /* [50][0][][] */ -23,18,-16,4,-61,4,7,33,-6,30,-30,-32,2,35,6,-12,-9,4,-5,8,-38,4,-25,-5,-24,-26,-21,-30,7,65,16,-13,33,-12,22,22,127,-30,1,30,45,29,14,-20,-14,11,23,49,-27,19,8, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant28_scale = { 51, { 0.0044706081971526146, 0.001330440049059689, 0.0034661178942769766, 0.0026523871347308159, 0.0016737856203690171, 0.001538953511044383, 0.0030912207439541817, 0.00326182646676898, 0.0043283449485898018, 0.0037109754048287868, 0.0031837173737585545, 0.0033021916169673204, 0.0023186404723674059, 0.0017011859454214573, 0.0044225524179637432, 0.002405909588560462, 0.0034795480314642191, 0.0061333891935646534, 0.0037393327802419662, 0.0072609232738614082, 0.0023879061918705702, 0.0046137538738548756, 0.0048191351816058159, 0.0029409592971205711, 0.0017487490549683571, 0.0033119453582912683, 0.00272200140170753, 0.0048182234168052673, 0.0025202538818120956, 0.0037334663793444633, 0.0042555229738354683, 0.0045877597294747829, 0.0032906066626310349, 0.0048859906382858753, 0.0017601789440959692, 0.0026514257770031691, 0.0025045482907444239, 0.0047208480536937714, 0.0023803741205483675, 0.0046720365062355995, 0.0014882235554978251, 0.0032371704000979662, 0.0025784082245081663, 0.0032384912483394146, 0.0019471455598250031, 0.0045963036827743053, 0.0011883376864716411, 0.0037412559613585472, 0.0036100263241678476, 0.0032888252753764391, 0.0050330641679465771, } };
const TfArray<51, int> quant28_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int32_t tensor_data29[51] = { -987, -679, 1386, -2647, -1578, -36, 17129, -2074, -7479, -8627, -159, -5794, -3891, 267, 336, 111, -108, 14770, -66, -41, 13001, 22425, -7188, 11433, -3705, -860, 2283, 19342, 18241, -809, 132, 695, 121, -4404, -138, 29436, 1540, -680, 21121, 330, 22945, -1595, -7447, -1025, 12584, -122, 1126, 32170, 25900, -2642, 5482, };
const TfArray<1, int> tensor_dimension29 = { 1, { 51 } };
const TfArray<51, float> quant29_scale = { 51, { 0.00010976078192470595, 0.0001644619187572971, 7.873203867347911e-05, 0.00019485627126414329, 0.00016736194083932787, 0.00011963274300796911, 0.00022981109214015305, 0.00019596799393184483, 6.8917928729206324e-05, 7.4030518590006977e-05, 0.00012567910016514361, 0.00016784353647381067, 8.8382934336550534e-05, 0.00024377736554015428, 7.8516088251490146e-05, 0.00013018504250794649, 0.00015965403872542083, 0.00019961239013355225, 0.00013742846203967929, 9.9832534033339471e-05, 0.00016965302347671241, 0.00028610645676963031, 0.00019473368593025953, 0.00010812550317496061, 0.00014343814109452069, 9.996619337471202e-05, 0.00012303559924475849, 9.1162823082413524e-05, 9.4254115538205951e-05, 0.00013048031541984528, 0.00018961522437166423, 0.00028099966584704816, 0.00013554588076658547, 0.0001217377430293709, 0.00017983329598791897, 5.5007174523780122e-05, 0.0001337347348453477, 6.8649074819404632e-05, 4.8716068704379722e-05, 0.00020610843785107136, 6.6824279201682657e-05, 0.0001901899668155238, 6.5521191572770476e-05, 0.00017465844575781375, 0.00028268352616578341, 0.00015412920038215816, 8.4626444731839001e-05, 0.00010839843162102625, 7.2181042924057692e-05, 0.00019903518841601908, 0.00018824449216481298, } };
const TfArray<51, int> quant29_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[1*3*3*51] = { 
  /* [0][0][][] */ -81,-7,-6,-12,16,27,-4,15,-26,-14,-12,8,-36,-14,2,19,1,6,15,-9,-10,13,-2,-5,-2,-8,8,-14,-6,-1,5,-9,-9,3,-12,15,-29,35,-78,-2,-80,-44,5,11,-13,4,-31,-72,27,-9,1, 8,-4,64,-7,13,59,-18,25,127,93,41,38,127,29,72,42,31,-22,92,46,13,-103,27,-51,41,37,21,-26,10,29,38,37,27,-9,-5,-7,31,-19,-93,25,-53,-59,15,-52,-15,-62,45,-78,-80,-60,45, 65,-8,-1,12,15,16,-3,17,-2,-24,-18,10,22,14,-14,25,2,-7,20,-9,-17,22,-2,4,16,-2,12,-4,-29,6,9,4,8,-11,-32,11,-13,41,-12,-15,-68,-36,16,2,-6,0,-3,-72,-23,-17,7, 
  /* [0][1][][] */ -127,-20,105,-19,9,-5,-13,37,69,54,7,15,57,2,24,24,-16,-59,80,9,-32,-41,21,-40,42,57,2,-13,-18,24,9,-24,-8,1,11,-51,19,27,-75,8,-36,14,94,-37,-46,4,28,-127,-127,-5,14, 0,127,127,127,127,127,-127,127,125,127,127,127,113,109,127,127,127,-127,96,127,-127,-127,127,-127,127,127,127,-127,-127,127,110,127,127,127,127,-127,127,-37,-119,120,-127,127,-40,127,-127,127,127,110,-7,127,23, 113,-3,27,3,12,16,-28,-6,102,65,-11,35,73,42,27,8,-24,-45,82,32,-13,-31,3,-29,8,50,2,17,-31,7,7,-9,32,55,-14,-23,12,65,-35,-52,-45,14,127,12,-33,7,6,-73,-104,7,12, 
  /* [0][2][][] */ -72,17,-1,16,-2,-15,0,-8,-5,11,15,3,-1,-6,18,-11,2,26,30,10,-10,-11,23,9,-6,-21,8,-7,4,0,-23,-2,4,1,0,-14,-40,26,-62,-54,-28,-4,48,9,-4,-1,-3,-79,-46,5,-25, 6,6,-70,-48,-20,-53,-9,-45,61,33,-3,-26,-44,-127,8,-72,-3,13,-127,-14,-14,-95,12,121,7,55,-54,-40,-45,-9,-127,-110,-58,16,31,-50,12,127,-127,-127,-38,19,95,2,-20,11,57,-71,-117,22,-127, 70,14,0,-3,-9,-40,1,-3,7,7,9,-8,-7,-56,27,-12,5,8,-61,-17,-3,-13,8,28,4,-26,8,1,4,-4,-21,-22,-15,13,-24,-9,-43,61,28,-50,-19,1,50,20,5,1,2,-55,-25,20,-39, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant30_scale = { 51, { 0.0063594221137464046, 0.0095287468284368515, 0.004561650101095438, 0.011289763264358044, 0.0096967713907361031, 0.0069313929416239262, 0.013315008021891117, 0.011354175396263599, 0.0039930311031639576, 0.0042892489582300186, 0.0072817122563719749, 0.0097246747463941574, 0.0051208124496042728, 0.014124198816716671, 0.004549137782305479, 0.0075427815318107605, 0.0092501835897564888, 0.011565327644348145, 0.0079624578356742859, 0.0057841897942125797, 0.0098295146599411964, 0.016576701775193214, 0.011282660998404026, 0.0062646758742630482, 0.0083106523379683495, 0.0057919342070817947, 0.0071285506710410118, 0.0052818763069808483, 0.0054609822109341621, 0.0075598899275064468, 0.010986102744936943, 0.016280818730592728, 0.0078533831983804703, 0.0070533542893826962, 0.010419348254799843, 0.0031870566308498383, 0.0077484473586082458, 0.0039774538017809391, 0.0028225567657500505, 0.011941702105104923, 0.0038717270363122225, 0.011019403114914894, 0.0037962275091558695, 0.010119522921741009, 0.016378380358219147, 0.0089300805702805519, 0.0049031656235456467, 0.0062804888002574444, 0.0041820923797786236, 0.011531885713338852, 0.010906684212386608, } };
const TfArray<51, int> quant30_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 3 };
const ALIGN(16) int32_t tensor_data31[51] = { 17786, -31724, 4119, -6643, 5543, -10151, 37187, 11941, -12531, 7873, 32698, -17900, -1445, 28484, 16851, -5680, -5230, 25169, 5520, -4520, 33218, 52085, 19027, 798, 608, -5282, 27135, 3057, -2650, 11091, 8772, 2685, 15955, 29571, 22409, -16372, 12483, 14404, -982, 2274, -10682, 31152, 6533, 23570, 27828, 13147, 12972, 43242, 60605, -89, 20801, };
const TfArray<1, int> tensor_dimension31 = { 1, { 51 } };
const TfArray<51, float> quant31_scale = { 51, { 5.5068740039132535e-05, 3.8006004615454003e-05, 6.8689507315866649e-05, 5.9259818954160437e-05, 5.1116992835886776e-05, 9.4857990916352719e-05, 2.5986391847254708e-05, 5.161641092854552e-05, 7.0380279794335365e-05, 0.00010125155677087605, 8.2875936641357839e-05, 5.9467845858307555e-05, 7.6932970841880888e-05, 4.5723831135546789e-05, 8.8703476649243385e-05, 8.1554040662012994e-05, 5.0531110900919884e-05, 3.3342534152325243e-05, 0.00013638754899147898, 0.00010895220475504175, 5.5158510804176331e-05, 2.1611975171254016e-05, 4.4991549657424912e-05, 6.553853745572269e-05, 7.7986958785913885e-05, 0.00012397480895742774, 5.9652153140632436e-05, 7.3462615546304733e-05, 5.5652446462772787e-05, 7.2163442382588983e-05, 6.0302721976768225e-05, 4.374380296212621e-05, 6.2921826611272991e-05, 8.8882276031654328e-05, 5.272238195175305e-05, 0.00010507446859264746, 0.00010045386443380266, 6.4302104874514043e-05, 7.2975177317857742e-05, 0.00011046061990782619, 9.0514869953040034e-05, 3.5516233765520155e-05, 6.4634361478965729e-05, 7.0972215326037258e-05, 3.9901155105326325e-05, 6.5723354055080563e-05, 9.9723787570837885e-05, 2.7574422347242944e-05, 3.7572044675471261e-05, 8.7029060523491353e-05, 3.2910840673139319e-05, } };
const TfArray<51, int> quant31_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[51*1*1*51] = { 
  /* [0][0][][] */ 24,5,127,-43,-16,-74,19,-12,-82,-7,17,-8,7,31,31,41,-81,-36,-1,51,-34,-17,-46,2,50,2,12,-35,-10,-36,-4,-9,38,-3,19,3,-21,-13,10,-56,43,10,58,-63,65,-18,-24,-35,21,-34,-15, 
  /* [1][0][][] */ 60,-2,66,66,74,-40,-23,114,-25,-31,20,-28,5,54,100,103,-18,2,82,72,-47,-6,-107,-20,56,-47,127,-41,26,103,63,-10,45,-54,38,31,-29,62,-9,37,82,59,94,37,69,-22,-11,-3,-49,-94,-4, 
  /* [2][0][][] */ -1,27,-25,-53,26,95,38,6,-12,-21,80,58,42,-23,-48,43,-43,-10,-65,41,71,-43,32,17,1,-4,-75,17,7,101,86,-6,-24,-23,-44,30,-56,-15,-33,14,-34,2,-59,-44,-68,127,-32,7,19,-39,-21, 
  /* [3][0][][] */ -19,1,-75,-42,58,-56,-28,-13,23,35,81,9,60,35,81,127,97,-73,-2,66,-1,-23,-59,120,35,44,15,16,18,71,-34,-27,-3,15,11,-63,-105,-5,-9,-63,0,21,12,30,20,24,-53,30,7,11,-70, 
  /* [4][0][][] */ -54,-15,-5,6,-5,83,-3,20,6,-39,-14,22,53,43,22,8,13,-7,-55,-22,49,103,-16,7,-79,-45,-5,4,108,-59,21,127,42,-8,-35,45,-41,30,62,83,-23,-29,-8,-6,11,-40,-16,14,37,-19,49, 
  /* [5][0][][] */ 61,-29,25,40,-5,4,10,-41,13,-43,10,41,62,34,26,-4,-51,-54,-5,127,-20,-13,8,-2,-20,-18,29,33,-32,11,29,-88,65,-8,-1,-63,23,11,16,16,30,68,-18,14,19,4,-36,17,34,-119,-44, 
  /* [6][0][][] */ 121,57,54,52,-1,-27,24,-73,127,36,33,103,-21,39,-36,38,-76,-54,18,66,20,-34,-6,42,40,-72,-27,28,9,14,-28,-49,4,32,111,22,24,-11,-92,76,-20,-120,-73,76,-24,-107,12,-36,7,47,11, 
  /* [7][0][][] */ 33,-19,47,-23,-50,1,0,-26,-11,7,-25,-32,2,5,6,-33,0,-23,24,52,-20,-30,18,-5,7,-32,-30,-83,34,-3,-2,-2,7,10,-19,-12,78,6,90,-21,-42,-10,28,-43,35,21,13,-11,-40,21,127, 
  /* [8][0][][] */ 127,14,-82,41,-35,-88,64,53,70,9,-16,21,48,29,-16,123,18,25,-18,-81,41,33,48,-64,-50,108,-6,-15,-66,119,52,-72,14,-12,25,25,-58,-48,-1,31,-3,-2,-73,-54,-13,73,41,59,-21,-21,-41, 
  /* [9][0][][] */ 3,-23,11,-12,-26,-36,-32,-7,28,-1,14,-20,-7,0,-28,34,41,-1,4,-41,29,-41,29,-47,17,-16,-9,19,40,-1,-76,13,-34,-24,2,-72,-16,-19,9,-65,127,40,61,77,12,-4,11,4,12,-23,3, 
  /* [10][0][][] */ 58,-51,-96,-113,-14,-83,32,33,72,17,27,-24,-96,13,96,57,-16,-40,-72,-16,-127,11,-20,-43,-46,-50,-89,-1,-19,-95,0,-39,-32,47,41,41,-80,41,21,-3,5,35,21,1,-69,-37,48,-27,53,34,-26, 
  /* [11][0][][] */ 7,-43,22,62,27,-24,-5,22,-2,33,6,-46,10,69,-11,-25,17,26,-42,71,35,11,8,28,19,14,104,22,76,35,48,-9,76,-6,86,-7,43,2,-37,8,54,-93,32,13,1,127,45,-8,0,-5,31, 
  /* [12][0][][] */ -43,-8,-24,-66,-15,12,50,-35,-1,23,15,-31,-37,-19,64,6,17,5,28,-43,-21,31,-21,33,14,2,-56,-24,-7,-41,-7,8,-40,-17,-53,54,14,50,25,19,127,38,-6,-47,-7,-1,23,-33,74,29,51, 
  /* [13][0][][] */ -4,-13,-16,-127,-4,3,3,-69,0,40,-12,-29,-52,2,-18,40,4,-11,20,-69,28,17,16,-6,-30,-24,11,-3,22,-8,-67,19,29,15,-17,-6,48,-14,34,-48,-35,34,24,8,29,14,124,46,35,-13,20, 
  /* [14][0][][] */ -27,-77,-92,1,-29,-127,-88,-15,-91,20,-23,-98,57,22,-4,50,18,37,-35,80,-32,-60,50,-9,30,59,-8,10,-37,-38,-15,-52,-42,-16,-34,-18,72,-22,-1,-78,69,60,-108,-47,94,-24,20,22,74,-16,55, 
  /* [15][0][][] */ -15,25,24,13,20,-7,-15,1,29,6,6,-26,47,3,-4,18,-9,-33,-2,30,-36,-23,-43,-2,48,16,41,-62,-33,-1,-9,-71,20,-1,-1,2,-5,6,22,-36,64,53,35,43,23,1,-11,-38,-61,-66,127, 
  /* [16][0][][] */ 14,-96,9,-2,-23,-77,65,-67,-59,26,20,-36,-10,-43,42,95,3,-30,78,-54,-44,15,26,85,-33,-43,-33,-46,11,6,-12,-49,81,31,53,-25,61,85,67,127,42,-25,46,81,4,-93,104,-49,27,54,-63, 
  /* [17][0][][] */ -11,9,-3,127,-41,48,49,46,37,-80,13,-7,43,-33,55,-86,27,17,-56,-37,35,9,56,8,-23,17,-52,-66,-36,33,-1,12,18,25,-21,2,-84,-34,-12,-47,-8,57,44,27,-53,40,-32,-3,-46,-121,-7, 
  /* [18][0][][] */ -2,-12,-14,-16,7,-30,-21,-3,-21,-15,15,-15,15,-1,-4,29,-9,6,-13,-9,-21,7,43,-11,5,3,10,-66,-14,-34,8,4,-10,-20,-15,-22,-29,25,127,-22,-52,-14,-26,-26,3,-1,0,43,28,-40,56, 
  /* [19][0][][] */ -19,53,6,-8,-8,12,-45,-20,-47,1,-93,-24,24,-43,94,65,57,4,-58,-40,-21,-34,12,-67,51,63,-13,1,-37,28,-31,-45,-28,-43,-33,-72,22,8,97,-76,-8,127,-74,-40,98,81,-39,-5,16,54,-4, 
  /* [20][0][][] */ 39,-37,36,11,10,-42,-38,-28,-28,20,-29,-2,-27,42,37,33,22,15,-127,-43,26,3,9,-59,-29,20,-44,-37,-3,11,45,21,30,-18,40,20,-7,-35,17,-33,-18,-13,-91,-19,-1,9,22,19,-31,-3,-14, 
  /* [21][0][][] */ 2,5,81,-46,127,45,10,-60,11,-34,2,-44,-12,8,-39,26,46,-27,-4,4,-33,13,71,123,8,-60,-20,-54,-46,-59,-32,-16,-89,-59,12,85,48,5,-23,61,-29,-60,3,10,-35,3,-21,-10,90,68,64, 
  /* [22][0][][] */ -13,32,53,36,5,21,-22,-75,8,-11,127,-43,-39,-21,87,-32,37,21,8,-25,-49,-8,68,59,19,21,10,17,48,-53,39,-6,-11,-29,36,27,-18,28,-11,18,-8,17,-18,-24,-41,-80,35,-5,50,-109,32, 
  /* [23][0][][] */ 43,34,23,76,32,2,-23,69,-50,-66,26,-20,-51,25,65,-12,23,34,30,59,-12,-4,21,33,35,-10,5,-16,5,-19,32,-10,-24,20,32,68,-127,14,-5,-49,44,42,61,-31,-24,-38,-14,-11,-3,-15,-58, 
  /* [24][0][][] */ -52,64,-84,73,42,111,5,31,-50,27,25,27,81,-67,5,60,54,36,-50,-6,17,-18,-22,-21,16,27,-49,-6,-56,8,8,-6,14,-13,-20,-20,-13,-19,-45,-113,-69,23,-103,-46,8,127,4,51,-29,-50,16, 
  /* [25][0][][] */ 46,34,19,-33,-48,-28,-12,18,11,7,15,18,-41,16,-14,0,17,25,5,13,-11,-28,-31,-22,20,-55,-12,47,-5,-23,26,7,3,35,-6,-50,-9,7,-4,-49,17,-49,3,21,2,127,-2,-12,13,40,17, 
  /* [26][0][][] */ 26,-83,-74,-73,14,-7,0,-77,-38,15,12,16,-69,56,58,91,15,19,126,-37,-81,6,-42,-24,-100,-9,-9,-49,43,-71,-49,-34,-82,-23,-42,-97,-28,38,-89,-3,-37,56,26,60,69,-94,46,-41,44,-86,127, 
  /* [27][0][][] */ 20,56,-14,-77,118,36,14,46,38,-33,13,-63,34,-4,20,9,-74,-8,17,80,-43,-57,127,-15,-14,67,-40,-54,7,56,-27,1,67,-22,21,13,-9,-12,32,-52,-39,-7,3,-41,-14,-4,-16,52,41,-66,-30, 
  /* [28][0][][] */ 30,49,25,-5,-47,79,-3,69,22,-16,-22,96,96,-103,-81,62,-3,-59,30,95,44,-14,-3,12,15,-26,-45,5,-50,81,9,-5,-15,34,-40,-2,-66,-40,-15,-4,22,-23,-127,31,-27,90,-14,31,-30,2,38, 
  /* [29][0][][] */ -35,-28,33,32,110,36,3,-22,-39,-26,66,-35,-73,-40,-68,-23,-31,10,-43,9,-21,0,23,87,32,-58,-57,-12,50,-23,-50,127,-13,-24,-12,22,36,109,7,33,-77,29,75,-9,25,3,-3,-2,37,-62,5, 
  /* [30][0][][] */ 18,-24,39,127,-1,-6,21,58,-32,-9,15,49,-36,-14,-29,-16,26,-4,3,11,8,12,-65,13,0,0,28,-58,9,-14,48,27,-46,14,-2,3,14,-4,-55,-41,24,30,-24,4,-11,-6,-20,-98,-17,27,78, 
  /* [31][0][][] */ -14,-18,88,-29,13,23,29,15,29,-40,5,-21,23,-4,15,45,-15,5,-10,12,-13,11,-13,-15,-6,27,3,-24,-17,15,43,24,28,5,-38,76,-34,4,15,-37,127,-1,-29,-69,48,56,-1,-19,9,-4,-17, 
  /* [32][0][][] */ -14,-30,-50,63,-5,-13,-12,39,-63,-79,21,86,-19,64,-52,-4,-78,23,93,127,-72,-59,-90,11,-23,7,2,-57,49,-20,-44,24,62,-26,35,-31,-96,-15,-8,-12,95,-66,-41,-90,104,-32,-2,-102,37,-74,15, 
  /* [33][0][][] */ 50,6,-27,-100,45,30,-4,-127,-24,45,-4,-32,-84,4,-30,37,92,42,37,-108,40,-35,27,-17,-43,-66,45,-30,-31,-27,-50,-64,-123,-11,26,38,13,-1,-12,-19,-4,34,-87,-23,33,-30,107,-68,30,26,-7, 
  /* [34][0][][] */ 32,-127,-4,-14,14,28,-12,-74,-36,4,2,-29,36,21,73,51,39,9,-47,-19,-20,-64,-18,87,18,-38,-24,-23,43,-21,-68,70,30,56,67,19,-51,10,8,-71,-39,-60,-70,33,-1,41,48,13,28,1,6, 
  /* [35][0][][] */ -34,-25,100,63,21,16,0,-66,-83,17,-72,122,14,-34,-66,58,18,15,-37,115,-13,14,-35,73,-18,72,-29,-53,-62,57,-127,-100,77,-21,-52,19,87,37,-3,117,-70,117,29,62,-32,-18,-3,47,-9,-20,-19, 
  /* [36][0][][] */ 41,-32,-14,-13,15,-80,-1,-42,-127,8,-13,10,-47,8,43,52,14,-6,-13,-29,21,0,-16,-6,-24,-7,-1,17,-13,70,68,29,-57,39,19,-13,-1,-28,20,-74,-16,-32,41,-26,5,16,-9,-3,8,-15,-14, 
  /* [37][0][][] */ 77,-62,92,36,109,49,-82,22,20,-127,46,-8,5,4,68,77,50,5,-44,-124,48,-53,-61,5,34,-42,-35,-50,-26,-12,-36,3,-28,-95,-6,-50,-37,43,104,-63,-12,-26,-86,-19,-9,79,-54,-32,14,56,-67, 
  /* [38][0][][] */ 28,-127,73,-49,14,-67,23,-28,-112,-10,-48,20,-24,47,-39,70,27,-52,-2,5,38,-13,6,-11,60,61,66,-28,31,116,86,86,-22,-33,36,-20,2,-8,5,-5,-26,-4,115,16,-10,-59,-78,7,103,-71,32, 
  /* [39][0][][] */ -3,-8,18,7,3,-5,-9,18,9,6,-18,-4,-13,7,-10,29,11,18,13,-1,20,-3,-3,3,-2,2,-7,-102,-6,1,-13,-3,14,3,7,16,-2,2,11,-12,-22,-3,11,-19,-31,5,2,5,6,7,127, 
  /* [40][0][][] */ 3,-25,13,37,21,-11,-27,-18,3,-6,-36,-5,67,51,45,21,-6,6,127,-2,28,37,-28,34,-19,-28,27,-11,80,-43,-28,-67,6,-4,11,3,-36,67,39,18,-21,-43,16,17,-2,9,-2,2,21,-9,-1, 
  /* [41][0][][] */ 84,57,-13,8,-11,-28,-41,-65,22,17,86,127,-49,19,-78,87,-33,43,81,57,-61,-76,-72,-67,30,-13,123,19,-24,10,-72,-46,-23,-53,-51,-89,-54,-9,-22,-81,91,7,-75,-92,44,56,3,-1,-43,-45,13, 
  /* [42][0][][] */ 9,-26,112,17,-9,-75,7,-55,-46,-78,-57,59,68,48,-4,61,-31,-90,11,48,-28,-35,6,36,-85,6,36,-10,-12,11,-49,-9,-82,13,53,-127,40,68,-12,40,85,22,-39,-13,-12,-45,-27,-14,6,-53,60, 
  /* [43][0][][] */ 71,19,-26,-44,3,38,67,10,38,39,-23,7,-86,35,-33,-10,-4,-56,-70,-12,21,-8,-80,51,-41,12,-32,6,44,-51,114,-4,14,-127,34,54,-81,12,-6,-16,-49,30,12,-3,10,-97,29,-56,40,88,10, 
  /* [44][0][][] */ 64,25,68,-42,2,-55,-7,-36,-83,31,62,-19,-106,97,20,1,-22,9,51,40,2,-21,-36,-10,-13,-51,-26,-20,10,-111,19,-7,19,-20,51,-53,37,38,37,61,127,-107,-19,10,31,-88,82,-3,-2,3,-11, 
  /* [45][0][][] */ 67,-22,-65,113,-19,-85,23,9,8,40,40,66,-7,-12,-29,127,-28,16,73,-34,-7,-29,0,20,-11,16,27,-49,-24,93,-71,-68,-63,-73,18,85,-18,-15,-25,-91,-106,18,29,-113,37,-123,86,34,-12,44,5, 
  /* [46][0][][] */ 55,-62,16,-42,-8,67,-11,18,-1,-12,32,26,-27,-12,-66,-6,25,44,-51,7,83,5,-69,11,22,-127,71,-11,15,19,11,-29,-42,64,-14,13,-42,-9,-38,-21,18,-85,3,88,-39,14,23,-37,-24,20,43, 
  /* [47][0][][] */ 2,27,37,25,-61,-32,15,-1,-4,-18,13,53,2,-57,36,-28,-127,-13,24,91,-51,16,11,-7,-45,-55,15,-11,28,-51,1,26,-16,-47,-73,15,83,33,-51,-28,46,54,5,4,17,-32,-52,-5,-20,-35,-23, 
  /* [48][0][][] */ -18,-80,29,-49,-83,-2,18,-21,20,88,-7,3,54,96,-123,-105,33,-66,-121,-69,13,14,-107,-13,-61,34,-116,5,7,0,-12,22,-31,-115,4,36,-127,-46,-48,0,-97,50,105,-32,-47,-2,15,-13,101,94,-43, 
  /* [49][0][][] */ 5,-13,-7,10,12,-10,127,6,-22,-12,84,-31,2,7,-10,10,-37,59,25,2,-9,-14,4,5,14,25,28,-14,-8,-7,1,19,-33,37,-10,-15,-47,-12,4,20,3,2,-49,-27,4,-2,3,32,-3,50,-4, 
  /* [50][0][][] */ 103,90,30,109,-90,-59,22,71,-81,121,-18,51,25,39,-91,-44,20,-93,-71,49,57,-7,-76,4,44,-102,21,2,40,25,13,-44,42,-127,76,-11,-40,12,15,106,-45,24,-46,-6,74,16,53,-5,-29,62,-58, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 51,1,1,51 } };
const TfArray<51, float> quant32_scale = { 51, { 0.0028618467040359974, 0.0019751198124140501, 0.0035696993581950665, 0.0030796511564403772, 0.0026564798317849636, 0.0049296393990516663, 0.0013504769885912538, 0.0026824339292943478, 0.003657566150650382, 0.0052619040943682194, 0.0043069482780992985, 0.0030904621817171574, 0.003998100757598877, 0.002376204589381814, 0.004609797615557909, 0.0042382511310279369, 0.0026260323356837034, 0.0017327656969428062, 0.0070878732949495316, 0.0056620961986482143, 0.00286651193164289, 0.0011231446405872703, 0.0023381488863378763, 0.0034059474710375071, 0.0040528750978410244, 0.0064428001642227173, 0.0031000403687357903, 0.0038177510723471642, 0.0028921810444444418, 0.003750234842300415, 0.003133849473670125, 0.00227330531924963, 0.0032699606381356716, 0.0046190894208848476, 0.0027399095706641674, 0.0054605756886303425, 0.0052204490639269352, 0.0033416918013244867, 0.0037924195639789104, 0.0057404865510761738, 0.004703933373093605, 0.0018457298865541816, 0.003358958987519145, 0.0036883282009512186, 0.0020736081060022116, 0.0034155522007495165, 0.0051825079135596752, 0.0014330047415569425, 0.0019525674870237708, 0.0045227804221212864, 0.001710331067442894, } };
const TfArray<51, int> quant32_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[51] = { 214, 17151, -1394, 3422, -813, 12203, 8995, 6291, 11409, 4658, -666, -3793, 17721, -257, 20651, 37026, 47009, 23302, 15745, -905, 13385, -196, -384, 435, 4519, 26837, -2100, 7312, -306, 15391, 14903, -981, 303, 16317, -367, 427, -11958, 2079, 3119, 2351, -237, -248, 788, 884, 33677, 5128, -1261, 16543, 73, -855, 2117, };
const TfArray<1, int> tensor_dimension33 = { 1, { 51 } };
const TfArray<51, float> quant33_scale = { 51, { 0.00022887354134581983, 9.9246564786881208e-05, 7.0780297392047942e-05, 0.00014050246682018042, 0.00016615939966868609, 0.00021149025997146964, 0.00014507169544231147, 4.4568478188011795e-05, 0.00023681618040427566, 9.4631475803907961e-05, 0.0002224618656327948, 0.0002315475867362693, 0.00018189434194937348, 0.00018875360547099262, 0.00010897098400164396, 8.9018591097556055e-05, 3.5057379136560485e-05, 5.130469799041748e-05, 0.00012375878577586263, 0.00015520564920734614, 0.00023162944125942886, 0.00010592384933261201, 0.00010693834337871522, 0.00017201529408339411, 9.9688200862146914e-05, 5.5061635066522285e-05, 0.00015495589468628168, 0.00017860686057247221, 0.00012873540981672704, 0.00015714898472651839, 0.00011917057418031618, 9.1776055342052132e-05, 5.3909498092252761e-05, 9.9143369880039245e-05, 0.0001022572469082661, 0.00014942712732590735, 0.00014240872405935079, 0.00026061353855766356, 0.0002054063807008788, 0.00010034286242444068, 0.00025152211310341954, 0.00012492822133935988, 0.00014935641956981272, 4.7278772399295121e-05, 3.7055549910292029e-05, 0.00019192851323168725, 0.00019659512327052653, 4.9610873247729614e-05, 0.00018785025167744607, 0.00020869979925919324, 0.00015753420302644372, } };
const TfArray<51, int> quant33_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*51] = { 
  /* [0][0][][] */ -19,-30,8,-8,3,1,20,13,-1,-25,-3,3,-15,-2,-2,16,-36,-72,16,-6,-8,15,3,5,127,-14,-2,4,0,5,10,-18,-28,-14,-50,-14,-4,9,-5,-19,-2,-9,-4,0,29,1,8,-14,4,-2,1, 19,-26,36,-18,2,-3,-42,24,-26,-35,0,-13,16,5,-41,-102,-95,-85,-15,-23,-25,1,-16,-3,89,-127,-21,14,7,-12,-31,6,12,-76,-1,-127,48,33,-51,77,-32,1,-5,-11,-78,-33,-19,-3,-77,-17,-65, -14,-25,19,-14,4,7,13,20,2,13,-8,2,4,-4,-1,6,-45,27,12,-26,-7,11,0,2,100,2,1,15,5,8,2,-13,2,-4,45,-1,-28,8,-11,-18,-6,-7,0,24,36,0,-12,-7,-13,-2,-16, 
  /* [0][1][][] */ -51,-46,22,-32,24,-27,18,12,-6,-127,-6,-15,-26,29,2,-56,-96,-127,22,-16,0,5,-15,11,-76,-4,-15,18,-12,-19,-7,22,127,-20,-127,6,40,17,-42,-46,-15,11,-7,77,-127,-28,-12,-49,-46,-32,-51, 127,-127,127,127,127,-127,-127,127,-127,6,127,127,-127,101,-127,-86,-11,10,-127,127,-127,127,127,122,-121,-65,127,-127,127,-127,-127,127,116,-127,38,15,127,-127,127,127,127,127,127,127,0,127,127,-127,127,127,127, -38,-45,-8,-5,14,-17,23,22,0,114,-30,-20,-10,-127,9,-21,-79,-18,28,52,-4,-44,-6,4,-95,26,-18,-24,-4,-6,8,14,20,0,98,-5,37,25,-22,-42,-19,3,-16,49,-75,-24,-98,-79,-25,-18,-13, 
  /* [0][2][][] */ -20,-2,1,-14,-37,7,5,13,6,-34,-23,-10,-5,6,5,10,-127,-2,14,-3,0,27,0,-15,-12,6,-16,9,-13,4,2,-10,10,35,-54,17,3,8,-4,-36,0,-10,-5,19,-13,-7,0,-18,-3,-5,-16, 11,22,18,36,-107,9,35,43,-15,-8,-37,-21,-20,-6,-36,-127,-102,0,-5,-8,-12,-89,-1,-127,-17,-97,26,-42,20,10,-22,12,-1,-3,-5,106,25,23,6,115,9,8,-11,-13,-104,-6,19,-47,25,1,25, -7,-5,7,-9,-25,8,12,0,5,37,-24,-7,4,-5,0,-48,-45,27,7,-7,-3,33,5,-9,-38,6,-21,8,-7,3,2,-3,-8,26,57,12,-6,11,5,-16,-4,-14,1,19,-30,-5,-37,-37,2,8,22, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,51 } };
const TfArray<51, float> quant34_scale = { 51, { 0.016610171645879745, 0.0072026783600449562, 0.0051367795094847679, 0.010196766816079617, 0.012058782391250134, 0.015348604880273342, 0.010528371669352055, 0.003234494011849165, 0.017186596989631653, 0.0068677444942295551, 0.016144853085279465, 0.01680423691868782, 0.013200723566114902, 0.013698524795472622, 0.0079084141179919243, 0.0064603975042700768, 0.0025442393962293863, 0.0037233654875308275, 0.0089816180989146233, 0.011263829655945301, 0.016810176894068718, 0.0076872725039720535, 0.0077608982101082802, 0.012483765371143818, 0.0072347293607890606, 0.0039960197173058987, 0.01124570332467556, 0.012962139211595058, 0.0093427896499633789, 0.011404863558709621, 0.0086486348882317543, 0.0066605168394744396, 0.0039124051108956337, 0.0071951891295611858, 0.0074211740866303444, 0.010844461619853973, 0.010335110127925873, 0.01891365647315979, 0.014907076023519039, 0.0072822403162717819, 0.018253859132528305, 0.0090664876624941826, 0.010839330032467842, 0.0034311895724385977, 0.0026892537716776133, 0.013928938657045364, 0.014267611317336559, 0.0036004385910928249, 0.013632964342832565, 0.015146090649068356, 0.011432820931077003, } };
const TfArray<51, int> quant34_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[51] = { 60138, 3495, 32817, 9110, -3558, 47748, 14707, -4769, 6545, -3020, 41295, 29162, 59641, 14773, -981, 58605, 3652, 5550, -12398, 4158, 53724, 15294, 19177, 62102, 85341, 32182, -4805, -5278, 2888, 67323, 20082, -22758, -38712, -9900, -5692, -6038, 21611, -25190, 5206, 43662, 14340, 35139, -6066, 4867, -2412, -12866, 22785, 4300, 29418, 4477, -6049, };
const TfArray<1, int> tensor_dimension35 = { 1, { 51 } };
const TfArray<51, float> quant35_scale = { 51, { 3.411461875657551e-05, 9.8945034551434219e-05, 6.3436375057790428e-05, 5.6345725170103833e-05, 3.390723213669844e-05, 4.1117778891930357e-05, 0.00012972977128811181, 9.2305002908688039e-05, 3.7323006836231798e-05, 8.0703146522864699e-05, 5.9896963648498058e-05, 6.132661656010896e-05, 3.4778404369717464e-05, 4.4493350287666544e-05, 6.6873646574094892e-05, 2.341767685720697e-05, 9.0481866209302098e-05, 9.6651347121223807e-05, 6.351927004288882e-05, 7.7789052738808095e-05, 3.455534897511825e-05, 7.0788053562864661e-05, 8.4983796114102006e-05, 3.6606441426556557e-05, 1.8705850379774347e-05, 7.4878145824186504e-05, 9.2421018052846193e-05, 8.0996003816835582e-05, 0.00010457609459990636, 4.5799813960911706e-05, 6.588715041289106e-05, 6.9006076955702156e-05, 7.6987438660580665e-05, 4.8336267354898155e-05, 5.0944108807016164e-05, 4.5510270865634084e-05, 3.9219681639224291e-05, 6.9067449658177793e-05, 8.8091044744942337e-05, 3.7479388993233442e-05, 5.0429804105078802e-05, 5.6995631894096732e-05, 6.0218921134946868e-05, 7.1178503276314586e-05, 0.00010880074114538729, 8.7824526417534798e-05, 6.1027109040878713e-05, 0.00010096623736899346, 7.2987371822819114e-05, 0.00010514202585909516, 9.752204641699791e-05, } };
const TfArray<51, int> quant35_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[51*1*1*25] = { 
  /* [0][0][][] */ -39,-127,14,47,-66,-60,46,-8,-22,-18,-28,63,-109,-25,2,22,90,11,0,34,-55,-4,-49,-15,-45, 
  /* [1][0][][] */ 39,-15,2,-26,0,15,12,-23,21,18,-21,-30,12,127,3,-8,16,10,22,-40,-4,7,-10,4,-17, 
  /* [2][0][][] */ -7,127,-16,-91,3,-38,-58,38,-66,-82,-56,64,68,-34,-19,-86,31,-41,37,-4,8,-24,-85,-16,49, 
  /* [3][0][][] */ 35,-87,-91,-44,-25,-23,104,127,-43,27,-84,12,-36,57,-13,-18,2,-5,-7,36,0,104,55,6,60, 
  /* [4][0][][] */ -20,10,-19,63,-11,-61,-14,42,18,51,-33,0,119,66,4,-30,90,127,3,-23,-114,-34,71,4,18, 
  /* [5][0][][] */ -10,6,-127,93,-59,-112,20,0,56,-53,-19,89,-43,14,65,24,99,-18,22,8,-96,-14,-88,6,-42, 
  /* [6][0][][] */ -127,-30,-14,-1,-7,-1,-19,-19,3,-7,2,-6,16,-9,2,1,-4,4,29,-35,9,5,1,-3,-7, 
  /* [7][0][][] */ 127,-34,-16,83,-23,74,14,-60,-50,121,-105,55,-4,-29,5,70,-26,-3,90,-10,-15,55,-94,32,-34, 
  /* [8][0][][] */ 30,-36,33,26,25,19,-74,3,31,-81,-6,-38,1,55,1,-35,124,127,-6,16,-82,-30,49,39,56, 
  /* [9][0][][] */ -2,51,-52,-37,18,3,10,-68,21,-23,127,16,29,-21,-12,-15,-13,16,49,9,19,-26,42,-10,-6, 
  /* [10][0][][] */ 112,-95,-40,-13,-2,-18,-30,103,-25,-46,13,21,-14,-37,-23,42,30,-45,-127,-14,-9,119,-26,-76,43, 
  /* [11][0][][] */ -54,-124,-49,-15,8,19,-61,-127,3,-23,-5,69,101,-71,-13,26,-42,56,29,-16,24,13,-31,-3,-10, 
  /* [12][0][][] */ 24,-61,88,-28,61,-92,-1,-42,56,57,27,-27,-6,-32,37,-5,5,-94,-10,30,-26,-14,-98,-127,16, 
  /* [13][0][][] */ 0,-9,10,-4,6,6,19,3,9,-9,-6,14,4,127,-20,126,6,-53,27,-7,35,-2,-22,5,-41, 
  /* [14][0][][] */ 5,-55,19,-67,41,46,76,-42,-63,42,42,81,127,-48,4,43,-39,51,-29,-88,1,33,20,21,9, 
  /* [15][0][][] */ -69,-59,-1,-77,62,-70,49,-71,-99,27,5,37,-72,5,-32,-33,-47,77,-127,43,11,16,-63,100,115, 
  /* [16][0][][] */ 19,-23,19,127,38,48,-12,-21,-43,0,4,-20,16,-14,-16,-39,-10,-15,51,-2,18,-12,-59,50,-1, 
  /* [17][0][][] */ -125,41,-79,37,25,35,-11,-59,-17,-71,-61,-4,-3,36,-5,18,34,-3,49,-29,-6,5,18,127,-30, 
  /* [18][0][][] */ -9,75,119,61,-68,11,72,43,52,-15,37,-35,-91,109,17,82,25,-127,24,-19,-82,-9,62,-30,83, 
  /* [19][0][][] */ -45,3,110,47,8,-114,-37,-1,-20,86,-127,-15,-4,16,12,0,-16,-15,33,-86,14,6,57,107,4, 
  /* [20][0][][] */ -41,-52,-26,10,79,9,-65,-2,-127,84,-12,-19,72,-34,3,-33,26,-95,-33,-31,-42,20,-22,19,-69, 
  /* [21][0][][] */ -13,35,65,104,-17,-65,-28,97,32,-115,5,-127,0,26,15,-91,-103,-38,65,36,78,-3,2,-12,-26, 
  /* [22][0][][] */ -3,49,-127,-13,-44,-37,115,57,-22,69,-58,60,37,19,-6,-4,45,14,-93,-98,-26,-30,-49,-16,-6, 
  /* [23][0][][] */ -18,-8,-41,-29,14,-86,43,95,-115,-28,-7,-43,-121,127,8,-71,-105,-34,20,-20,17,26,-5,36,-77, 
  /* [24][0][][] */ -31,-5,-23,-25,-61,38,70,25,-119,-75,-32,23,-126,127,8,70,-113,-75,37,-127,65,-54,-14,78,-32, 
  /* [25][0][][] */ -26,-53,-17,90,-36,-118,-65,26,29,-86,-2,106,-6,-27,74,-13,127,27,1,-28,-74,7,-98,42,-42, 
  /* [26][0][][] */ -47,-49,-1,-63,-17,41,-30,11,-15,58,7,40,16,-18,-33,-29,19,127,-15,-4,-29,0,41,-36,12, 
  /* [27][0][][] */ 6,50,7,9,-7,-2,13,-12,-9,3,7,28,-29,11,99,-11,-11,7,-15,-18,4,127,9,21,2, 
  /* [28][0][][] */ -61,-71,-50,27,36,-21,24,109,-4,-39,-18,79,-69,36,0,-40,-24,113,32,11,127,-15,-80,12,-45, 
  /* [29][0][][] */ 21,-50,19,37,-25,-75,-30,25,42,-127,92,-92,-60,-14,13,31,-110,-17,15,-85,57,43,-48,-98,-12, 
  /* [30][0][][] */ 27,18,-63,-65,-20,18,-1,-35,-127,80,7,47,39,63,-4,-19,-19,49,20,20,16,-27,-24,1,-116, 
  /* [31][0][][] */ -1,32,-9,8,56,99,-49,-4,-28,24,26,-36,51,102,-59,-20,120,-100,-16,-8,-15,-7,127,1,60, 
  /* [32][0][][] */ -41,-3,22,82,112,37,-26,91,56,86,127,39,-39,2,6,-92,-55,-50,-5,107,-9,-46,-34,90,59, 
  /* [33][0][][] */ -40,69,118,-11,23,99,99,-24,67,53,7,52,8,11,-7,-23,-65,30,14,-61,-27,9,53,-127,-40, 
  /* [34][0][][] */ -17,95,14,18,17,1,-50,9,6,72,-40,-4,76,127,-1,54,-8,-89,8,-2,-18,-6,19,-28,3, 
  /* [35][0][][] */ -4,70,39,24,9,-22,-1,55,-13,19,-4,-13,127,24,1,-55,-68,-34,-26,19,20,6,14,-3,95, 
  /* [36][0][][] */ -1,40,-67,-58,32,68,23,-23,-72,35,84,-23,-90,11,-7,-27,7,3,127,-29,-28,0,20,-40,36, 
  /* [37][0][][] */ 5,-54,7,-63,-30,102,60,-127,25,29,-27,86,102,-89,-77,119,-20,69,-31,14,115,-41,-30,-10,123, 
  /* [38][0][][] */ -29,127,22,-4,0,-22,-9,17,6,-2,-17,-8,-17,-3,10,-30,-8,-24,-45,-16,13,29,-13,6,25, 
  /* [39][0][][] */ 14,-46,38,33,-20,-45,65,127,5,-114,-32,-58,-71,-40,5,10,41,49,34,27,-31,-86,-20,54,-45, 
  /* [40][0][][] */ 7,-30,-57,13,6,-39,-10,15,51,-1,-18,-4,127,-15,26,-19,-13,-23,9,28,13,-2,-53,17,35, 
  /* [41][0][][] */ -17,33,-53,92,71,-70,1,-14,-21,-35,10,-107,18,-75,-49,16,-65,-45,-71,39,-56,24,127,-25,-93, 
  /* [42][0][][] */ 23,-41,70,19,19,-4,78,-17,36,-39,69,-49,55,0,6,-30,107,127,-82,25,-44,8,-6,40,-6, 
  /* [43][0][][] */ -10,-57,96,-10,6,-89,-3,60,-85,-7,-54,115,38,127,42,31,66,25,6,71,-6,-27,-38,63,-55, 
  /* [44][0][][] */ -1,-2,-64,53,44,56,-76,-28,12,-81,64,127,13,-48,-49,103,-4,16,-49,37,10,-11,21,-53,21, 
  /* [45][0][][] */ -2,17,15,-35,-7,40,-51,-8,35,13,45,39,43,-43,-13,50,-10,-2,-8,-31,39,-17,-13,1,127, 
  /* [46][0][][] */ -51,22,-7,14,54,9,41,4,18,41,127,0,-21,-19,10,-13,6,0,-46,-45,2,-32,-32,-99,-43, 
  /* [47][0][][] */ -19,-126,-14,-11,51,56,6,15,-12,-20,17,-35,11,-8,-22,-12,14,-9,4,71,-6,127,-17,-42,32, 
  /* [48][0][][] */ -53,-79,-74,43,8,17,4,-6,46,11,34,-7,13,4,2,-7,-5,4,42,-127,8,-68,-2,-22,-35, 
  /* [49][0][][] */ 54,75,30,-1,3,-12,8,0,14,15,-41,-14,19,1,7,2,6,14,-49,-17,1,-127,-25,24,-44, 
  /* [50][0][][] */ 18,-18,-12,12,10,11,-8,-25,-1,5,26,20,-9,-1,25,-5,-6,9,19,20,-1,127,4,8,0, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 51,1,1,25 } };
const TfArray<51, float> quant36_scale = { 51, { 0.0023031141608953476, 0.0066798841580748558, 0.0042826570570468903, 0.0038039598148316145, 0.0022891131229698658, 0.002775904955342412, 0.0087581947445869446, 0.0062316088005900383, 0.0025197158101946115, 0.0054483548738062382, 0.0040437076240777969, 0.0041402247734367847, 0.0023479270748794079, 0.0030037933029234409, 0.0045147109776735306, 0.001580952201038599, 0.0061085266061127186, 0.0065250350162386894, 0.0042882533743977547, 0.0052516213618218899, 0.0023328682873398066, 0.0047789765521883965, 0.0057373461313545704, 0.0024713396560400724, 0.0012628517579287291, 0.0050551029853522778, 0.0062394412234425545, 0.0054681259207427502, 0.0070600430481135845, 0.0030919939745217562, 0.0044481116347014904, 0.0046586734242737293, 0.0051975036039948463, 0.0032632327638566494, 0.0034392909146845341, 0.0030724466778337955, 0.0026477624196559191, 0.0046628168784081936, 0.0059471200220286846, 0.0025302732829004526, 0.0034045695792883635, 0.003847835585474968, 0.0040654432959854603, 0.0048053362406790257, 0.0073452536016702652, 0.0059291268698871136, 0.0041200048290193081, 0.0068163378164172173, 0.0049274549819529057, 0.0070982496254146099, 0.0065838168375194073, } };
const TfArray<51, int> quant36_zero = { 51, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[25] = { -282, 3445, 680, 1047, -155, 46925, 547, 659, 49590, 32587, -31, 43703, 1153, 353, -236, 36022, -93, -1113, -3119, 49221, 31725, 2172, 52637, 41037, -8003, };
const TfArray<1, int> tensor_dimension37 = { 1, { 25 } };
const TfArray<25, float> quant37_scale = { 25, { 3.7493507988983765e-05, 4.7516201448161155e-05, 4.4754477130481973e-05, 5.2718813094543293e-05, 6.0998107073828578e-05, 5.0769562221830711e-05, 8.9504253992345184e-05, 3.9960257709026337e-05, 5.0976988859474659e-05, 7.1362461312673986e-05, 4.7684043238405138e-05, 4.4562639232026413e-05, 4.631099000107497e-05, 6.2155042542144656e-05, 8.9012362877838314e-05, 9.7758958872873336e-05, 5.1079252443742007e-05, 5.7639950682641938e-05, 4.4200660340720788e-05, 4.0455044654663652e-05, 8.6609121353831142e-05, 4.4466763938544318e-05, 6.1976832512300462e-05, 5.1339837227715179e-05, 5.6454526202287525e-05, } };
const TfArray<25, int> quant37_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[1*3*3*25] = { 
  /* [0][0][][] */ 92,67,93,69,87,-38,63,80,-41,-61,55,-94,62,66,101,-114,73,64,60,-79,-77,55,-40,-55,80, 110,92,114,101,127,-80,92,98,-67,-86,80,-112,82,94,-18,-104,102,94,104,-90,-89,85,-97,-95,106, 39,41,45,38,47,-41,39,41,-20,-38,50,-31,36,44,-89,-38,38,41,47,-15,-18,41,-60,-52,47, 
  /* [0][1][][] */ 109,101,100,90,51,-64,105,95,-73,-87,62,-100,91,98,127,-127,90,86,74,-127,-90,81,-67,-71,81, 127,127,127,127,50,-127,127,127,-127,-127,127,-127,127,127,-30,-115,127,127,127,-124,-127,127,-127,-127,127, 58,56,56,49,1,-65,54,52,-56,-53,73,-38,56,55,-102,-27,44,53,59,-40,-40,63,-72,-69,59, 
  /* [0][2][][] */ 42,42,25,32,8,-16,40,36,-35,-36,21,-34,44,45,59,-52,22,40,31,-65,-50,42,-21,-22,21, 50,52,40,47,-39,-48,40,40,-77,-59,65,-42,61,56,-25,-56,40,57,62,-62,-62,67,-50,-47,43, 29,28,29,18,-16,-29,28,14,-49,-24,58,-4,29,24,-63,2,17,35,35,-26,-23,42,-28,-26,20, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 1,3,3,25 } };
const TfArray<25, float> quant38_scale = { 25, { 0.002089290414005518, 0.0026477954816073179, 0.0024939009454101324, 0.0029377061873674393, 0.0033990619704127312, 0.002829086035490036, 0.0049875401891767979, 0.0022267475724220276, 0.0028406446799635887, 0.0039766058325767517, 0.0026571482885628939, 0.0024832109920680523, 0.0025806361809372902, 0.0034635309129953384, 0.0049601299688220024, 0.0054475255310535431, 0.0028463432099670172, 0.0032119317911565304, 0.0024630401749163866, 0.0022543191444128752, 0.0048262113705277443, 0.0024778684601187706, 0.0034536006860435009, 0.0028608639258891344, 0.0031458751764148474, } };
const TfArray<25, int> quant38_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 3 };
const ALIGN(16) int32_t tensor_data39[25] = { 20839, 21935, 26394, -6209, -26385, 2913, 25863, -1960, 13103, 9408, -22293, -34270, -38544, 5748, 921, 56446, -7729, 12230, -18090, -21806, 4111, 7209, 27753, -15864, 14908, };
const TfArray<1, int> tensor_dimension39 = { 1, { 25 } };
const TfArray<25, float> quant39_scale = { 25, { 0.00014090169861447066, 7.3165952926501632e-05, 6.836975080659613e-05, 0.00014105615264270455, 8.9620552898850292e-05, 0.00012421111750882119, 9.3118811491876841e-05, 0.00010903803922701627, 0.00010496177856111899, 0.00011300775076961145, 0.00010499588825041428, 6.7491120717022568e-05, 8.6348925833590329e-05, 0.00010834434942808002, 0.0001526688429294154, 3.149733311147429e-05, 0.00015517971769440919, 9.4915863883215934e-05, 0.00011177494161529467, 0.00013136441702954471, 6.8513050791807473e-05, 0.00011651706881821156, 5.5572611017851159e-05, 0.00012329252786003053, 4.6695909986738116e-05, } };
const TfArray<25, int> quant39_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[25*1*1*25] = { 
  /* [0][0][][] */ 13,2,-9,5,-67,-53,6,-17,-50,-43,127,-78,0,38,-18,-110,1,-15,-88,26,11,-26,19,-9,-7, 
  /* [1][0][][] */ -19,-56,127,26,-26,11,-48,0,-36,-16,64,-127,54,-56,-11,-30,-35,72,-6,0,-8,105,37,6,85, 
  /* [2][0][][] */ -63,-78,26,16,20,52,126,-34,-99,59,34,-39,-31,-8,-52,111,-48,-120,25,127,-43,19,-46,-59,-40, 
  /* [3][0][][] */ -74,16,-5,-1,16,7,-34,57,52,-17,-34,24,-15,-35,1,-15,49,127,-20,-14,-1,-46,65,16,-37, 
  /* [4][0][][] */ -17,71,-1,-24,127,117,-18,-21,79,-60,18,-13,-74,94,57,114,-38,52,52,76,53,60,4,-52,-17, 
  /* [5][0][][] */ -18,-26,14,-1,-11,26,-3,18,4,127,7,-27,-6,-29,-17,-12,1,20,16,-10,-36,-13,3,60,-11, 
  /* [6][0][][] */ -58,-6,15,-31,47,23,-24,42,-15,-10,22,-31,-3,-4,-30,29,-28,-23,-14,-74,67,-60,23,43,-127, 
  /* [7][0][][] */ 23,52,-20,19,35,6,-22,16,-50,0,-26,63,88,24,22,6,-98,127,-19,-48,-34,-64,-37,-7,62, 
  /* [8][0][][] */ -2,10,2,27,6,38,17,127,9,-48,8,-7,-40,9,-33,11,27,-18,32,-38,48,-86,17,7,-16, 
  /* [9][0][][] */ 29,31,13,-62,2,35,58,-18,-16,-85,24,-34,-54,74,-28,8,-40,-127,49,5,-32,42,-2,-12,-2, 
  /* [10][0][][] */ 6,30,7,23,84,69,13,3,127,54,-16,-25,-22,-102,-14,77,-20,64,75,2,-9,111,-20,25,-89, 
  /* [11][0][][] */ -81,102,-2,-4,13,91,-49,22,42,17,7,119,-62,-42,124,-40,44,106,36,-20,-98,48,-28,-9,127, 
  /* [12][0][][] */ 127,15,-16,50,66,4,-10,22,83,8,9,88,27,-6,-23,27,54,9,74,-1,39,-44,16,2,82, 
  /* [13][0][][] */ -28,24,20,16,55,46,-33,11,127,-5,-3,-58,-76,-6,45,19,-62,-75,28,-9,45,-59,-1,-3,65, 
  /* [14][0][][] */ 10,-15,17,1,12,5,2,1,19,-2,-10,-17,-1,11,-3,-4,-1,-1,127,1,-6,3,-22,-2,-34, 
  /* [15][0][][] */ -11,-28,43,80,66,-59,-91,90,-90,-3,3,29,-13,-33,105,-36,26,87,-69,-104,-123,-25,-6,20,-127, 
  /* [16][0][][] */ -85,-29,2,-11,-15,0,11,0,-1,17,2,-10,52,-19,2,23,127,1,-5,61,27,12,19,14,-26, 
  /* [17][0][][] */ 81,16,36,-18,-16,-2,22,14,-111,-6,4,-17,6,-40,-28,-27,26,90,9,-25,-34,26,3,-15,-127, 
  /* [18][0][][] */ -29,-55,2,22,-17,43,53,12,28,6,33,127,80,-45,16,-65,-50,31,102,18,-34,49,79,31,-1, 
  /* [19][0][][] */ 52,12,103,23,44,39,48,23,28,33,51,127,-5,-27,17,35,31,-40,-72,12,-14,-65,1,16,3, 
  /* [20][0][][] */ -67,-3,1,25,-20,-27,18,-14,-7,1,-16,-1,58,-11,-21,35,127,29,-13,22,43,-8,42,63,-26, 
  /* [21][0][][] */ 13,-3,92,3,-1,-23,-13,-1,24,5,-15,-70,15,22,8,-19,-8,19,127,9,-8,-21,-2,6,-21, 
  /* [22][0][][] */ 77,-71,-16,-86,-46,-38,27,89,-11,-24,-29,-50,22,-10,13,63,-78,9,-18,100,-37,-111,127,87,21, 
  /* [23][0][][] */ 16,96,8,55,72,17,-5,4,-15,-103,-54,79,55,127,-13,18,18,-40,13,-6,16,-3,19,-20,-3, 
  /* [24][0][][] */ -103,-42,-20,15,-112,-53,111,-19,-82,6,-61,-3,-78,42,5,-47,56,63,50,127,-59,26,-22,-63,86, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 25,1,1,25 } };
const TfArray<25, float> quant40_scale = { 25, { 0.0085564916953444481, 0.0044431248679757118, 0.0041518677026033401, 0.0085658710449934006, 0.0054423580877482891, 0.0075429277494549751, 0.0056547955609858036, 0.0066215172410011292, 0.0063739796169102192, 0.0068625845015048981, 0.006376050878316164, 0.0040985113009810448, 0.0052436827681958675, 0.0065793916583061218, 0.0092710712924599648, 0.0019127283012494445, 0.0094235483556985855, 0.0057639246806502342, 0.0067877201363444328, 0.0079773236066102982, 0.0041605695150792599, 0.0070756939239799976, 0.003374739782884717, 0.0074871447868645191, 0.0028356872498989105, } };
const TfArray<25, int> quant40_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[25] = { 16819, 33092, 374, -8, -12, 12257, -699, 11, 9692, 2233, -323, 10666, 1932, 5199, -66, 6781, 1052, 686, 708, 38211, 9042, 11022, -61, 38, 448, };
const TfArray<1, int> tensor_dimension41 = { 1, { 25 } };
const TfArray<25, float> quant41_scale = { 25, { 0.00016061974747572094, 5.1851089665433392e-05, 0.00027720897924154997, 0.00029651861405000091, 0.0003025120822712779, 0.00024177059822250158, 0.00023056573991198093, 0.00047544855624437332, 0.00029677877319045365, 0.00033424244611524045, 0.00032052863389253616, 0.00023993640206754208, 0.0004635546647477895, 0.00044086747220717371, 0.00040082313353195786, 0.00028399634175002575, 0.00019571400480344892, 0.00053534668404608965, 0.00024057437258306891, 5.373696330934763e-05, 0.00016511241847183555, 0.00022278477263171226, 0.0002718833857215941, 8.1021411460824311e-05, 0.00026244414038956165, } };
const TfArray<25, int> quant41_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[1*3*3*25] = { 
  /* [0][0][][] */ 6,-12,-25,27,-17,-78,-14,-127,3,-1,2,10,19,29,9,22,-23,-3,-6,-112,-41,-42,-28,-3,-11, -46,44,127,72,-11,-67,36,88,1,8,-37,-3,-41,-21,57,2,23,1,-6,-127,-127,56,17,-7,8, 27,-15,-34,14,-2,10,-31,40,11,-1,-12,7,16,-4,-52,-2,-15,-5,-14,-23,-4,25,12,-2,-9, 
  /* [0][1][][] */ -93,-118,-58,-74,60,-127,49,123,-30,-127,-1,-6,56,-127,-55,-25,33,-20,10,-76,-49,-7,-126,127,31, -127,-127,-74,-127,127,-83,127,-89,-127,83,127,-127,-127,2,-127,-127,127,127,127,-110,-48,-127,127,40,127, -36,-15,-57,-33,9,25,-23,-39,-35,26,37,33,41,-7,120,-34,10,-39,35,20,-7,-66,-6,5,3, 
  /* [0][2][][] */ 33,-12,18,35,-46,79,-34,21,17,8,-19,18,6,33,28,32,-21,4,-13,-17,44,6,18,-35,-15, 18,-6,-32,67,-108,87,-31,-15,37,7,-58,27,-28,-4,62,-15,8,-36,-47,-2,-19,26,-32,18,-30, 25,16,12,10,-18,-79,-4,-4,19,0,-26,5,9,0,-40,13,-11,5,-23,-11,33,14,14,-9,-10, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 1,3,3,25 } };
const TfArray<25, float> quant42_scale = { 25, { 0.0068263392895460129, 0.0022036712616682053, 0.011781381443142891, 0.01260204054415226, 0.012856763787567616, 0.010275250300765038, 0.0097990436479449272, 0.020206563174724579, 0.012613098137080669, 0.014205303974449635, 0.0136224664747715, 0.010197296738624573, 0.019701072946190834, 0.018736867234110832, 0.017034983262419701, 0.012069844640791416, 0.0083178449422121048, 0.02275223471224308, 0.010224410332739353, 0.0022838208824396133, 0.0070172776468098164, 0.009468352422118187, 0.01155504398047924, 0.0034434099216014147, 0.011153875850141048, } };
const TfArray<25, int> quant42_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 3 };
const ALIGN(16) int32_t tensor_data43[25] = { 30461, -45626, 2178, 239, 1411, 13223, -1527, 46707, 26809, 38473, 22103, 8418, 24168, 8430, -14290, 68766, 3415, 23717, -4453, 19811, 34325, 43171, -24629, -7136, 46609, };
const TfArray<1, int> tensor_dimension43 = { 1, { 25 } };
const TfArray<25, float> quant43_scale = { 25, { 7.3560193413868546e-05, 0.00017965208098758012, 0.00019204890122637153, 7.1431961259804666e-05, 6.678781210212037e-05, 3.8338814192684367e-05, 0.00010157986980630085, 6.8387729697860777e-05, 5.602270903182216e-05, 8.065796282608062e-05, 0.00019346227054484189, 0.00013050615962129086, 0.0001015671732602641, 4.1649047489045188e-05, 0.00010357044084230438, 3.4701937693171203e-05, 0.00010296011896571144, 6.7198438046034425e-05, 0.0001464208762627095, 0.00018616925808601081, 0.00011760482448153198, 6.3033141486812383e-05, 0.00011418521171435714, 0.00036409249878488481, 5.7308923715027049e-05, } };
const TfArray<25, int> quant43_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const ALIGN(16) int8_t tensor_data44[25*1*1*12] = { 
  /* [0][0][][] */ -127,71,8,-8,0,-20,103,27,-90,23,-58,-9, 
  /* [1][0][][] */ 127,117,49,-56,103,-6,-17,-3,80,0,36,-24, 
  /* [2][0][][] */ 5,0,8,-1,127,-54,-7,-1,16,0,5,2, 
  /* [3][0][][] */ 72,-79,15,-45,3,22,-13,127,-8,74,49,47, 
  /* [4][0][][] */ -45,15,12,-7,-41,0,9,0,-26,-9,127,-11, 
  /* [5][0][][] */ 53,21,16,-2,127,7,-4,16,34,0,10,14, 
  /* [6][0][][] */ 29,-2,127,21,-98,69,-17,-34,23,-22,-96,-26, 
  /* [7][0][][] */ -24,-32,-30,17,-40,-33,9,-22,-3,-12,-127,14, 
  /* [8][0][][] */ -19,-127,75,-5,39,-61,104,1,51,-21,-41,-5, 
  /* [9][0][][] */ 28,-48,-47,-4,-4,9,-24,1,-2,8,-127,28, 
  /* [10][0][][] */ 13,-45,3,-10,-28,-127,-4,0,16,0,-6,0, 
  /* [11][0][][] */ 5,14,33,5,123,-127,-17,4,38,7,-8,-6, 
  /* [12][0][][] */ 14,50,-5,15,-20,-6,-35,-16,-127,-20,0,-2, 
  /* [13][0][][] */ -70,-8,24,-14,-21,38,8,-4,6,2,127,-38, 
  /* [14][0][][] */ -72,8,39,20,38,-17,95,41,127,28,-58,-12, 
  /* [15][0][][] */ -51,-49,-115,-5,-46,124,-74,-15,-55,11,-127,-32, 
  /* [16][0][][] */ 31,23,9,-127,5,-14,-15,104,30,57,-32,19, 
  /* [17][0][][] */ 58,-127,10,-14,50,-1,-13,18,-59,14,55,25, 
  /* [18][0][][] */ 1,21,-17,-8,56,127,8,5,-34,-5,-31,1, 
  /* [19][0][][] */ -44,-50,-127,-15,-17,1,22,-3,11,-2,54,-5, 
  /* [20][0][][] */ -44,-90,62,29,-11,31,9,-59,-127,-39,-14,-31, 
  /* [21][0][][] */ 27,-30,-48,61,-37,-38,2,-49,32,-1,-127,-5, 
  /* [22][0][][] */ 3,53,-5,-24,34,127,11,16,-5,8,66,4, 
  /* [23][0][][] */ 10,33,-5,0,-25,6,14,-3,15,-52,2,127, 
  /* [24][0][][] */ 47,9,5,-18,-21,-72,-72,-2,-127,-11,-24,0, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 25,1,1,12 } };
const TfArray<25, float> quant44_scale = { 25, { 0.0046212687157094479, 0.011286274529993534, 0.012065079994499683, 0.0044875671155750751, 0.0041958079673349857, 0.0024085575714707375, 0.0063815475441515446, 0.0042963195592164993, 0.0035195122472941875, 0.0050671715289354324, 0.012153871357440948, 0.0081987828016281128, 0.0063807498663663864, 0.0026165163144469261, 0.0065066013485193253, 0.002180078299716115, 0.0064682592637836933, 0.0042216046713292599, 0.0091985920444130898, 0.011695703491568565, 0.0073882825672626495, 0.003959928173571825, 0.0071734525263309479, 0.022873366251587868, 0.003600316122174263, } };
const TfArray<25, int> quant44_zero = { 25, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const ALIGN(16) int32_t tensor_data45[12] = { 34440, 61059, 53588, 8284, 338, 57338, 160, -255, 81818, -1217, 50400, -252, };
const TfArray<1, int> tensor_dimension45 = { 1, { 12 } };
const TfArray<12, float> quant45_scale = { 12, { 0.00010157140059163794, 8.0332443758379668e-05, 0.00017176117398776114, 9.0197310782968998e-05, 7.2708193329162896e-05, 5.9547866840148345e-05, 9.4484159490093589e-05, 4.1876370232785121e-05, 3.8582453271374106e-05, 4.2081384890479967e-05, 0.00017483564442954957, 0.00022875305148772895, } };
const TfArray<12, int> quant45_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const ALIGN(16) int8_t tensor_data46[1*3*3*12] = { 
  /* [0][0][][] */ -105,-68,-72,-80,74,-50,127,28,-81,-1,-80,-108, -97,-101,-87,-127,98,-85,126,106,-93,-103,-127,36, 1,-37,-26,-59,45,-45,64,31,-36,82,-69,75, 
  /* [0][1][][] */ -127,-100,-106,-91,98,-80,124,36,-103,9,-74,-127, -121,-127,-127,-117,127,-127,125,127,-127,-110,-125,41, -6,-52,-42,-51,61,-72,76,26,-41,127,-71,86, 
  /* [0][2][][] */ -31,-42,-64,-11,58,-23,67,3,-44,3,1,-32, -39,-56,-77,-16,72,-54,65,39,-52,-57,5,10, -7,-23,-16,-6,36,-29,37,-2,-12,62,7,25, 
};
const TfArray<4, int> tensor_dimension46 = { 4, { 1,3,3,12 } };
const TfArray<12, float> quant46_scale = { 12, { 0.0043167844414710999, 0.0034141286741942167, 0.0072998497635126114, 0.0038333856500685215, 0.0030900982674211264, 0.0025307843461632729, 0.0040155765600502491, 0.0017797456821426749, 0.0016397541621699929, 0.0017884587869048119, 0.0074305147863924503, 0.0097220046445727348, } };
const TfArray<12, int> quant46_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 3 };
const ALIGN(16) int32_t tensor_data47[12] = { 1155, 13915, 24636, -7565, -8258, 15803, -15566, -9745, 14733, -10509, 25372, 10759, };
const TfArray<1, int> tensor_dimension47 = { 1, { 12 } };
const TfArray<12, float> quant47_scale = { 12, { 9.2747141025029123e-05, 8.9340726844966412e-05, 5.4830794397275895e-05, 0.00031294993823394179, 0.00015453877858817577, 0.00018826495215762407, 0.00029461673693731427, 0.00035054239560849965, 0.00024135748390108347, 0.00027421014965511858, 6.0005197155987844e-05, 9.9490993306972086e-05, } };
const TfArray<12, int> quant47_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const ALIGN(16) int8_t tensor_data48[12*1*1*12] = { 
  /* [0][0][][] */ 6,-33,-39,29,103,49,2,20,-3,127,-5,21, 
  /* [1][0][][] */ 13,127,25,-99,1,-102,-34,-51,13,43,-22,29, 
  /* [2][0][][] */ -34,-27,84,18,22,34,41,-34,40,-9,-5,127, 
  /* [3][0][][] */ 127,-24,-31,6,12,-38,-7,13,-7,-13,108,-2, 
  /* [4][0][][] */ 0,6,9,0,-2,-4,110,-2,127,6,0,4, 
  /* [5][0][][] */ 0,-36,17,15,-4,22,-127,-6,54,6,8,2, 
  /* [6][0][][] */ -1,48,15,0,127,-4,4,7,2,4,-4,-13, 
  /* [7][0][][] */ 127,-44,40,50,38,-76,-1,38,-13,-2,127,-5, 
  /* [8][0][][] */ 13,-14,10,-1,-127,-5,-2,-12,48,65,10,-31, 
  /* [9][0][][] */ 127,-25,-10,26,36,-37,22,8,-5,7,76,2, 
  /* [10][0][][] */ 6,-1,127,2,-11,14,52,-110,-16,1,22,-24, 
  /* [11][0][][] */ -13,-7,98,-27,-6,9,19,-127,-1,4,0,2, 
};
const TfArray<4, int> tensor_dimension48 = { 4, { 12,1,1,12 } };
const TfArray<12, float> quant48_scale = { 12, { 0.003941753413528204, 0.0037969807162880898, 0.0023303087800741196, 0.013300372287631035, 0.0065678977407515049, 0.0080012604594230652, 0.012521211057901382, 0.014898051507771015, 0.010257693007588387, 0.011653930880129337, 0.0025502208154648542, 0.0042283670045435429, } };
const TfArray<12, int> quant48_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const ALIGN(16) int32_t tensor_data49[12] = { 1146, 22884, 6477, 2471, 929, 2175, 17788, 876, -80, 436, 7501, 2, };
const TfArray<1, int> tensor_dimension49 = { 1, { 12 } };
const TfArray<12, float> quant49_scale = { 12, { 0.00023565170704387128, 0.00013052020221948624, 0.00086604210082441568, 0.00024642652715556324, 0.00032497139181941748, 0.0002463621785864234, 0.00014157344412524253, 8.8974884420167655e-05, 0.00023603225417900831, 0.00069347902899608016, 0.00024879354168660939, 0.00045157098793424666, } };
const TfArray<12, int> quant49_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const ALIGN(16) int8_t tensor_data50[1*3*3*12] = { 
  /* [0][0][][] */ 57,-42,0,-60,-8,-12,21,3,26,3,-49,-9, -32,-58,-10,6,19,-22,-32,35,-48,18,10,4, -4,31,1,-8,-5,0,15,-10,-1,-2,1,-7, 
  /* [0][1][][] */ 127,-71,-4,-127,6,-127,23,108,-79,10,-127,51, -3,-127,-127,-16,127,-35,-127,127,127,-127,1,122, 20,-18,11,3,-23,0,3,80,14,29,3,19, 
  /* [0][2][][] */ 23,-14,-1,-51,-4,-3,17,19,10,7,-44,-43, -13,-44,-6,10,-7,-13,-46,30,-33,20,10,-127, -12,28,3,-3,2,1,-4,9,-10,4,1,-11, 
};
const TfArray<4, int> tensor_dimension50 = { 4, { 1,3,3,12 } };
const TfArray<12, float> quant50_scale = { 12, { 0.010015197098255157, 0.0055471085943281651, 0.036806788295507431, 0.010473127476871014, 0.013811283744871616, 0.010470392182469368, 0.0060168709605932236, 0.003781432518735528, 0.01003137044608593, 0.029472857713699341, 0.010573725216090679, 0.019191766157746315, } };
const TfArray<12, int> quant50_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 3 };
const ALIGN(16) int32_t tensor_data51[12] = { 2867, -2448, -4729, 12018, 15194, -14180, -2713, -27739, 10344, 5533, -3835, 41614, };
const TfArray<1, int> tensor_dimension51 = { 1, { 12 } };
const TfArray<12, float> quant51_scale = { 12, { 0.00013878734898753464, 0.00014380700304172933, 5.4139287385623902e-05, 0.00022720628476236016, 8.5103136370889843e-05, 0.00023521789989899844, 0.00021945752087049186, 0.00022586864361073822, 0.00027204104117117822, 0.00023061044339556247, 0.0001423247013008222, 0.00012457399861887097, } };
const TfArray<12, int> quant51_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const ALIGN(16) int8_t tensor_data52[12*1*1*6] = { 
  /* [0][0][][] */ 95,21,-18,127,-22,-23, 
  /* [1][0][][] */ 28,127,-26,28,-45,70, 
  /* [2][0][][] */ -13,-21,77,-1,127,1, 
  /* [3][0][][] */ -127,11,-16,16,-32,-14, 
  /* [4][0][][] */ 7,61,-7,3,-18,-127, 
  /* [5][0][][] */ 127,-8,22,-34,42,-8, 
  /* [6][0][][] */ 1,-10,127,1,-71,2, 
  /* [7][0][][] */ -14,-3,78,-8,127,6, 
  /* [8][0][][] */ 0,1,-127,-1,75,4, 
  /* [9][0][][] */ -9,-127,36,-6,60,13, 
  /* [10][0][][] */ 127,-28,20,-34,36,-5, 
  /* [11][0][][] */ 2,-12,-96,-19,-127,-1, 
};
const TfArray<4, int> tensor_dimension52 = { 4, { 12,1,1,6 } };
const TfArray<12, float> quant52_scale = { 12, { 0.0071285455487668514, 0.007386370562016964, 0.0027807606384158134, 0.011670014820992947, 0.0043711592443287373, 0.012081515975296497, 0.011272014118731022, 0.011601309292018414, 0.013972865417599678, 0.011844863183796406, 0.0073102354072034359, 0.0063985045999288559, } };
const TfArray<12, int> quant52_zero = { 12, { 0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const ALIGN(16) int32_t tensor_data53[6] = { 7503, 63082, 65597, 265, -25725, 4050, };
const TfArray<1, int> tensor_dimension53 = { 1, { 6 } };
const TfArray<6, float> quant53_scale = { 6, { 0.00033080947468988597, 4.6278903027996421e-05, 0.00012008541671093553, 0.00020402087830007076, 0.00013552360178437084, 5.2200779464328662e-05, } };
const TfArray<6, int> quant53_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const ALIGN(16) int8_t tensor_data54[1*3*3*6] = { 
  /* [0][0][][] */ -79,-76,-50,-24,51,35, 50,-98,-89,81,87,54, -8,-41,-39,-60,37,23, 
  /* [0][1][][] */ -127,-98,-72,-38,73,64, 84,-127,-127,127,127,127, -7,-49,-59,-93,53,72, 
  /* [0][2][][] */ -59,-39,-28,-13,30,35, 45,-49,-47,72,47,82, 2,-11,-14,-44,15,52, 
};
const TfArray<4, int> tensor_dimension54 = { 4, { 1,3,3,6 } };
const TfArray<6, float> quant54_scale = { 6, { 0.014059402979910374, 0.0019668533932417631, 0.0051036300137639046, 0.0086708869785070419, 0.0057597528211772442, 0.0022185330744832754, } };
const TfArray<6, int> quant54_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 3 };
const ALIGN(16) int32_t tensor_data55[6] = { 30397, -19133, -9580, -5606, 29011, -2927, };
const TfArray<1, int> tensor_dimension55 = { 1, { 6 } };
const TfArray<6, float> quant55_scale = { 6, { 9.0910216385964304e-05, 0.00048912479542195797, 0.00010682363790692762, 9.1497393441386521e-05, 0.00014648125215899199, 0.00062429741956293583, } };
const TfArray<6, int> quant55_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const ALIGN(16) int8_t tensor_data56[6*1*1*3] = { 
  /* [0][0][][] */ -127,11,9, 
  /* [1][0][][] */ 127,-4,-3, 
  /* [2][0][][] */ 110,1,127, 
  /* [3][0][][] */ 127,-7,-19, 
  /* [4][0][][] */ -127,0,58, 
  /* [5][0][][] */ 0,127,-1, 
};
const TfArray<4, int> tensor_dimension56 = { 4, { 6,1,1,3 } };
const TfArray<6, float> quant56_scale = { 6, { 0.004467720165848732, 0.024037702009081841, 0.0052497745491564274, 0.0044965767301619053, 0.0071987207047641277, 0.030680667608976364, } };
const TfArray<6, int> quant56_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const ALIGN(8) int32_t tensor_data57[3] = { 29245, 2147, 9776, };
const TfArray<1, int> tensor_dimension57 = { 1, { 3 } };
const TfArray<3, float> quant57_scale = { 3, { 0.00013265643792692572, 0.00023865060938987881, 0.00012830077321268618, } };
const TfArray<3, int> quant57_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const ALIGN(16) int8_t tensor_data58[1*3*3*3] = { 
  /* [0][0][][] */ -5,-1,-3, -9,127,38, 18,-5,-41, 
  /* [0][1][][] */ 12,-1,65, 41,-121,127, -127,-4,-79, 
  /* [0][2][][] */ -3,10,-59, -13,-16,-15, 36,11,-2, 
};
const TfArray<4, int> tensor_dimension58 = { 4, { 1,3,3,3 } };
const TfArray<3, float> quant58_scale = { 3, { 0.0093908132985234261, 0.01689419150352478, 0.0090824738144874573, } };
const TfArray<3, int> quant58_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 3 };
const ALIGN(8) int32_t tensor_data59[3] = { 89434, 114670, 71568, };
const TfArray<1, int> tensor_dimension59 = { 1, { 3 } };
const TfArray<3, float> quant59_scale = { 3, { 1.8226137399324216e-05, 9.5429950306424871e-06, 1.9101027646684088e-05, } };
const TfArray<3, int> quant59_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const ALIGN(16) int8_t tensor_data60[3*3*3*3] = { 
  /* [0][0][][] */ 32,64,21, -3,-9,14, -33,-72,-8, 
  /* [0][1][][] */ 79,115,34, -6,-12,20, -74,-127,-16, 
  /* [0][2][][] */ 33,21,24, -2,-10,11, -29,-36,-16, 
  /* [1][0][][] */ -8,-38,-11, -26,-77,-18, -10,-41,-14, 
  /* [1][1][][] */ 50,80,0, 73,127,2, 54,83,1, 
  /* [1][2][][] */ -41,-30,16, -61,-64,15, -42,-36,18, 
  /* [2][0][][] */ 17,3,-21, 49,11,-56, 49,31,-75, 
  /* [2][1][][] */ 55,-81,24, 68,-99,33, 47,-41,-4, 
  /* [2][2][][] */ 42,-98,56, 30,-127,95, 18,-74,52, 
};
const TfArray<4, int> tensor_dimension60 = { 4, { 3,3,3,3 } };
const TfArray<3, float> quant60_scale = { 3, { 0.0046476647257804871, 0.0024334636982530355, 0.004870761651545763, } };
const TfArray<3, int> quant60_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,48,48,3 } };
const TfArray<1, float> quant61_scale = { 1, { 0.014126192778348923, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,48,48,3 } };
const TfArray<1, float> quant62_scale = { 1, { 0.020348234102129936, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,48,48,6 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,49,49,6 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,24,24,6 } };
const TfArray<1, float> quant65_scale = { 1, { 0.019469236955046654, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,24,24,12 } };
const TfArray<1, float> quant66_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant66_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,24,24,12 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,24,24,12 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,25,25,12 } };
const TfArray<1, float> quant69_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,12 } };
const TfArray<1, float> quant70_scale = { 1, { 0.015917748212814331, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,25 } };
const TfArray<1, float> quant71_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfArray<4, int> tensor_dimension72 = { 4, { 1,12,12,25 } };
const TfArray<1, float> quant72_scale = { 1, { 0.016467228531837463, } };
const TfArray<1, int> quant72_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const TfArray<4, int> tensor_dimension73 = { 4, { 1,12,12,25 } };
const TfArray<1, float> quant73_scale = { 1, { 0.01794557087123394, } };
const TfArray<1, int> quant73_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const TfArray<4, int> tensor_dimension74 = { 4, { 1,13,13,25 } };
const TfArray<1, float> quant74_scale = { 1, { 0.01794557087123394, } };
const TfArray<1, int> quant74_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const TfArray<4, int> tensor_dimension75 = { 4, { 1,6,6,25 } };
const TfArray<1, float> quant75_scale = { 1, { 0.014812387526035309, } };
const TfArray<1, int> quant75_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const TfArray<4, int> tensor_dimension76 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant76_scale = { 1, { 0.013779119588434696, } };
const TfArray<1, int> quant76_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const TfArray<4, int> tensor_dimension77 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant77_scale = { 1, { 0.019242379814386368, } };
const TfArray<1, int> quant77_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const TfArray<4, int> tensor_dimension78 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant78_scale = { 1, { 0.017259553074836731, } };
const TfArray<1, int> quant78_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const TfArray<4, int> tensor_dimension79 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant79_scale = { 1, { 0.02152852900326252, } };
const TfArray<1, int> quant79_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const TfArray<4, int> tensor_dimension80 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant80_scale = { 1, { 0.019957687705755234, } };
const TfArray<1, int> quant80_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const TfArray<4, int> tensor_dimension81 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant81_scale = { 1, { 0.0202187430113554, } };
const TfArray<1, int> quant81_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<4, int> tensor_dimension82 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant82_scale = { 1, { 0.01529241818934679, } };
const TfArray<1, int> quant82_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const TfArray<4, int> tensor_dimension83 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant83_scale = { 1, { 0.018353831022977829, } };
const TfArray<1, int> quant83_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const TfArray<4, int> tensor_dimension84 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant84_scale = { 1, { 0.016512509435415268, } };
const TfArray<1, int> quant84_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 0 };
const TfArray<4, int> tensor_dimension85 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant85_scale = { 1, { 0.018616341054439545, } };
const TfArray<1, int> quant85_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 0 };
const TfArray<4, int> tensor_dimension86 = { 4, { 1,6,6,51 } };
const TfArray<1, float> quant86_scale = { 1, { 0.018733642995357513, } };
const TfArray<1, int> quant86_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<4, int> tensor_dimension87 = { 4, { 1,7,7,51 } };
const TfArray<1, float> quant87_scale = { 1, { 0.018733642995357513, } };
const TfArray<1, int> quant87_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const TfArray<4, int> tensor_dimension88 = { 4, { 1,3,3,51 } };
const TfArray<1, float> quant88_scale = { 1, { 0.017336523160338402, } };
const TfArray<1, int> quant88_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const TfArray<4, int> tensor_dimension89 = { 4, { 1,3,3,102 } };
const TfArray<1, float> quant89_scale = { 1, { 0.020242750644683838, } };
const TfArray<1, int> quant89_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const TfArray<4, int> tensor_dimension90 = { 4, { 1,3,3,102 } };
const TfArray<1, float> quant90_scale = { 1, { 0.020937778055667877, } };
const TfArray<1, int> quant90_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const TfArray<4, int> tensor_dimension91 = { 4, { 1,3,3,102 } };
const TfArray<1, float> quant91_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant91_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const TfArray<4, int> tensor_dimension92 = { 4, { 1,1,1,102 } };
const TfArray<1, float> quant92_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant92_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const TfArray<2, int> tensor_dimension93 = { 2, { 1,64 } };
const TfArray<1, float> quant93_scale = { 1, { 0.020211171358823776, } };
const TfArray<1, int> quant93_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const TfArray<2, int> tensor_dimension94 = { 2, { 1,8 } };
const TfArray<1, float> quant94_scale = { 1, { 0.058157220482826233, } };
const TfArray<1, int> quant94_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const TfArray<2, int> tensor_dimension95 = { 2, { 1,8 } };
const TfArray<1, float> quant95_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant95_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,60,59 } };
const TfArray<1, int> outputs0 = { 1, { 61 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 61,58,57 } };
const TfArray<1, int> outputs1 = { 1, { 62 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 62,56,55 } };
const TfArray<1, int> outputs2 = { 1, { 63 } };
const TfArray<2, int> inputs3 = { 2, { 63,1 } };
const TfArray<1, int> outputs3 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata4 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 64,54,53 } };
const TfArray<1, int> outputs4 = { 1, { 65 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 65,52,51 } };
const TfArray<1, int> outputs5 = { 1, { 66 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 66,50,49 } };
const TfArray<1, int> outputs6 = { 1, { 67 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 67,48,47 } };
const TfArray<1, int> outputs7 = { 1, { 68 } };
const TfArray<2, int> inputs8 = { 2, { 68,1 } };
const TfArray<1, int> outputs8 = { 1, { 69 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 69,46,45 } };
const TfArray<1, int> outputs9 = { 1, { 70 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 70,44,43 } };
const TfArray<1, int> outputs10 = { 1, { 71 } };
const TfLiteDepthwiseConvParams opdata11 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 71,42,41 } };
const TfArray<1, int> outputs11 = { 1, { 72 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 72,40,39 } };
const TfArray<1, int> outputs12 = { 1, { 73 } };
const TfArray<2, int> inputs13 = { 2, { 73,1 } };
const TfArray<1, int> outputs13 = { 1, { 74 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 74,38,37 } };
const TfArray<1, int> outputs14 = { 1, { 75 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 75,36,35 } };
const TfArray<1, int> outputs15 = { 1, { 76 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 76,34,33 } };
const TfArray<1, int> outputs16 = { 1, { 77 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 77,32,31 } };
const TfArray<1, int> outputs17 = { 1, { 78 } };
const TfLiteDepthwiseConvParams opdata18 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 78,30,29 } };
const TfArray<1, int> outputs18 = { 1, { 79 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 79,28,27 } };
const TfArray<1, int> outputs19 = { 1, { 80 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 80,26,25 } };
const TfArray<1, int> outputs20 = { 1, { 81 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 81,24,23 } };
const TfArray<1, int> outputs21 = { 1, { 82 } };
const TfLiteDepthwiseConvParams opdata22 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 82,22,21 } };
const TfArray<1, int> outputs22 = { 1, { 83 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 83,20,19 } };
const TfArray<1, int> outputs23 = { 1, { 84 } };
const TfLiteDepthwiseConvParams opdata24 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 84,18,17 } };
const TfArray<1, int> outputs24 = { 1, { 85 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 85,16,15 } };
const TfArray<1, int> outputs25 = { 1, { 86 } };
const TfArray<2, int> inputs26 = { 2, { 86,1 } };
const TfArray<1, int> outputs26 = { 1, { 87 } };
const TfLiteDepthwiseConvParams opdata27 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs27 = { 3, { 87,14,13 } };
const TfArray<1, int> outputs27 = { 1, { 88 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 88,12,11 } };
const TfArray<1, int> outputs28 = { 1, { 89 } };
const TfLiteDepthwiseConvParams opdata29 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 89,10,9 } };
const TfArray<1, int> outputs29 = { 1, { 90 } };
const TfLiteConvParams opdata30 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 90,8,7 } };
const TfArray<1, int> outputs30 = { 1, { 91 } };
const ALIGN(1) uint8_t opdata31[1] = { 1,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs31 = { 2, { 91,2 } };
const TfArray<1, int> outputs31 = { 1, { 92 } };
const TfLiteFullyConnectedParams opdata32 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs32 = { 3, { 92,6,5 } };
const TfArray<1, int> outputs32 = { 1, { 93 } };
const TfLiteFullyConnectedParams opdata33 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs33 = { 3, { 93,4,3 } };
const TfArray<1, int> outputs33 = { 1, { 94 } };
const TfLiteSoftmaxParams opdata34 = { 1 };
const TfArray<1, int> inputs34 = { 1, { 94 } };
const TfArray<1, int> outputs34 = { 1, { 95 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 6528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 10404, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 5202, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 2601, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 204, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 1275, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 625, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data44, (TfLiteIntArray*)&g0::tensor_dimension44, 300, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data45, (TfLiteIntArray*)&g0::tensor_dimension45, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data46, (TfLiteIntArray*)&g0::tensor_dimension46, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data47, (TfLiteIntArray*)&g0::tensor_dimension47, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data48, (TfLiteIntArray*)&g0::tensor_dimension48, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data49, (TfLiteIntArray*)&g0::tensor_dimension49, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data50, (TfLiteIntArray*)&g0::tensor_dimension50, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data51, (TfLiteIntArray*)&g0::tensor_dimension51, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data52, (TfLiteIntArray*)&g0::tensor_dimension52, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data53, (TfLiteIntArray*)&g0::tensor_dimension53, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data54, (TfLiteIntArray*)&g0::tensor_dimension54, 54, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data55, (TfLiteIntArray*)&g0::tensor_dimension55, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data56, (TfLiteIntArray*)&g0::tensor_dimension56, 18, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data57, (TfLiteIntArray*)&g0::tensor_dimension57, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data58, (TfLiteIntArray*)&g0::tensor_dimension58, 27, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data59, (TfLiteIntArray*)&g0::tensor_dimension59, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data60, (TfLiteIntArray*)&g0::tensor_dimension60, 81, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension62, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14416), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 14406, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14416), (TfLiteIntArray*)&g0::tensor_dimension65, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension66, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7504), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 7500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7504), (TfLiteIntArray*)&g0::tensor_dimension70, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3600), (TfLiteIntArray*)&g0::tensor_dimension71, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension72, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant72))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4240), (TfLiteIntArray*)&g0::tensor_dimension73, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant73))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension74, 4225, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant74))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4240), (TfLiteIntArray*)&g0::tensor_dimension75, 900, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant75))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1840), (TfLiteIntArray*)&g0::tensor_dimension76, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant76))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension77, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant77))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1840), (TfLiteIntArray*)&g0::tensor_dimension78, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant78))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension79, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant79))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1840), (TfLiteIntArray*)&g0::tensor_dimension80, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant80))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension81, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant81))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1840), (TfLiteIntArray*)&g0::tensor_dimension82, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant82))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension83, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant83))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1840), (TfLiteIntArray*)&g0::tensor_dimension84, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant84))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension85, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant85))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2512), (TfLiteIntArray*)&g0::tensor_dimension86, 1836, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant86))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension87, 2499, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant87))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3696), (TfLiteIntArray*)&g0::tensor_dimension88, 459, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant88))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2768), (TfLiteIntArray*)&g0::tensor_dimension89, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant89))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1840), (TfLiteIntArray*)&g0::tensor_dimension90, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant90))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension91, 918, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant91))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1344), (TfLiteIntArray*)&g0::tensor_dimension92, 102, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant92))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension93, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant93))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64), (TfLiteIntArray*)&g0::tensor_dimension94, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant94))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension95, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant95))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[35] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata31)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[35] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata31)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_MEAN, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 96, };
const size_t tflNodes_subgraph_index[] = {0, 35, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  95, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_17_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 96;
  for (size_t i = 0; i < 96; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_MEAN] = Register_MEAN();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_invoke() {
  for (size_t i = 0; i < 35; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_17_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
